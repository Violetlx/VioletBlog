<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java架构师成长路径图</title>
      <link href="/posts/621998ca.html"/>
      <url>/posts/621998ca.html</url>
      
        <content type="html"><![CDATA[<p><img src="/img/load.gif" data-original="https://pic3.zhimg.com/v2-f4dcb6e49d978a81b787ff845fcc60c2_720w.jpg?source=172ae18b" alt="https://pic3.zhimg.com/v2-f4dcb6e49d978a81b787ff845fcc60c2_720w.jpg?source=172ae18b"></p><h1 id="Java-架构师之路"><a href="#Java-架构师之路" class="headerlink" title="Java 架构师之路"></a>Java 架构师之路</h1><p>架构师的内功主要包括三部分：<strong>判断力、执行力、创新力</strong>，简单解释如下：</p><ol><li>判断力：能够准确判断系统的复杂度在哪里，就像武侠高手一样，能够准确地看出对手的破绽和弱点。</li><li>执行力：能够使用合适的方案去解决复杂度问题，就像武侠高手一样，能选择合适的招式或者方法打败对手。</li><li>创新里：能够创造新的解决方案解决复杂度问题，就像武侠世界里，小一些的创新是创新招式，而武学宗师能够创立新的武学或者心法，例如张三丰创立太极拳一样。</li></ol><p>因此，要成为一个优秀的架构师，就需要不断提升自己这几方面的内功，而者三方面的能力来源于 <strong>经验、视野、思考</strong>。</p><ol><li>经验：设计的系统越多，系统越复杂，架构师的内功也就越强，不管是成功的架构，还是失败的架构，不管是踩坑的经验，还是填坑的经验，都将成为架构师内功的一部分。</li><li>视野：掌握的知识和技能越多、越深，架构师的内功也就越强，他山之石可以攻玉，站在巨人的肩膀上会看的更高更远。</li><li>思考：经验和视野都是外部输入，类似于我们吃的食物，但光吃还不行，还要消化，将其变为我们自己的营养，这就是思考的作用，思考能将部分经验和视野中的模式、判断、选择、技巧等提炼出来为我们所用，思考也能促使我们产生新的创意和灵感。</li></ol><p>结合上面的分析，从程序员到架构师的成长之路，总的指导原则是：积累经验、拓展视野、深度思考。按照这个总的原则为指导，接下来我们看看从程序员到架构师的成长过程中，具体如何实践。</p><p>程序员到架构师的技术成长之路分为几个典型的阶段：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">工程师 - 高级工程师 - 技术专家 - 初级架构师 - 中级架构师 - 高级架构师</span><br></pre></td></tr></table></figure><p>虽然总的指导原则是一样的，但具体的实践方法有很大差别，如果在正确的姐u的那采取了错误的方法，可能会出现事倍功半的问题。</p><hr><h1 id="第一步：工程师"><a href="#第一步：工程师" class="headerlink" title="第一步：工程师"></a>第一步：工程师</h1><h2 id="1-阶段描述"><a href="#1-阶段描述" class="headerlink" title="1.阶段描述"></a>1.阶段描述</h2><p>成为一个合格的工程师需要 1~3 年时间，其典型特征是 ”在别人的指导下完成开发“ ，这里的 ”别人“ 主要是 ”高级工程师“ 或者 ”技术专家“ ，通常情况下，高级工程师或者技术专家负责需求分析和过程讨论、方案设计，工程师则负责编码实现，高级工程师或者技术专家会指导工程师进行编码实现。</p><h2 id="2-成长指导"><a href="#2-成长指导" class="headerlink" title="2.成长指导"></a>2.成长指导</h2><p>工程师阶段是最原始的 <strong>基础技能积累阶段</strong> ，主要积累基础知识，包括编程语言、编程工具、各类系统的基本使用。以 Java 后端工程师为例，工程师阶段需要积累的经验和技能有：</p><ul><li>Java 的语法、基本数据结构的使用。</li><li>Eclipse、IDEA、Maven、Linux 命令行等各种工具。</li><li>数据库 CRUD 操作、缓存的基本使用等。</li><li>业务系统的基本流程。</li></ul><p>工程师阶段最好的学习方法就是，找经典的书籍系统地学习，而不是遇到一个问题到网上搜搜然后就解决了事。以 Java 为例，《Java 编程思想》《Java 核心技术》《TCP&#x2F;IP 协议》这类大部头，一定要完整地看一遍，即使里面很多内容当前工作暂时用不上。</p><hr><h1 id="第二步：高级工程师"><a href="#第二步：高级工程师" class="headerlink" title="第二步：高级工程师"></a>第二步：高级工程师</h1><h2 id="1-阶段描述-1"><a href="#1-阶段描述-1" class="headerlink" title="1.阶段描述"></a>1.阶段描述</h2><p>成为高级工程师需要 2~5 年，其典型特征是 <strong>独立完成开发</strong> ，包括需求分析、方案设计、编码实现，其中需求分析和方案设计已经包含了 <strong>判断</strong> 和 <strong>选择</strong>，只是范围相对于来说小一些，更多是在已有架构下进行设计。以 Java 后端工程师为例，高级工程师需要完成的工作包括：</p><ul><li>MySQL 数据库表如何设计，是设计成两个表还是三个表？</li><li>是否要使用缓存，缓存的 Key 和 Value 如何设计，缓存的更新策略是什么？</li><li>产品提出的需求是否合理？是否有更好的方式来满足？</li></ul><h2 id="2-成长指导-1"><a href="#2-成长指导-1" class="headerlink" title="2.成长指导"></a>2.成长指导</h2><p>从普通工程师成长为高级工程师，主要需要 <strong>积累方案设计经验</strong> ，简单来说就是业务当前用到德相关技术德设计经验。以 Java 后端工程师为例，包括：表设计经验、缓存设计经验、业务流程设计经验、接口设计经验等。当接到一个业务需求德时候，高级工程师柠檬狗组合这些设计经验，最终完成业务需求。</p><p>高级工程师阶段相比于工程师阶段，有两个典型的差异：</p><ul><li>深度：如果说工程师是要求知道 How ，那高级工程师就要求知道 Why 了。例如 Java 的各种数据结构的实现原理，因为只有深入掌握了这些实现原理，才能对其优缺点和使用场景有深刻理解，这样在做具体方案设计的时候才能够选择合适的数据结构。</li><li>理论：理论就是前人总结出来的成熟的设计经验，例如数据库设计的  3 个范式、面向对象的设计模式、SOLID 设计原则、缓存设计理论 (缓存穿透、缓存雪崩、缓存热点) 等。</li></ul><p>针对技术深度，建议去进行系统地学习，包括看书和研究源码。例如研究 Java 虚拟机可以看《深入理解 Java 虚拟机》、研究 MySQL 可以看《MySQL 技术内幕：InnoDB 存储引擎》、研究 Memcache 可以去看其源码。</p><p>针对设计理论，由于涉及的点很多，没有一本书能够涵盖这么多的设计点，因此更多的是依靠自己去网上搜索资料学习、那么我们怎么知道哪些地方有设计理论呢？简单来说，就是假设每个环节都有设计理论，然后带着这种假设去搜索验证看看是否真的有很成熟的设计理念。</p><hr><h1 id="第三步：技术专家"><a href="#第三步：技术专家" class="headerlink" title="第三步：技术专家"></a>第三步：技术专家</h1><h2 id="1-阶段描述-2"><a href="#1-阶段描述-2" class="headerlink" title="1.阶段描述"></a>1.阶段描述</h2><p>成长为技术专家需要 4~8  年时间，其典型的特征是 ”某个领域的专家“ ，通俗地讲，只要是这个领域的问题，技术专家都可以解决。例如 Java 开发专家、PHP 开发专家、Android 开发专家、iOS 开发专家、前端开发专家等等。通常情况下，”领域“ 的范围不能太小，例如我们可以说 ”Java 开发专家“，但不会说 ”Java 多线程专家“ 或 ”Java JDBC 专家“ 。</p><p>技术专家与高级工程师的一个典型区别就是，高级工程师主要是在已有的架构框架下完成设计，而技术专家会根据需要修改、扩展、优化架构。例如，同样是 Java 开发，高级工程师关注的是如何优化 MySQL 的查询性能，而技术专家就会考虑引入 Elasticsearch 来完成搜索。</p><h2 id="2-成长指导-2"><a href="#2-成长指导-2" class="headerlink" title="2.成长指导"></a>2.成长指导</h2><p>从高级工程师成长为技术专家，主要需要 <strong>拓展技术宽度</strong> ，因为一个 <strong>领域</strong> 必然会涉及众多的技术面。以 Java 后端开发为例，要成为一个 Java 开发专家，需要掌握 Java 多线程、JDBC 、Java 虚拟机、面向对象、设计模式、Netty、Elasrucsearch、Memcache、Redis、MySQL 等众多技术。常见的拓展技术宽度的方法有：</p><ul><li>学习业界成熟的开源方案，例如，Java 开发可以去学习 Redis、Memcache、Netty 等，Android 开发可以去研究 Retrofit、Fresco、OkHttp 等。</li><li>研究业界的经验分享，例如 BAT、FANG 等大公司的经验，可以通过参加技术大会等方式去近距离了解。</li></ul><p>需要注意的是，拓展技术宽度并不意味着仅仅只是知道一个技术名词，而是要深入去理解每个技术的原理、优缺点、应用场景，否则就会成为传说中的“PPT 技术专家”。例如，以 Java 开发为例，知道 Netty 是个高性能网络库是远远不够的，还需要学习 Netty 的原理，以及具体如何使用 Netty 来开发高性能系统。</p><hr><h1 id="第四步：初级架构师"><a href="#第四步：初级架构师" class="headerlink" title="第四步：初级架构师"></a>第四步：初级架构师</h1><h2 id="1-阶段描述-3"><a href="#1-阶段描述-3" class="headerlink" title="1.阶段描述"></a>1.阶段描述</h2><p>成长为初级架构师需要 5~10 年，其典型特征就是能够 <strong>独立完成一个系统的设计</strong> ，可以是从 0 到 1 设计一个新系统，也可以是将架构从 1.0 重构到 2.0 。初级架构师负责的系统复杂度相对来说不高，例如后台管理系统、某个业务下的子系统、100 万 PV 量级的网站等。</p><p>初级架构师和技术专家的典型区别是：架构师是基于完善的架构设计方法论的指导来进行架构设计，而技术专家更多的是基于经验进行架构设计。简单来说，即使是同样一个方案，初级架构师能够清晰地阐述架构设计的理由和原因，而技术专家可能就是因为自己曾经这样做过，或者看别人这样做过而选择设计方案。</p><p>但在实践工作中，技术专家和初级架构师的区别并不是很明显，事实上很多技术专家其实就承担了初级架构师的角色，因为在系统复杂度相对不高的情况下，架构设计的难度不高，用不同的备选方案最终都能够较好的完成系统设计。例如，设计一个日 PV 100 万的网站，MySQL + Memcache + Spring Boot 可以很好地完成，MongoDB + Redis + Nginx + php-fpm 也可以很好地完成，备选方案设计和选择并不太难，更多的是看团队熟悉哪个技术。</p><h2 id="2-成长指导-3"><a href="#2-成长指导-3" class="headerlink" title="2.成长指导"></a>2.成长指导</h2><p>从技术专家成长为初级架构师，最主要的是形成自己的 <strong>架构设计方法论</strong> ，架构设计专栏其实就是为了讲述完整的架构设计方法论，包括架构设计目的、架构设计原则、架构设计步骤、架构设计模式等，类似的架构设计方法论还有 《恰如其分的软件架构：风险驱动的设计方法》和《领域驱动设计》等。</p><p>要形成自己的架构设计方法论，主要手段有：</p><ul><li>系统学习架构设计方法论，包括订阅专栏或者阅读书籍等。</li><li>深入研究成熟开源系统的架构设计，这个手段在技术专家阶段也会用到，但关注点不一样，同样是研究开源系统，技术专家阶段聚焦于如何更好地应用开源项目；初级架构师阶段聚焦于学习其架构设计原理和理想，例如 Kafaka 的文档中就有关于消息队列架构设计的分析和取舍。</li><li>结合架构设计方法论，分析和总结自己团队甚至是公司的各种系统的架构设计优缺点，尝试思考架构重构方案。如果在这个基础上真的能够推动架构重构，那就更好了，既能够实践自己的架构设计方法论，同时积累经验，有能够展现自己的技术实力，拿到结果。</li></ul><hr><h1 id="第五步：中级架构师"><a href="#第五步：中级架构师" class="headerlink" title="第五步：中级架构师"></a>第五步：中级架构师</h1><h2 id="1-阶段描述-4"><a href="#1-阶段描述-4" class="headerlink" title="1.阶段描述"></a>1.阶段描述</h2><p>成长为中级架构师需要 8 年以上时间，其典型特征是 <strong>能够完成复杂系统的架构设计</strong> ，包含高性能、高可用、可扩展、海量存储等复杂系统，例如设计一个和 kafaka 性能匹敌的消息队列系统，将业务改造为异地多活，设计一个总共 100 人参与开发的业务系统等，</p><p>中级架构师与初级架构师的典型区别在于系统的复杂度不同，中级架构师面对的系统复杂度要高于初级架构师。以开源项目为例，初级架构师可能引入某个开源项目就可以完成架构设计，而中级架构师可能发现其实没有哪个开源项目是合适的，而需要自己开发一个全新的项目，事实上很多开源项目就是这样诞生出来的，</p><h2 id="2-成长指导-4"><a href="#2-成长指导-4" class="headerlink" title="2.成长指导"></a>2.成长指导</h2><p>从初级架构师成长为中级架构师，最关键的是 <strong>技术深度和技术理论的积累</strong> ，例如：</p><ul><li>技术理论：CAP 、BASE 是异地多活的设计理论基础，Paxos 是分布式一致性的基础算法、2PC、3PC是分布式事务的基础算法等。</li><li>技术深度：Kafaka 用磁盘存储还能够做到高效是因为磁盘顺序写；Disruptor 高性能是结合 CPU 预读取机制、缓存行、无锁设计等基础技术；Storm 的高效异或确认机制；Flink 的分布式快照算法等。</li></ul><p>疑问：</p><p>这些技术理论和技术深度的事情不应该是高级工程师阶段或者技术专家阶段就应该积累的么？为何到了中级架构师阶段反而是成长的关键呢？</p><p>主要原因在于高级工程师或者技术专家阶段即使去学习这些技术，实际上也比较难理解透彻，更加难以有机会去应用，更多的时候只是为了这个技术点而已；而到了中级架构师阶段，面对高度复杂的系统，很多时候就是几个关键技术细节决定整个架构设计的成败，或者某个设计方案理论上就是不可行的，如果不深刻理解理论和相关的关键技术点，很难设计优秀的架构。</p><hr><h1 id="第六步：高级架构师"><a href="#第六步：高级架构师" class="headerlink" title="第六步：高级架构师"></a>第六步：高级架构师</h1><h2 id="1-阶段描述-5"><a href="#1-阶段描述-5" class="headerlink" title="1.阶段描述"></a>1.阶段描述</h2><p>成长为高级架构师需要 10 年以上的时间，其典型特征是 <strong>创造新的架构模式</strong> ，例如：</p><ul><li>谷歌大数据论文，创造了分布式存储架构、分布式计算 MapReduce 架构、列式存储架构，开创了大数据时代。</li><li>在有 MapReduce 分布式u计算架构背景下，Storm 有创造了流式计算架构。</li><li>在虚拟机很成熟的背景下，Docker 创造了容器化的技术潮流。</li></ul><p>高级架构师与中级架构师相比，典型区别在于 <strong>创造性</strong> ，高级架构师能够创造新的架构模式，开创新的技术潮流。</p><h2 id="2-成长指导-5"><a href="#2-成长指导-5" class="headerlink" title="2.成长指导"></a>2.成长指导</h2><p>参考技术界：</p><ul><li>足够复杂的业务场景：例如谷歌的大数据、阿里的双十一、Facebook 的海量用户等，业务场景越复杂，给技术带来的挑战更大，更有可能产生创造性的技术突破。</li><li>足够强大的技术团队：绝大部分创造性的架构都来源于公司，或者知名的研究机构；灭有技术实力支撑，想突破也是心有余而力不足。</li><li>不满足于现状的态度：例如虚拟机很成熟但是资源占用太多，所以发明 Docker；MapReduce 难以做到实时运算，所以创造 Storm 流式运算。</li><li>尊重技术价值的文化：创造性的东西往往需要投入大量的人力和时间，而且刚开始一般都不会很成熟，如果完全结果导向、KPI 导向，创新技术很可能在萌芽阶段就被否定。</li></ul><hr><h1 id="学习线路图"><a href="#学习线路图" class="headerlink" title="学习线路图"></a>学习线路图</h1><h2 id="（一）微服务"><a href="#（一）微服务" class="headerlink" title="（一）微服务"></a>（一）微服务</h2><p><img src="/img/load.gif" data-original="/../../../images/programmer/Java/a/v1.png" alt="微服务架构"></p><h2 id="（二）分布式"><a href="#（二）分布式" class="headerlink" title="（二）分布式"></a>（二）分布式</h2><p><img src="/img/load.gif" data-original="/../../../images/programmer/Java/a/v2png.png" alt="分布式"></p><h2 id="（三）源码分析"><a href="#（三）源码分析" class="headerlink" title="（三）源码分析"></a>（三）源码分析</h2><p><img src="/img/load.gif" data-original="/../../../images/programmer/Java/a/v3.png" alt="源码分析"></p><h2 id="（四）多线程并发"><a href="#（四）多线程并发" class="headerlink" title="（四）多线程并发"></a>（四）多线程并发</h2><p><img src="/img/load.gif" data-original="/../../../images/programmer/Java/a/v4.png" alt="多线程并发"></p><h2 id="（五）工程化"><a href="#（五）工程化" class="headerlink" title="（五）工程化"></a>（五）工程化</h2><p><img src="/img/load.gif" data-original="/../../../images/programmer/Java/a/v5.png" alt="工程化"></p><h2 id="（六）性能优化"><a href="#（六）性能优化" class="headerlink" title="（六）性能优化"></a>（六）性能优化</h2><p><img src="/img/load.gif" data-original="/../../../images/programmer/Java/a/v6.png" alt="性能优化"></p><h2 id="（七）电商项目"><a href="#（七）电商项目" class="headerlink" title="（七）电商项目"></a>（七）电商项目</h2><p><img src="/img/load.gif" data-original="/../../../images/programmer/Java/a/v7.png" alt="电商项目"></p>]]></content>
      
      
      <categories>
          
          <category> 程序员 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序员 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL使用教程</title>
      <link href="/posts/5d06cb2d.html"/>
      <url>/posts/5d06cb2d.html</url>
      
        <content type="html"><![CDATA[<img src="/img/load.gif" data-original="https://roaringelephant.org/wp-content/uploads/sites/5/2016/03/SQL.jpg" alt="SQL" height="300" /><h1 id="SQL-教程"><a href="#SQL-教程" class="headerlink" title="SQL 教程"></a>SQL 教程</h1><p><strong>SQL</strong> ( <code>Structured Query Language</code> ，结构化查询语言) 是一种用于管理和操作关系型数据库的标准化编程语言。</p><p>在线测试工具：<a href="https://www.jyshare.com/front-end/7768/">https://www.jyshare.com/front-end/7768/</a></p><hr><h2 id="SQL-简介"><a href="#SQL-简介" class="headerlink" title="SQL 简介"></a>SQL 简介</h2><p><strong>SQL</strong> （ <code>Structured Query Language</code> ，结构化查询语言）是用于管理关系数据库管理系统 （<strong>RDBMS</strong>）。</p><p>SQL 通过一系列的语句和命令来执行数据定义、数据查询、数据操作和数据控制等功能，包括数据插入、查询、更新和删除，数据库模式创建和修改，以及数据访问控制。</p><h3 id="SQL-是什么？"><a href="#SQL-是什么？" class="headerlink" title="SQL 是什么？"></a>SQL 是什么？</h3><ul><li>SQL 值结构化查询语言，全称是 <code>Structured Query Language</code></li><li>SQL 让你可以访问和处理数据库，包括数据插入、查询、更新和删除</li><li>SQL 语言采用英语关键词，使其易读易写</li><li>SQL 有国际标准化组织 (ISO) 和美国国家标准协会 (ANSI) 标准化</li><li>SQL 提供了丰富的操作数据的功能，从简单的查询到复杂的数据库管理操作</li></ul><h3 id="SQL-能做什么？"><a href="#SQL-能做什么？" class="headerlink" title="SQL 能做什么？"></a>SQL 能做什么？</h3><ul><li>SQL 面向数据库执行查询</li><li>SQL 可以从数据库取回数据</li><li>SQL 可在数据库中插入新的记录</li><li>SQL 可更新数据库中的数据</li><li>SQL 可创建新数据库</li><li>SQL 可在数据库中创建新表</li><li>SQL 可在数据库中创建存储过程</li><li>SQL 可在数据库中创建视图</li><li>SQL 可设置表、存储过程和视图的权限</li></ul><h3 id="SQL-是一种标准-但是-…"><a href="#SQL-是一种标准-但是-…" class="headerlink" title="SQL 是一种标准-但是 …"></a>SQL 是一种标准-但是 …</h3><p>虽然 SQL 是一门 ANSI （American National Standards Institute 美国国家标准化组织）标准的计算机语言，但是任然存在着许多不同版本的 SQL 语言。</p><p>然而，为了与 ANSI 标准相兼容，他们必须以相似的方式共同地来支持一些主要的命令 （比如 SELECT、UPDATE、DELETE、INSERT、WHERE 等等）。</p><blockquote><p>💡   注释：除了 SQL 标准外，大部分 SQL 数据库都拥有它们自己的专有扩展！</p></blockquote><h3 id="在网站中使用-SQL"><a href="#在网站中使用-SQL" class="headerlink" title="在网站中使用 SQL"></a>在网站中使用 SQL</h3><p>要创建一个显示数据库中数据的网站：</p><ul><li>RDBMS 数据库程序（比如 MS Access、SQL Server、MySQL）</li><li>使用服务器端脚本语言，比如 PHP 或 ASP</li><li>使用 SQL 来获取您想要的数据</li><li>使用 HTML &#x2F; CSS</li></ul><h3 id="RDBMS"><a href="#RDBMS" class="headerlink" title="RDBMS"></a>RDBMS</h3><p>RDBMS 指关系型数据库管理系统，全称 <code>Relational Database Management System</code>。</p><p>RDBMS 是 SQL 的基础，同样也是所有现代数据库系统的基础，比如 MS SQL Server、IBM DB2、Oracle、MySQL 以及 Microsoft Access。</p><p>RDBMS 中的数据存储在被称为表的数据库对象中。</p><p>表是相关的数据项的集合，它由列和行组成。</p><h3 id="SQL-发展历史"><a href="#SQL-发展历史" class="headerlink" title="SQL 发展历史"></a>SQL 发展历史</h3><p>以下是 SQL 发展历史的关键节点：</p><h4 id="1970s-起源与早期发展"><a href="#1970s-起源与早期发展" class="headerlink" title="1970s: 起源与早期发展"></a>1970s: 起源与早期发展</h4><ol><li><strong>1970年</strong>：埃德加·科德（Edgar F. Codd）发表了《A Relational Model of Data for Large Shared Data Banks》论文，提出了关系数据库的概念，为 SQL 的发展奠定了理论基础。</li><li><strong>1973年-1974年</strong>：IBM 的研究人员 Donald D. Chamberlin 和 Raymond F. Boyce 在科德的理论基础上开发了一种名为 SEQUEL（Structured English Query Language）的语言，用于操作和管理 IBM 的 System R 关系数据库。</li><li><strong>1976年</strong>：SEQUEL 更名为 SQL（Structured Query Language）。</li></ol><h4 id="1980s-标准化与商业化"><a href="#1980s-标准化与商业化" class="headerlink" title="1980s: 标准化与商业化"></a>1980s: 标准化与商业化</h4><ol><li><strong>1981年</strong>：IBM 推出了商用关系数据库系统 SQL&#x2F;DS（Database System）和 DB2（Database 2）。</li><li><strong>1986年</strong>：美国国家标准协会（ANSI）发布了第一个 SQL 标准 ANSI SQL-86（SQL-87）。</li><li><strong>1987年</strong>：国际标准化组织（ISO）也采纳了 ANSI SQL-86 作为国际标准。</li></ol><h4 id="1990s-扩展与改进"><a href="#1990s-扩展与改进" class="headerlink" title="1990s: 扩展与改进"></a>1990s: 扩展与改进</h4><ol><li><strong>1992年</strong>：发布了 SQL-92（SQL2）标准，显著扩展了 SQL 语言的功能，包括对新数据类型、嵌套查询和连接的支持。</li><li><strong>1999年</strong>：发布了 SQL:1999（SQL3）标准，引入了对象关系数据库（ORDBMS）特性、递归查询、触发器和用户定义函数。</li></ol><h4 id="2000s-持续演进与新特性"><a href="#2000s-持续演进与新特性" class="headerlink" title="2000s: 持续演进与新特性"></a>2000s: 持续演进与新特性</h4><ol><li><strong>2003年</strong>：发布了 SQL:2003 标准，引入了 XML 相关特性和窗口函数。</li><li><strong>2006年</strong>：发布了 SQL:2006 标准，主要增强了对 XML 的支持。</li><li><strong>2008年</strong>：发布了 SQL:2008 标准，进一步改进了语法和性能优化。</li></ol><h4 id="2010s-新功能与大数据支持"><a href="#2010s-新功能与大数据支持" class="headerlink" title="2010s: 新功能与大数据支持"></a>2010s: 新功能与大数据支持</h4><ol><li><strong>2011年</strong>：发布了 SQL:2011 标准，增加了对时间数据类型和时间旅行（temporal data）的支持。</li><li><strong>2016年</strong>：发布了 SQL:2016 标准，引入了 JSON 数据类型和相关操作函数，适应了 NoSQL 数据库和大数据处理需求。</li></ol><h4 id="2020s-现代化与标准更新"><a href="#2020s-现代化与标准更新" class="headerlink" title="2020s: 现代化与标准更新"></a>2020s: 现代化与标准更新</h4><ol><li><strong>2023年</strong>：最新的 SQL 标准持续改进，增加了对更现代化的数据库需求和特性的支持。</li></ol><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>SQL 从一种基于关系模型的查询语言发展成为现代数据库管理的核心语言，其标准在不断演进和扩展。各大数据库管理系统（如 MySQL、PostgreSQL、SQLite、SQL Server、Oracle 等）在遵循 SQL 标准的基础上，加入了自身的扩展和优化，使 SQL 成为数据操作和管理的强大工具。SQL 的发展不仅体现了技术的进步，也反映了数据管理需求的变化和增长。</p><hr><h2 id="SQL-语法"><a href="#SQL-语法" class="headerlink" title="SQL 语法"></a>SQL 语法</h2><p><strong>SQL</strong>（Structured Query Language）是一种用于管理和操作关系数据库的标准语言，包括数据查询、数据插入、数据更新、数据删除、数据库结构创建和修改等功能</p><p><img src="/img/load.gif" data-original="https://www.runoob.com/wp-content/uploads/2013/09/SQL.png" alt=" https://www.runoob.com/wp-content/uploads/2013/09/SQL.png"></p><h3 id="数据库表"><a href="#数据库表" class="headerlink" title="数据库表"></a>数据库表</h3><p>一个数据库通常包含一个或多个表，每个表有一个名字标识（例如:”<strong>Websites</strong>“），表包含带有数据的记录（行）。</p><p>在本教程中，我们在 MySQL 的 RUNOOB 数据库中创建了 Websites 表，用于存储网站记录。</p><p>我们可以通过以下命令查看 “Websites” 表的数据：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> use RUNOOB;</span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> names utf8;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Websites;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------+---------------------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name         <span class="operator">|</span> url                       <span class="operator">|</span> alexa <span class="operator">|</span> country <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------+---------------------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>  <span class="operator">|</span> Google       <span class="operator">|</span> https:<span class="operator">/</span><span class="operator">/</span>www.google.cm<span class="operator">/</span>    <span class="operator">|</span> <span class="number">1</span>     <span class="operator">|</span> USA     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>  <span class="operator">|</span> 淘宝          <span class="operator">|</span> https:<span class="operator">/</span><span class="operator">/</span>www.taobao.com<span class="operator">/</span>   <span class="operator">|</span> <span class="number">13</span>    <span class="operator">|</span> CN      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>  <span class="operator">|</span> 菜鸟教程      <span class="operator">|</span> http:<span class="operator">/</span><span class="operator">/</span>www.runoob.com<span class="operator">/</span>    <span class="operator">|</span> <span class="number">4689</span>  <span class="operator">|</span> CN      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span>  <span class="operator">|</span> 微博          <span class="operator">|</span> http:<span class="operator">/</span><span class="operator">/</span>weibo.com<span class="operator">/</span>         <span class="operator">|</span> <span class="number">20</span>    <span class="operator">|</span> CN      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5</span>  <span class="operator">|</span> Facebook     <span class="operator">|</span> https:<span class="operator">/</span><span class="operator">/</span>www.facebook.com<span class="operator">/</span> <span class="operator">|</span> <span class="number">3</span>     <span class="operator">|</span> USA     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------+---------------------------+-------+---------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>解析</strong></p><ul><li><strong>use RUNOOB;</strong> 命令用于选择数据库。</li><li><strong>set names utf8;</strong> 命令用于设置使用的字符集。</li><li><strong>SELECT * FROM Websites;</strong> 读取数据表的信息。</li><li>上面的表包含五条记录（每一条对应一个网站信息）和5个列（id、name、url、alexa 和country）。</li></ul><h3 id="SQL-语句"><a href="#SQL-语句" class="headerlink" title="SQL 语句"></a>SQL 语句</h3><p>你需要在数据库上执行的大部分工作都由 SQL 语句完成。</p><p>下面的 SQL 语句从 <strong>Websites</strong> 表中选取所有记录：</p><p><strong>实例</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Websites;</span><br></pre></td></tr></table></figure><h3 id="请记住-…"><a href="#请记住-…" class="headerlink" title="请记住 …"></a>请记住 …</h3><ul><li>SQL 对大小写不敏感：<strong>SELECT</strong> 和 <strong>select</strong> 是相同的</li></ul><h3 id="SQL-语句后面加分号"><a href="#SQL-语句后面加分号" class="headerlink" title="SQL 语句后面加分号?"></a>SQL 语句后面加分号?</h3><p>某些数据库系统要求在每条 SQL 语句的末端使用分号。</p><p>分号是在数据库系统中分隔每条 SQL 语句的标准方法，这样就可以在对服务器的相同请求中执行一条以上的 SQL 语句。</p><h3 id="一些重要的-SQL-命令"><a href="#一些重要的-SQL-命令" class="headerlink" title="一些重要的 SQL 命令"></a>一些重要的 SQL 命令</h3><ul><li><strong>SELECT</strong>  - 从数据库中提取数据</li><li><strong>UPDATE</strong> - 更新数据库中的数据</li><li><strong>DELETE</strong> - 从数据库中删除数据</li><li><strong>INSERT INTO</strong> - 向数据库中插入新数据</li><li><strong>CREATE DATABASE</strong> - 创建新数据库</li><li><strong>ALTER DATABASE</strong> - 修改数据库</li><li><strong>DROP TABLE</strong> - 删除表</li><li><strong>CREATE INDEX</strong> - 创建索引 （搜索值）</li><li><strong>DROP INDEX</strong> - 删除索引</li></ul><p>以下是一些常用的 SQL 语句和语法：</p><p><code>SELECT</code>：用于从数据库中查询数据</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> column_name [<span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>]</span><br></pre></td></tr></table></figure><ul><li><code>column_name(s)</code> ：要查询的列</li><li><code>table_name</code> ：要查询的表</li><li><code>condition</code> ： 查询调价 （可选）</li><li><code>ORDER BY</code> ：排序方式，<strong>ASC</strong> 表示升序，<strong>DESC</strong> 表示降序</li></ul><p><code>INSERT INTO</code> ：用于向数据库插入新数据</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name (column1, column2, ...)</span><br><span class="line"><span class="keyword">VALUES</span> (value1, value2, ...)</span><br></pre></td></tr></table></figure><ul><li><code>table_name</code> ：要插入数据的表</li><li><code>(column1, column2, ...)</code> ：要插入数据的列</li><li><code>(value1, value2, ...)</code> ：对应列的值</li></ul><p><code>UPDATE</code> ：用于更新数据库表中的现有数据</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> table_name</span><br><span class="line"><span class="keyword">SET</span> column1 <span class="operator">=</span> value1, column2 <span class="operator">=</span> value2, ...</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span></span><br></pre></td></tr></table></figure><ul><li><code>table_name</code> ：要更新数据的表</li><li><code>column1 = value1, column2 = value2, ...</code> ：要更新的列及其新值</li><li><code>condition</code> ：更新条件</li></ul><p><code>DELETE</code> ：用于从数据库表中删除数据</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span></span><br></pre></td></tr></table></figure><ul><li><code>table_name</code> ：要删除数据的表</li><li><code>condition</code> ：删除条件</li></ul><p><code>CREATE TABLE</code> ：用于创建新的数据库表</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name (</span><br><span class="line">    column1 data_type <span class="keyword">constraint</span>,</span><br><span class="line">    column2 data_type <span class="keyword">constraint</span>,</span><br><span class="line">    ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li><code>table_name</code> ：要创建的表明</li><li><code>column1,column2, ...</code> ：表的列</li><li><code>data_type</code> ：列的数据类型 （如 <strong>INT</strong>、<strong>VARCHAR</strong> 等）</li><li><code>constraint</code> ：列的约束 （如 <strong>PRIMARY KEY</strong> 、<strong>NOT NULL</strong> 等）</li></ul><p><code>ALETER TABLE</code> ：用于修改现有数据库表的结构</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name</span><br><span class="line"><span class="keyword">ADD</span> column_name data_type</span><br></pre></td></tr></table></figure><ul><li><code>table_name</code> ：要修改的表</li><li><code>column_name</code> ：要添加的列</li><li><code>data_type</code> ：列的数据类型</li></ul><p>或：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">COLUMN</span> column_name</span><br></pre></td></tr></table></figure><ul><li><code>column_name</code>：要删除的列</li></ul><p><code>DROP TABLE</code> ：用于删除数据库表</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> table_name</span><br></pre></td></tr></table></figure><ul><li><code>table_name</code> ：要删除的表</li></ul><p><code>CREATE INDEX</code> ：用于创建索引，以加快查询速度</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX index_name</span><br><span class="line"><span class="keyword">ON</span> table_name (column_name)</span><br></pre></td></tr></table></figure><ul><li><code>index_name</code> ：索引的名称</li><li><code>column_name</code> ：要索引的列</li></ul><p><code>DROP INDEX</code> ：用于删除索引</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> INDEX index_name</span><br><span class="line"><span class="keyword">ON</span> table_name</span><br></pre></td></tr></table></figure><ul><li><code>index_name</code> ：要删除的索引名称</li><li><code>table_name</code> ：索引所在的表</li></ul><p><code>WHERE</code> ：用于指定筛选条件。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span></span><br></pre></td></tr></table></figure><ul><li><code>condition</code> ：筛选条件。</li></ul><p><code>ORDER BY</code> ：用于对结果集进行排序</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> column_name [<span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>]</span><br></pre></td></tr></table></figure><ul><li><code>column_name</code> ：用于排序的列</li><li><code>ASC</code> ：升序（默认）</li><li><code>DESC</code> ：降序</li></ul><p><code>GROUP BY</code> ：用于将结果集按一列或多列进行分组</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s), aggregate_function(column_name)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> column_name(s)</span><br></pre></td></tr></table></figure><ul><li><code>aggregate_function(column_name)</code> ：聚合函数 （如 <strong>COUNT</strong> 、<strong>SUM</strong> 、<strong>AVG</strong> 等）</li></ul><p><code>HAVING</code> ：用于对分组后的结果集进行筛选</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s), aggregate_function(column_name)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> column_name(s)</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">condition</span></span><br></pre></td></tr></table></figure><ul><li><code>condition</code> ：筛选条件</li></ul><p><code>JOIN</code> ：用于将两个或多个表的记录结合起来</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table_name1</span><br><span class="line"><span class="keyword">JOIN</span> table_name2</span><br><span class="line"><span class="keyword">ON</span> table_name1.column_name <span class="operator">=</span> table_name2.column_name</span><br></pre></td></tr></table></figure><ul><li><code>JOIN</code>: 可以是 INNER JOIN、LEFT JOIN、RIGHT JOIN 或 FULL JOIN。</li></ul><p><code>DISTINCT</code> ：用于返回唯一不同的值。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br></pre></td></tr></table></figure><ul><li><code>column_name(s)</code>：要查询的列。</li></ul><hr><h2 id="SQL-SELECT"><a href="#SQL-SELECT" class="headerlink" title="SQL SELECT"></a>SQL SELECT</h2><p><strong>SELECT</strong>  语句用于从数据库中选取数据。</p><p>结果被存储在一个结果表中，称为结果集。</p><h3 id="SQL-SELECT-语法"><a href="#SQL-SELECT-语法" class="headerlink" title="SQL SELECT 语法"></a>SQL SELECT 语法</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure><p>与</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>column1, column2, ...</code> ：要选择的字段名称，可以为多个字段。如果不指定字段名称，则会选择所有字段。</li><li><code>table_name</code> ：要查询的表名称。</li><li><code>*</code>  ：通配符，表示选择表中的所有列。</li></ul><h3 id="演示数据库"><a href="#演示数据库" class="headerlink" title="演示数据库"></a>演示数据库</h3><p>下面是选自 “<strong>Websites</strong>“ 表的数据：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">----+--------------+---------------------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name         <span class="operator">|</span> url                       <span class="operator">|</span> alexa <span class="operator">|</span> country <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------+---------------------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>  <span class="operator">|</span> Google       <span class="operator">|</span> https:<span class="operator">/</span><span class="operator">/</span>www.google.cm<span class="operator">/</span>    <span class="operator">|</span> <span class="number">1</span>     <span class="operator">|</span> USA     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>  <span class="operator">|</span> 淘宝          <span class="operator">|</span> https:<span class="operator">/</span><span class="operator">/</span>www.taobao.com<span class="operator">/</span>   <span class="operator">|</span> <span class="number">13</span>    <span class="operator">|</span> CN      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>  <span class="operator">|</span> 菜鸟教程      <span class="operator">|</span> http:<span class="operator">/</span><span class="operator">/</span>www.runoob.com<span class="operator">/</span>    <span class="operator">|</span> <span class="number">4689</span>  <span class="operator">|</span> CN      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span>  <span class="operator">|</span> 微博          <span class="operator">|</span> http:<span class="operator">/</span><span class="operator">/</span>weibo.com<span class="operator">/</span>         <span class="operator">|</span> <span class="number">20</span>    <span class="operator">|</span> CN      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5</span>  <span class="operator">|</span> Facebook     <span class="operator">|</span> https:<span class="operator">/</span><span class="operator">/</span>www.facebook.com<span class="operator">/</span> <span class="operator">|</span> <span class="number">3</span>     <span class="operator">|</span> USA     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------+---------------------------+-------+---------+</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="SELECT-Column-实例"><a href="#SELECT-Column-实例" class="headerlink" title="SELECT Column 实例"></a>SELECT Column 实例</h3><p>下面的 SQL 语句从 Websites 表中选取 name 和 country 列：</p><p>实例：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name,country <span class="keyword">FROM</span> Websites;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="/img/load.gif" data-original="https://www.runoob.com/wp-content/uploads/2013/09/98E6B49C-06AF-469B-B907-81C52BBE6BDC.jpg" alt=" https://www.runoob.com/wp-content/uploads/2013/09/98E6B49C-06AF-469B-B907-81C52BBE6BDC.jpg"></p><h3 id="SELECT-实例"><a href="#SELECT-实例" class="headerlink" title="SELECT *  实例"></a>SELECT *  实例</h3><p>下面的 SQL 语句从 Websites 表中选取所有列：</p><p>实例：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Websites;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="/img/load.gif" data-original="https://www.runoob.com/wp-content/uploads/2013/09/DE979628-6FAF-46BD-920F-18F9565ADD78.jpg" alt="https://www.runoob.com/wp-content/uploads/2013/09/DE979628-6FAF-46BD-920F-18F9565ADD78.jpg"></p><hr><h2 id="SQL-SELECT-DISTINCT"><a href="#SQL-SELECT-DISTINCT" class="headerlink" title="SQL SELECT DISTINCT"></a>SQL SELECT DISTINCT</h2><p>SELECT DISTINCT 语句用于返回唯一不同的值。</p><p>在表中，一个列可能包含多个重复值，有时你也许希望仅仅列出不同 （<strong>distinct</strong>）的值。</p><p>DISTINCT 关键词用于返回唯一不同的值。</p><h3 id="SQL-SELECT-DISTINCT-语法"><a href="#SQL-SELECT-DISTINCT-语法" class="headerlink" title="SQL SELECT DISTINCT 语法"></a>SQL SELECT DISTINCT 语法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT DISTINCT column1, column2, ...</span><br><span class="line">FROM table_name;</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>column1, column2, ...</code> ：要选择的字段名称，可以为多个字段。如果不指定字段名称，则会选择所有字段。</li><li><code>table_name</code> ：要查询的表名称。</li></ul><h3 id="演示数据库-1"><a href="#演示数据库-1" class="headerlink" title="演示数据库"></a>演示数据库</h3><p>下面是选自 “<strong>Websites</strong>“ 表的数据：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">----+--------------+---------------------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name         <span class="operator">|</span> url                       <span class="operator">|</span> alexa <span class="operator">|</span> country <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------+---------------------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>  <span class="operator">|</span> Google       <span class="operator">|</span> https:<span class="operator">/</span><span class="operator">/</span>www.google.cm<span class="operator">/</span>    <span class="operator">|</span> <span class="number">1</span>     <span class="operator">|</span> USA     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>  <span class="operator">|</span> 淘宝          <span class="operator">|</span> https:<span class="operator">/</span><span class="operator">/</span>www.taobao.com<span class="operator">/</span>   <span class="operator">|</span> <span class="number">13</span>    <span class="operator">|</span> CN      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>  <span class="operator">|</span> 菜鸟教程      <span class="operator">|</span> http:<span class="operator">/</span><span class="operator">/</span>www.runoob.com<span class="operator">/</span>    <span class="operator">|</span> <span class="number">4689</span>  <span class="operator">|</span> CN      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span>  <span class="operator">|</span> 微博          <span class="operator">|</span> http:<span class="operator">/</span><span class="operator">/</span>weibo.com<span class="operator">/</span>         <span class="operator">|</span> <span class="number">20</span>    <span class="operator">|</span> CN      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5</span>  <span class="operator">|</span> Facebook     <span class="operator">|</span> https:<span class="operator">/</span><span class="operator">/</span>www.facebook.com<span class="operator">/</span> <span class="operator">|</span> <span class="number">3</span>     <span class="operator">|</span> USA     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------+---------------------------+-------+---------+</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="SELECT-DISTINCT-实例"><a href="#SELECT-DISTINCT-实例" class="headerlink" title="SELECT DISTINCT 实例"></a>SELECT DISTINCT 实例</h3><p>下面的 SQL 语句仅从 Websites 表的 country 列中选取唯一不同的值，也就是去掉 contry 列的重复值：</p><p>实例：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> country <span class="keyword">FROM</span> Websites;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="/img/load.gif" data-original="//www.runoob.com/wp-content/uploads/2013/09/E3012A35-35DF-4BBB-8657-8A312C5AEAB6.jpg" alt="https://www.runoob.com/wp-content/uploads/2013/09/E3012A35-35DF-4BBB-8657-8A312C5AEAB6.jpg"></p><hr><h2 id="SQL-WHERE"><a href="#SQL-WHERE" class="headerlink" title="SQL WHERE"></a>SQL WHERE</h2><p><strong>where</strong> 子句用于过滤记录</p><h3 id="SQL-WHERE-子句"><a href="#SQL-WHERE-子句" class="headerlink" title="SQL WHERE 子句"></a>SQL WHERE 子句</h3><p><strong>WHERE</strong> 子句用于提取那些满足指定条件的记录。</p><h3 id="SQL-WHERE-语法"><a href="#SQL-WHERE-语法" class="headerlink" title="SQL WHERE 语法"></a>SQL WHERE 语法</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>column1, column2, ...</code>：要选择的字段名称，可以为多个字段。如果不指定字段名称，则会选择所有字段。</li><li><code>table_name</code>：要查询的表名称。</li></ul><h3 id="演示数据库-2"><a href="#演示数据库-2" class="headerlink" title="演示数据库"></a>演示数据库</h3><p>下面是选自 “<strong>Websites</strong>“ 表的数据：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">----+--------------+---------------------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name         <span class="operator">|</span> url                       <span class="operator">|</span> alexa <span class="operator">|</span> country <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------+---------------------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>  <span class="operator">|</span> Google       <span class="operator">|</span> https:<span class="operator">/</span><span class="operator">/</span>www.google.cm<span class="operator">/</span>    <span class="operator">|</span> <span class="number">1</span>     <span class="operator">|</span> USA     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>  <span class="operator">|</span> 淘宝          <span class="operator">|</span> https:<span class="operator">/</span><span class="operator">/</span>www.taobao.com<span class="operator">/</span>   <span class="operator">|</span> <span class="number">13</span>    <span class="operator">|</span> CN      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>  <span class="operator">|</span> 菜鸟教程      <span class="operator">|</span> http:<span class="operator">/</span><span class="operator">/</span>www.runoob.com<span class="operator">/</span>    <span class="operator">|</span> <span class="number">4689</span>  <span class="operator">|</span> CN      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span>  <span class="operator">|</span> 微博          <span class="operator">|</span> http:<span class="operator">/</span><span class="operator">/</span>weibo.com<span class="operator">/</span>         <span class="operator">|</span> <span class="number">20</span>    <span class="operator">|</span> CN      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5</span>  <span class="operator">|</span> Facebook     <span class="operator">|</span> https:<span class="operator">/</span><span class="operator">/</span>www.facebook.com<span class="operator">/</span> <span class="operator">|</span> <span class="number">3</span>     <span class="operator">|</span> USA     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------+---------------------------+-------+---------+</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="WHERE-子句实例"><a href="#WHERE-子句实例" class="headerlink" title="WHERE 子句实例"></a>WHERE 子句实例</h3><p>下面的 SQL 语句从 “Websites” 表中选取国家为 “CN” 的所有网站：</p><p>实例：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Websites <span class="keyword">WHERE</span> country<span class="operator">=</span><span class="string">&#x27;CN&#x27;</span>;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="/img/load.gif" data-original="https://www.runoob.com/wp-content/uploads/2013/09/4B7980AC-2566-43F7-843A-256E868B92A4.jpg" alt="https://www.runoob.com/wp-content/uploads/2013/09/4B7980AC-2566-43F7-843A-256E868B92A4.jpg"></p><h3 id="文本字段-vs-数值字段"><a href="#文本字段-vs-数值字段" class="headerlink" title="文本字段 vs. 数值字段"></a>文本字段 vs. 数值字段</h3><p>SQL 使用单引号来环绕文本值 （大部分数据库系统也接受双引号）</p><p>在上个实例中 ‘CN’ 文本字段使用了单引号。</p><p>如果是数值字段，请不要使用引号。</p><p>实例：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Websites <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="/img/load.gif" data-original="https://www.runoob.com/wp-content/uploads/2013/09/639D2956-99CE-44E9-B960-EA14D296820E.jpg" alt="https://www.runoob.com/wp-content/uploads/2013/09/639D2956-99CE-44E9-B960-EA14D296820E.jpg"></p><h3 id="WHERE-子句中的运算符"><a href="#WHERE-子句中的运算符" class="headerlink" title="WHERE 子句中的运算符"></a>WHERE 子句中的运算符</h3><p>下面的运算符可以在 WHERE 子句中使用：</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">&#x3D;</td><td align="left">等于</td></tr><tr><td align="left">&lt;&gt;</td><td align="left">不等于。<strong>注释：</strong>在 SQL 的一些版本中，该操作符可被写成 !&#x3D;</td></tr><tr><td align="left">&gt;</td><td align="left">大于</td></tr><tr><td align="left">&lt;</td><td align="left">小于</td></tr><tr><td align="left">&gt;&#x3D;</td><td align="left">大于等于</td></tr><tr><td align="left">&lt;&#x3D;</td><td align="left">小于等于</td></tr><tr><td align="left">BETWEEN</td><td align="left">在某个范围内</td></tr><tr><td align="left">LIKE</td><td align="left">搜索某种模式</td></tr><tr><td align="left">IN</td><td align="left">指定针对某个列的多个可能值</td></tr></tbody></table><h2 id="SQL-AND-OR"><a href="#SQL-AND-OR" class="headerlink" title="SQL AND &amp; OR"></a>SQL AND &amp; OR</h2><p>AND &amp; OR 运算符用于基于一个以上的条件对记录进行过滤。</p><h3 id="SQL-AND-OR-运算符"><a href="#SQL-AND-OR-运算符" class="headerlink" title="SQL AND &amp; OR 运算符"></a>SQL AND &amp; OR 运算符</h3><p>如果第一个条件和第二个条件都成立，则 AND 运算符显示一条记录。</p><p>如果第一个条件和第二个条件只要有一个成立，则 OR 运算符显示一条记录。</p><h3 id="演示数据库-3"><a href="#演示数据库-3" class="headerlink" title="演示数据库"></a>演示数据库</h3><p>下面是选自 “<strong>Websites</strong>“ 表的数据：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">----+--------------+---------------------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name         <span class="operator">|</span> url                       <span class="operator">|</span> alexa <span class="operator">|</span> country <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------+---------------------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>  <span class="operator">|</span> Google       <span class="operator">|</span> https:<span class="operator">/</span><span class="operator">/</span>www.google.cm<span class="operator">/</span>    <span class="operator">|</span> <span class="number">1</span>     <span class="operator">|</span> USA     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>  <span class="operator">|</span> 淘宝          <span class="operator">|</span> https:<span class="operator">/</span><span class="operator">/</span>www.taobao.com<span class="operator">/</span>   <span class="operator">|</span> <span class="number">13</span>    <span class="operator">|</span> CN      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>  <span class="operator">|</span> 菜鸟教程      <span class="operator">|</span> http:<span class="operator">/</span><span class="operator">/</span>www.runoob.com<span class="operator">/</span>    <span class="operator">|</span> <span class="number">4689</span>  <span class="operator">|</span> CN      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span>  <span class="operator">|</span> 微博          <span class="operator">|</span> http:<span class="operator">/</span><span class="operator">/</span>weibo.com<span class="operator">/</span>         <span class="operator">|</span> <span class="number">20</span>    <span class="operator">|</span> CN      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5</span>  <span class="operator">|</span> Facebook     <span class="operator">|</span> https:<span class="operator">/</span><span class="operator">/</span>www.facebook.com<span class="operator">/</span> <span class="operator">|</span> <span class="number">3</span>     <span class="operator">|</span> USA     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------+---------------------------+-------+---------+</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="AND-运算符实例"><a href="#AND-运算符实例" class="headerlink" title="AND  运算符实例"></a>AND  运算符实例</h3><p>下面的 SQL 语句从 <strong>Websites</strong> 表中选取国家为 CN 且 alexa 排名大于 50 的所有网站：</p><p>实例：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">WHERE</span> country<span class="operator">=</span><span class="string">&#x27;CN&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> alexa <span class="operator">&gt;</span> <span class="number">50</span>;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="/img/load.gif" data-original="https://www.runoob.com/wp-content/uploads/2013/09/and-or1.jpg" alt="https://www.runoob.com/wp-content/uploads/2013/09/and-or1.jpg"></p><h3 id="OR-运算符实例"><a href="#OR-运算符实例" class="headerlink" title="OR 运算符实例"></a>OR 运算符实例</h3><p>下面的 SQL 语句从 Websites 表中选取国家为 USA 或者 CN 的所有客户：</p><p>实例：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">WHERE</span> country<span class="operator">=</span><span class="string">&#x27;USA&#x27;</span></span><br><span class="line"><span class="keyword">OR</span> country<span class="operator">=</span><span class="string">&#x27;CN&#x27;</span>;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="/img/load.gif" data-original="https://www.runoob.com/wp-content/uploads/2013/09/and-or2.jpg" alt="https://www.runoob.com/wp-content/uploads/2013/09/and-or2.jpg"></p><p>结合 AND &amp; OR</p><p>可以把 AND 和 OR 结合起来（使用圆括号来组成复杂的表达式）</p><p>下面的 SQL 语句从 Websites 表中选取 alexa 排名大于 15 且国家为 CN 或 USA 的所有网站：</p><p>实例：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">WHERE</span> alexa <span class="operator">&gt;</span> <span class="number">15</span></span><br><span class="line"><span class="keyword">AND</span> (country <span class="operator">=</span> <span class="string">&#x27;CN&#x27;</span> <span class="keyword">OR</span> country <span class="operator">=</span> <span class="string">&#x27;USA&#x27;</span>);</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="/img/load.gif" data-original="https://www.runoob.com/wp-content/uploads/2013/09/and-or3.jpg" alt="https://www.runoob.com/wp-content/uploads/2013/09/and-or3.jpg"></p><h2 id="SQL-ORDER-BY"><a href="#SQL-ORDER-BY" class="headerlink" title="SQL ORDER BY"></a>SQL ORDER BY</h2><p>ORDER BY 关键字用于对结果集进行排序。</p><h3 id="SQL-ORDER-BY-关键字"><a href="#SQL-ORDER-BY-关键字" class="headerlink" title="SQL ORDER BY 关键字"></a>SQL ORDER BY 关键字</h3><p>ORDER BY 关键字用于对于结果集按照一个列或者多个列进行排序。</p><p>ORDER BY 关键字默认按照升序对记录进行排序，如果需要按照降序对记录进行排序，你可以使用 <strong>DESC</strong> 关键字。</p><h3 id="SQL-ORDER-BY-语法"><a href="#SQL-ORDER-BY-语法" class="headerlink" title="SQL ORDER BY 语法"></a>SQL ORDER BY 语法</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1,column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> column1,column2, ... <span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><ul><li><code>column1,column2, ...</code> ：要排序的字段名称，可以为多个字段</li><li><code>ASC</code> ：表示按升序排序</li><li><code>DESC</code> ：表示按降序排序</li></ul><h3 id="演示数据库-4"><a href="#演示数据库-4" class="headerlink" title="演示数据库"></a>演示数据库</h3><p>下面是选自 “<strong>Websites</strong>“ 表的数据：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">----+--------------+---------------------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name         <span class="operator">|</span> url                       <span class="operator">|</span> alexa <span class="operator">|</span> country <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------+---------------------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>  <span class="operator">|</span> Google       <span class="operator">|</span> https:<span class="operator">/</span><span class="operator">/</span>www.google.cm<span class="operator">/</span>    <span class="operator">|</span> <span class="number">1</span>     <span class="operator">|</span> USA     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>  <span class="operator">|</span> 淘宝          <span class="operator">|</span> https:<span class="operator">/</span><span class="operator">/</span>www.taobao.com<span class="operator">/</span>   <span class="operator">|</span> <span class="number">13</span>    <span class="operator">|</span> CN      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>  <span class="operator">|</span> 菜鸟教程      <span class="operator">|</span> http:<span class="operator">/</span><span class="operator">/</span>www.runoob.com<span class="operator">/</span>    <span class="operator">|</span> <span class="number">4689</span>  <span class="operator">|</span> CN      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span>  <span class="operator">|</span> 微博          <span class="operator">|</span> http:<span class="operator">/</span><span class="operator">/</span>weibo.com<span class="operator">/</span>         <span class="operator">|</span> <span class="number">20</span>    <span class="operator">|</span> CN      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5</span>  <span class="operator">|</span> Facebook     <span class="operator">|</span> https:<span class="operator">/</span><span class="operator">/</span>www.facebook.com<span class="operator">/</span> <span class="operator">|</span> <span class="number">3</span>     <span class="operator">|</span> USA     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------+---------------------------+-------+---------+</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ORDER-BY-实例"><a href="#ORDER-BY-实例" class="headerlink" title="ORDER BY 实例"></a>ORDER BY 实例</h3><p>下面的 SQL 语句从 Websites 表中选取所有网站，并按照 alexa 列排序：</p><p>实例：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> alexa;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="/img/load.gif" data-original="https://www.runoob.com/wp-content/uploads/2013/09/orderby1.jpg" alt="https://www.runoob.com/wp-content/uploads/2013/09/orderby1.jpg"></p><h3 id="ORDER-BY-DESC-实例"><a href="#ORDER-BY-DESC-实例" class="headerlink" title="ORDER BY DESC 实例"></a>ORDER BY DESC 实例</h3><p>下面的 SQL 语句从 Websites 表中选取所有网站，并按照 alexa 列降序排序：</p><p>实例：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> alexa <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="/img/load.gif" data-original="https://www.runoob.com/wp-content/uploads/2013/09/orderby2.jpg" alt="https://www.runoob.com/wp-content/uploads/2013/09/orderby2.jpg"></p><h3 id="ORDER-BY-多列"><a href="#ORDER-BY-多列" class="headerlink" title="ORDER BY 多列"></a>ORDER BY 多列</h3><p>下面的 SQL 语句从 Websites 表中选取所有网站，并且按照 country 和 alexa 列排序：</p><p>实例：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> country,alexa;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="/img/load.gif" data-original="https://www.runoob.com/wp-content/uploads/2013/09/orderby3.jpg" alt=" https://www.runoob.com/wp-content/uploads/2013/09/orderby3.jpg"></p><h2 id="SQL-INSERT-INTO"><a href="#SQL-INSERT-INTO" class="headerlink" title="SQL INSERT INTO"></a>SQL INSERT INTO</h2><p>INSERT INTO 语句用于向表中插入新记录</p><h3 id="SQL-INSERT-INTO-语法"><a href="#SQL-INSERT-INTO-语法" class="headerlink" title="SQL INSERT INTO 语法"></a>SQL INSERT INTO 语法</h3><p>INSERT INTO 语句有两种可以编写形式。</p><p>第一种形式无需指定要插入数据的列名，值需要提供被插入的值即可：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name</span><br><span class="line"><span class="keyword">VALUES</span> (value1,value2,value3,...);</span><br></pre></td></tr></table></figure><p>第二种形式需要指定列名及被插入的值：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name (column1,column2,column3,..)</span><br><span class="line"><span class="keyword">VALUES</span> (value1,value2,value3,...);</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>table_name</code> ：需要插入新纪录的表名</li><li><code>column1,column2,column3,..</code> ：需要插入的字段名</li><li><code>value1,value2,value3,...</code> ：需要插入的字段值。</li></ul><h3 id="演示数据库-5"><a href="#演示数据库-5" class="headerlink" title="演示数据库"></a>演示数据库</h3><p>下面是选自 “<strong>Websites</strong>“ 表的数据：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">----+--------------+---------------------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name         <span class="operator">|</span> url                       <span class="operator">|</span> alexa <span class="operator">|</span> country <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------+---------------------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>  <span class="operator">|</span> Google       <span class="operator">|</span> https:<span class="operator">/</span><span class="operator">/</span>www.google.cm<span class="operator">/</span>    <span class="operator">|</span> <span class="number">1</span>     <span class="operator">|</span> USA     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>  <span class="operator">|</span> 淘宝          <span class="operator">|</span> https:<span class="operator">/</span><span class="operator">/</span>www.taobao.com<span class="operator">/</span>   <span class="operator">|</span> <span class="number">13</span>    <span class="operator">|</span> CN      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>  <span class="operator">|</span> 菜鸟教程      <span class="operator">|</span> http:<span class="operator">/</span><span class="operator">/</span>www.runoob.com<span class="operator">/</span>    <span class="operator">|</span> <span class="number">4689</span>  <span class="operator">|</span> CN      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span>  <span class="operator">|</span> 微博          <span class="operator">|</span> http:<span class="operator">/</span><span class="operator">/</span>weibo.com<span class="operator">/</span>         <span class="operator">|</span> <span class="number">20</span>    <span class="operator">|</span> CN      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5</span>  <span class="operator">|</span> Facebook     <span class="operator">|</span> https:<span class="operator">/</span><span class="operator">/</span>www.facebook.com<span class="operator">/</span> <span class="operator">|</span> <span class="number">3</span>     <span class="operator">|</span> USA     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------+---------------------------+-------+---------+</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>INSERT INTO 实例</p><p>假设我们要向 Websites 表中插入一个新列</p><p>我们可以使用下面的 SQL 语句</p><p>实例：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Websites (name,url,alexa,country)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;百度&#x27;</span>,<span class="string">&#x27;https://www.baidu.com/&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;CN&#x27;</span>);</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="/img/load.gif" data-original="https://www.runoob.com/wp-content/uploads/2013/09/insert1.jpg" alt="https://www.runoob.com/wp-content/uploads/2013/09/insert1.jpg"></p><blockquote><p>💡   你是否注意到，我们没有向 id 字段插入任何数字？</p><p>id 列是自动更新的，表中的每条记录都有一个唯一的数字</p></blockquote><h3 id="在指定的列插入数据"><a href="#在指定的列插入数据" class="headerlink" title="在指定的列插入数据"></a>在指定的列插入数据</h3><p>我们也可以在指定的列插入数据</p><p>下面的 SQL 语句将插入一个新行，但只是在 name、url 和 country 列插入数据 (id字段会自动更新)</p><p>实例：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Websites (name,url,country)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;stackoverflow&#x27;</span>, <span class="string">&#x27;http://stackoverflow.com/&#x27;</span>, <span class="string">&#x27;IND&#x27;</span>);</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="/img/load.gif" data-original="https://www.runoob.com/wp-content/uploads/2013/09/insert2.jpg" alt=" https://www.runoob.com/wp-content/uploads/2013/09/insert2.jpg"></p><h2 id="SQL-UPDATE"><a href="#SQL-UPDATE" class="headerlink" title="SQL UPDATE"></a>SQL UPDATE</h2><p>UPDATE 语句用于更新表中的记录</p><h3 id="SQL-UPDATE-语法"><a href="#SQL-UPDATE-语法" class="headerlink" title="SQL UPDATE 语法"></a>SQL UPDATE 语法</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> table_name</span><br><span class="line"><span class="keyword">SET</span> column1 <span class="operator">=</span> value1, column2 <span class="operator">=</span> value2, ...</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>table_name</code> ：要修改的表的名称</li><li><code>column1,column2,...</code> ：要修改的字段名称，可以为多个字段</li><li><code>value1,value2,...</code> ：要修改的值，可以为多个值</li><li><code>condition</code> ：修改条件，用于指定哪些数据要修改</li></ul><blockquote><p>💡   请注意 SQL UPDATE 语句中的 WHERE 子句！</p><p>WHERE 子句规定哪条记录或者哪些记录需要更新。如果你省略了 WHERE 子句，所有的记录都将被更新！</p></blockquote><h3 id="演示数据库-6"><a href="#演示数据库-6" class="headerlink" title="演示数据库"></a>演示数据库</h3><p>下面是选自 “<strong>Websites</strong>“ 表的数据：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">----+--------------+---------------------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name         <span class="operator">|</span> url                       <span class="operator">|</span> alexa <span class="operator">|</span> country <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------+---------------------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>  <span class="operator">|</span> Google       <span class="operator">|</span> https:<span class="operator">/</span><span class="operator">/</span>www.google.cm<span class="operator">/</span>    <span class="operator">|</span> <span class="number">1</span>     <span class="operator">|</span> USA     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>  <span class="operator">|</span> 淘宝          <span class="operator">|</span> https:<span class="operator">/</span><span class="operator">/</span>www.taobao.com<span class="operator">/</span>   <span class="operator">|</span> <span class="number">13</span>    <span class="operator">|</span> CN      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>  <span class="operator">|</span> 菜鸟教程      <span class="operator">|</span> http:<span class="operator">/</span><span class="operator">/</span>www.runoob.com<span class="operator">/</span>    <span class="operator">|</span> <span class="number">4689</span>  <span class="operator">|</span> CN      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span>  <span class="operator">|</span> 微博          <span class="operator">|</span> http:<span class="operator">/</span><span class="operator">/</span>weibo.com<span class="operator">/</span>         <span class="operator">|</span> <span class="number">20</span>    <span class="operator">|</span> CN      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5</span>  <span class="operator">|</span> Facebook     <span class="operator">|</span> https:<span class="operator">/</span><span class="operator">/</span>www.facebook.com<span class="operator">/</span> <span class="operator">|</span> <span class="number">3</span>     <span class="operator">|</span> USA     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------+---------------------------+-------+---------+</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="SQL-UPDATE-实例"><a href="#SQL-UPDATE-实例" class="headerlink" title="SQL UPDATE 实例"></a>SQL UPDATE 实例</h3><p>假设我们要把 菜鸟教程 的 alexa 排名更新为 5000，country 改为 USA</p><p>我们使用下面的 SQL 语句</p><p>实例：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> Websites </span><br><span class="line"><span class="keyword">SET</span> alexa<span class="operator">=</span><span class="string">&#x27;5000&#x27;</span>, country<span class="operator">=</span><span class="string">&#x27;USA&#x27;</span> </span><br><span class="line"><span class="keyword">WHERE</span> name<span class="operator">=</span><span class="string">&#x27;菜鸟教程&#x27;</span>;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="/img/load.gif" data-original="https://www.runoob.com/wp-content/uploads/2013/09/update1.jpg" alt="https://www.runoob.com/wp-content/uploads/2013/09/update1.jpg"></p><h3 id="UPDATE-警告！"><a href="#UPDATE-警告！" class="headerlink" title="UPDATE 警告！"></a>UPDATE 警告！</h3><p>在更新记录时要格外小心！在上面的实例中，如果我们省略了 WHERE 子句，如下所示：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> Websites</span><br><span class="line"><span class="keyword">SET</span> alexa<span class="operator">=</span><span class="string">&#x27;5000&#x27;</span>, country<span class="operator">=</span><span class="string">&#x27;USA&#x27;</span></span><br></pre></td></tr></table></figure><p>执行以上代码会将 Websites 表中所有数据的 alexa 改为 5000，country 改为 USA</p><p>执行没有 WHERE 子句的 UPDATE 要慎重，再慎重。</p><h2 id="SQL-DELETE"><a href="#SQL-DELETE" class="headerlink" title="SQL DELETE"></a>SQL DELETE</h2><p>DELETE 语句用于删除表中的记录</p><p>SQL DELETE 语法</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>table_name</code> ：要删除的表的名称</li><li><code>condition</code> ：删除条件，用于指定哪些数据要删除</li></ul><blockquote><p>💡   请注意 SQL DELETE 语句中的 WHERE 子句！</p><p>WHERE 子句规定哪条记录或者哪些记录需要删除，如果你省略了 WHERE 子句，所有的记录都将被删除！</p></blockquote><h3 id="演示数据库-7"><a href="#演示数据库-7" class="headerlink" title="演示数据库"></a>演示数据库</h3><p>下面是选自 “<strong>Websites</strong>“ 表的数据：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">----+--------------+---------------------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name         <span class="operator">|</span> url                       <span class="operator">|</span> alexa <span class="operator">|</span> country <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------+---------------------------+-------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>  <span class="operator">|</span> Google       <span class="operator">|</span> https:<span class="operator">/</span><span class="operator">/</span>www.google.cm<span class="operator">/</span>    <span class="operator">|</span> <span class="number">1</span>     <span class="operator">|</span> USA     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>  <span class="operator">|</span> 淘宝          <span class="operator">|</span> https:<span class="operator">/</span><span class="operator">/</span>www.taobao.com<span class="operator">/</span>   <span class="operator">|</span> <span class="number">13</span>    <span class="operator">|</span> CN      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>  <span class="operator">|</span> 菜鸟教程      <span class="operator">|</span> http:<span class="operator">/</span><span class="operator">/</span>www.runoob.com<span class="operator">/</span>    <span class="operator">|</span> <span class="number">4689</span>  <span class="operator">|</span> CN      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span>  <span class="operator">|</span> 微博          <span class="operator">|</span> http:<span class="operator">/</span><span class="operator">/</span>weibo.com<span class="operator">/</span>         <span class="operator">|</span> <span class="number">20</span>    <span class="operator">|</span> CN      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5</span>  <span class="operator">|</span> Facebook     <span class="operator">|</span> https:<span class="operator">/</span><span class="operator">/</span>www.facebook.com<span class="operator">/</span> <span class="operator">|</span> <span class="number">3</span>     <span class="operator">|</span> USA     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------+---------------------------+-------+---------+</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="SQL-DELETE-实例"><a href="#SQL-DELETE-实例" class="headerlink" title="SQL DELETE 实例"></a>SQL DELETE 实例</h3><p>假设我们要从 Websites 表中删除网站名称为 Facebook 且国家为 USA 的网站</p><p>我们使用一下 SQL 语句：</p><p>实例：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;Facebook&#x27;</span> <span class="keyword">AND</span> country <span class="operator">=</span> <span class="string">&#x27;USA&#x27;</span>;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="/img/load.gif" data-original="https://www.runoob.com/wp-content/uploads/2013/09/BD5EFB9A-2A65-4AF8-81F3-022E051811DC.jpg" alt=" https://www.runoob.com/wp-content/uploads/2013/09/BD5EFB9A-2A65-4AF8-81F3-022E051811DC.jpg"></p><h3 id="删除所有数据"><a href="#删除所有数据" class="headerlink" title="删除所有数据"></a>删除所有数据</h3><p>你可以在不删除表的情况下，删除表中所有的行。这意味着表结构、属性、索引将保持不变：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注释</strong>：在删除记录时要格外小心！因为你不能重来！</p></blockquote><hr><h1 id="SQL-高级教程"><a href="#SQL-高级教程" class="headerlink" title="SQL 高级教程"></a>SQL 高级教程</h1><h2 id="SQL-SELECT-TOP"><a href="#SQL-SELECT-TOP" class="headerlink" title="SQL SELECT TOP"></a>SQL SELECT TOP</h2><p>SELECT TOP 语句用于在 SQL 中限制返回的结果集中的行数，它通常用于值需要查询前几行数据的情况，尤其在数据集非常大时，可</p>]]></content>
      
      
      <categories>
          
          <category> 编程语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker使用</title>
      <link href="/posts/cd988ed5.html"/>
      <url>/posts/cd988ed5.html</url>
      
        <content type="html"><![CDATA[<p><img src="/img/load.gif" data-original="https://www.kubernetes.org.cn/img/2018/04/v2-efd70b66fc1a550ab8d7b926cbd0cccf_hd.jpg" alt="Docker使用"></p><h1 id="1-快速入门"><a href="#1-快速入门" class="headerlink" title="1.快速入门"></a>1.快速入门</h1><p>安装 <strong>Docker</strong> ：</p><a href="/posts/f5f9fa9b.html" target="_blank">  <img src="/img/load.gif" data-original="https://image.3001.net/images/20171222/15139427067456.png" alt="Docker安装"></a><h2 id="1-1-部署-MySQL"><a href="#1-1-部署-MySQL" class="headerlink" title="1.1.部署 MySQL"></a>1.1.部署 MySQL</h2><p>传统安装 <strong>MySQL</strong> ：</p><ul><li>搜索并下载MySQL安装包</li><li>上传至Linux环境</li><li>编译和配置环境</li><li>安装</li></ul><p><strong>Docker</strong> 安装 <strong>MySQL</strong> ：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">docker run <span class="literal">-d</span> \</span><br><span class="line">  <span class="literal">--name</span> mysql \</span><br><span class="line">  <span class="literal">-p</span> <span class="number">3306</span>:<span class="number">3306</span> \</span><br><span class="line">  <span class="literal">-e</span> TZ=Asia/Shanghai \</span><br><span class="line">  <span class="literal">-e</span> MYSQL_ROOT_PASSWORD=<span class="number">123</span> \</span><br><span class="line">  mysql</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="/img/load.gif" data-original="/images/environment/docker/docker/a/v1.png" alt="运行效果"></p><p><strong>MySQL</strong> 安装完毕，通过任意客户端工具即可连接 <strong>MySQL</strong> .</p><p>执行命令后，<strong>Docker</strong> 回去自动搜索并下载 <strong>MySQL</strong> ，然后自动运行 <strong>MySQL</strong> ，并不需要我们插手，十分便捷。</p><p>而且通过这种方式完全不需要考虑运行的操作系统环境，它不仅仅在 <strong>CentOS</strong> 系统，在 <strong>Ubuntu</strong> 系统，<strong>macOS</strong>系统，甚至是安装了 <strong>WSL</strong> 的 <strong>Windows</strong> 系统下，都可以使用这条命令来安装 <strong>MySQL</strong> 。</p><p>要知道，<strong>不同操作系统下其安装包、运行环境是都不相同的</strong>！如果是<strong>手动安装，必须手动解决安装包不同、环境不同的、配置不同的问题</strong>！</p><p>而使用 <strong>Docker</strong>，这些完全不用考虑。就是因为 <strong>Docker</strong> 会自动搜索并下载 <strong>MySQL</strong> 。注意：这里下载的不是安装包，而是<strong>镜像。</strong>镜像中不仅包含了 <strong>MySQL</strong> 本身，还包含了其运行所需要的环境、配置、系统级函数库。因此它在运行时就有自己独立的环境，就可以跨系统运行，也不需要手动再次配置环境了。这套独立运行的隔离环境我们称为<strong>容器</strong>。</p><p>说明：</p><ul><li>镜像：英文是 <code>image</code></li><li>容器：英文是 <code>container</code></li></ul><blockquote><p>因此，<strong>Docker</strong> 安装的过程，就是自动搜索并下载镜像，然后创建并运行容器的过程。</p></blockquote><p><strong>Docker</strong> 会根据命令中的镜像名称自动搜索并下载镜像，那么问题来了，它是去哪里搜索和下载镜像的呢？这些镜像又是谁制作的呢？</p><p><strong>Docker</strong> 官方提供了一个专门管理、存储镜像的网站，并对外开放了镜像上传、下载的权利。<strong>Docker</strong> 官方提供了一些基础镜像，然后各大然间公司又在基础上，制作了自家的镜像软件，全部都存放在这个网站上，这个网站就成了 <strong>Docker</strong> 镜像交流社区：</p><blockquote><p><a href="https://hub.docker.com/">https://hub.docker.com/</a></p></blockquote><p>基本上我们常用的各种软件都能在这个网站上找到，我们甚至可以自己制作镜像上传上去。</p><p>像这种提供存储，管理 <strong>Docker</strong> 镜像的服务器，被称为 <strong>DockerRegistry</strong> ，可以翻译为镜像仓库。<strong>DockerHub</strong> 网站时官方仓库，阿里云、华为云会提供一些第三方仓库，我们也可以搭建私有的镜像仓库。</p><p>官方仓库在国外，下载速度较慢，一般我们都会使用第三方仓库提供的镜像加速功能，提高下载速度。在企业内部的机密项目，往往会采用私有镜像仓库。</p><p>总之，镜像的来源有两种：</p><ul><li>基于官方基础镜像自己制作</li><li>直接去 <strong>DockerRegistry</strong> 下载</li></ul><blockquote><p><strong>总结一下</strong>：</p><p><strong>Docker</strong> 本身包含一个后台服务，我们可以利用 <strong>Docker</strong> 命令告诉 <strong>Docker</strong> 服务，帮助我们快速部署指定的应用。<strong>Docker</strong> 服务部署应用时，首先要去搜索并下载应用对应的镜像，然后根据镜像创建并允许容器，应用就部署完成了。</p></blockquote><p>如图所示：</p><p><img src="/img/load.gif" data-original="/images/environment/docker/docker/a/v2.png" alt="运行效果"></p><h2 id="1-2-命令解读"><a href="#1-2-命令解读" class="headerlink" title="1.2.命令解读"></a>1.2.命令解读</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name mysql \</span><br><span class="line">  -p 3306:3306 \</span><br><span class="line">  -e TZ=Asia/Shanghai \</span><br><span class="line">  -e MYSQL_ROOT_PASSWORD=123 \</span><br><span class="line">  mysql</span><br></pre></td></tr></table></figure><blockquote><p>解读：</p><ul><li><code>docker run -d</code> ：创建并运行一个容器 <code>-d</code> 则时让容器以后台进程进行</li><li><code>--name mysql</code> ：给容器起个名字叫 <code>mysql</code>，也可以去别的</li><li><code>-p 3306:3306</code> ：设置多口映射<ul><li><strong>容器是隔离环境</strong>，外界不可访问。但是可以<strong>将宿主机端口映射容器内到端口</strong>，当访问宿主机指定端口时，就是在访问容器内的端口了。</li><li>容器内端口往往是由容器内的进程决定。例如 <strong>MySQL</strong> 进行默认端口是 <code>3306</code> ，因此容器内端口一定是 <code>3306</code> ；而宿主机端口则可以任意指定，一般与容器内保持一致。</li><li>格式：<code>-p 宿主机端口:容器内端口</code> ，示例中就是将宿主机的 <code>3306</code> 映射到容器内的 <code>3306</code> 端口</li></ul></li><li><code>-e TZ=Asia/Shanghai</code> ：配置容器内进行运行时的一些参数<ul><li>格式：<code>-e KEY=VALUE</code> ,<strong>KEY</strong> 和 <strong>VALUE</strong> 都由容器内进程决定</li><li>案例中 <code>TZ=Asia/Shanghai</code> 是设置时区；<code>MYSQL_ROOT_PASSWORD=123</code> 是设置 MySQL 默认密码</li></ul></li><li><code>mysql</code> ：设置镜像名称，Docker 会根据这个名字搜索并下载镜像<ul><li>格式：<code>REPOSITORY:TAG</code>，例如<code>mysql:8.0</code>，其中<code>REPOSITORY</code>可以理解为镜像名，<code>TAG</code>是版本号</li><li>在未指定<code>TAG</code>的情况下，默认是最新版本，也就是<code>mysql:latest</code></li></ul></li></ul></blockquote><p>镜像的名称不是随意的，而是要到 <strong>DockerRegistry</strong> 中寻找，镜像运行时的配置也不是随意的，要参考镜像的帮助文档，这些在 <strong>DockerHub</strong> 网站或者软件的官方网站中都能找到。</p><p>如果我们要安装其他软件，也可以到 <strong>DockerRegistry</strong> 中寻找对应的镜像名称和版本，阅读相关配置即可。</p><hr><h1 id="2-Docker-基础"><a href="#2-Docker-基础" class="headerlink" title="2.Docker 基础"></a>2.Docker 基础</h1><p><strong>Docker</strong> 官方文档：</p><p><a href="https://docs.docker.com/">https://docs.docker.com/</a></p><h2 id="2-1-常见命令"><a href="#2-1-常见命令" class="headerlink" title="2.1.常见命令"></a>2.1.常见命令</h2><p><a href="https://docs.docker.com/reference/cli/docker/">https://docs.docker.com/reference/cli/docker/</a></p><h3 id="2-1-1-常见命令介绍"><a href="#2-1-1-常见命令介绍" class="headerlink" title="2.1.1.常见命令介绍"></a>2.1.1.常见命令介绍</h3><table><thead><tr><th align="left"><strong>命令</strong></th><th align="left"><strong>说明</strong></th><th align="left"><strong>文档地址</strong></th></tr></thead><tbody><tr><td align="left">docker pull</td><td align="left">拉取镜像</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/pull/">docker pull</a></td></tr><tr><td align="left">docker push</td><td align="left">推送镜像到DockerRegistry</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/push/">docker push</a></td></tr><tr><td align="left">docker images</td><td align="left">查看本地镜像</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/images/">docker images</a></td></tr><tr><td align="left">docker rmi</td><td align="left">删除本地镜像</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/rmi/">docker rmi</a></td></tr><tr><td align="left">docker run</td><td align="left">创建并运行容器（不能重复创建）</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/run/">docker run</a></td></tr><tr><td align="left">docker stop</td><td align="left">停止指定容器</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/stop/">docker stop</a></td></tr><tr><td align="left">docker start</td><td align="left">启动指定容器</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/start/">docker start</a></td></tr><tr><td align="left">docker restart</td><td align="left">重新启动容器</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/restart/">docker restart</a></td></tr><tr><td align="left">docker rm</td><td align="left">删除指定容器</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/rm/">docs.docker.com</a></td></tr><tr><td align="left">docker ps</td><td align="left">查看容器</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/ps/">docker ps</a></td></tr><tr><td align="left">docker logs</td><td align="left">查看容器运行日志</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/logs/">docker logs</a></td></tr><tr><td align="left">docker exec</td><td align="left">进入容器</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/exec/">docker exec</a></td></tr><tr><td align="left">docker save</td><td align="left">保存镜像到本地压缩文件</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/save/">docker save</a></td></tr><tr><td align="left">docker load</td><td align="left">加载本地压缩文件到镜像</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/load/">docker load</a></td></tr><tr><td align="left">docker inspect</td><td align="left">查看容器详细信息</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/inspect/">docker inspect</a></td></tr></tbody></table><p>用一幅图来表示这些命令的关系：</p><p><img src="/img/load.gif" data-original="/images/environment/docker/docker/a/v3.png" alt="命令关系"></p><p>补充：</p><p>默认情况下，每次重启虚拟机我们都需要手动启动 <strong>Docker</strong> 和 <strong>Docker</strong> 中的容器。通过命令可以实现开机启动：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Docker开机自启</span></span><br><span class="line">systemctl enable docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># Docker容器开机自启</span></span><br><span class="line">docker update <span class="literal">--restart</span>=always [容器名/容器<span class="type">id</span>]</span><br></pre></td></tr></table></figure><h3 id="2-1-2-演示"><a href="#2-1-2-演示" class="headerlink" title="2.1.2.演示"></a>2.1.2.演示</h3><p>以 <strong>nginx</strong> 为例：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第1步，去DockerHub查看nginx镜像仓库及相关信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第2步，拉取Nginx镜像</span></span><br><span class="line">docker pull nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第3步，查看镜像</span></span><br><span class="line">docker images</span><br><span class="line"><span class="comment"># 结果如下：</span></span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">nginx        latest    <span class="number">605</span>c77e624dd   <span class="number">16</span> months ago   <span class="number">141</span>MB</span><br><span class="line">mysql        latest    <span class="number">3218</span>b38490ce   <span class="number">17</span> months ago   <span class="number">516</span>MB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第4步，创建并允许Nginx容器</span></span><br><span class="line">docker run <span class="literal">-d</span> <span class="literal">--name</span> nginx <span class="literal">-p</span> <span class="number">80</span>:<span class="number">80</span> nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第5步，查看运行中容器</span></span><br><span class="line">docker <span class="built_in">ps</span></span><br><span class="line"><span class="comment"># 也可以加格式化方式访问，格式会更加清爽</span></span><br><span class="line">docker <span class="built_in">ps</span> <span class="literal">--format</span> <span class="string">&quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第6步，访问网页，地址：http://虚拟机地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第7步，停止容器</span></span><br><span class="line">docker stop nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第8步，查看所有容器</span></span><br><span class="line">docker <span class="built_in">ps</span> <span class="literal">-a</span> <span class="literal">--format</span> <span class="string">&quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第9步，再次启动nginx容器</span></span><br><span class="line">docker <span class="built_in">start</span> nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第10步，再次查看容器</span></span><br><span class="line">docker <span class="built_in">ps</span> <span class="literal">--format</span> <span class="string">&quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第11步，查看容器详细信息</span></span><br><span class="line">docker inspect nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第12步，进入容器,查看容器内目录</span></span><br><span class="line">docker exec <span class="literal">-it</span> nginx bash</span><br><span class="line"><span class="comment"># 或者，可以进入MySQL</span></span><br><span class="line">docker exec <span class="literal">-it</span> mysql mysql <span class="literal">-uroot</span> <span class="literal">-p</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第13步，删除容器</span></span><br><span class="line">docker <span class="built_in">rm</span> nginx</span><br><span class="line"><span class="comment"># 发现无法删除，因为容器运行中，强制删除容器</span></span><br><span class="line">docker <span class="built_in">rm</span> <span class="operator">-f</span> nginx</span><br></pre></td></tr></table></figure><h3 id="2-1-3-命令别名"><a href="#2-1-3-命令别名" class="headerlink" title="2.1.3.命令别名"></a>2.1.3.命令别名</h3><p>给常用的 <strong>Docker</strong> 命令起别名，方便我们访问：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改/root/.bashrc文件</span></span><br><span class="line">vi /root/.bashrc</span><br><span class="line">内容如下：</span><br><span class="line"><span class="comment"># .bashrc</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># User specific aliases and functions</span></span><br><span class="line"></span><br><span class="line">alias <span class="built_in">rm</span>=<span class="string">&#x27;rm -i&#x27;</span></span><br><span class="line">alias <span class="built_in">cp</span>=<span class="string">&#x27;cp -i&#x27;</span></span><br><span class="line">alias <span class="built_in">mv</span>=<span class="string">&#x27;mv -i&#x27;</span></span><br><span class="line">alias dps=<span class="string">&#x27;docker ps --format &quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;&#x27;</span></span><br><span class="line">alias dis=<span class="string">&#x27;docker images&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Source global definitions</span></span><br><span class="line"><span class="keyword">if</span> [ -<span class="type">f</span> /<span class="type">etc</span>/<span class="type">bashrc</span> ]; then</span><br><span class="line">        . /etc/bashrc</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>然后，执行命令使别名生效</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">source /root/.bashrc</span><br></pre></td></tr></table></figure><h2 id="2-2-数据卷"><a href="#2-2-数据卷" class="headerlink" title="2.2.数据卷"></a>2.2.数据卷</h2><p>容器是隔离环境，容器内程序的文件、配置、运行时产生的容器都在容器内部，我们要读写容器内的文件非常不方便，问题思考：</p><ul><li>如果要升级 MySQL，需要销毁旧容器，那么旧数据岂不是跟着被销毁了？</li><li>MySQL 、Nginx 容器运行后，如果我要修改其中的某些配置该怎么办？</li><li>怎么让 Nginx 代理静态资源？</li></ul><p>因此，容器提供程序的运行环境，但是<strong>程序运行产生的数据、程序运行依赖的配置都应该与容器解耦</strong>。</p><h3 id="2-2-1-什么是数据卷"><a href="#2-2-1-什么是数据卷" class="headerlink" title="2.2.1.什么是数据卷"></a>2.2.1.什么是数据卷</h3><p><strong>数据卷(volume)<strong>是一个虚拟目录，是</strong>容器内目录与宿主机目录</strong>之间映射的桥梁。</p><p>以 <strong>Nginx</strong> 为例，我们知道 <strong>Nginx</strong> 中有两个关键的目录：</p><ul><li><code>html</code> ：放置一些静态资源</li><li><code>conf</code> ：放置配置文件</li></ul><p>如果我们要让 <strong>Nginx</strong> 代理我们的静态资源，最好放到 <strong>html</strong> 目录；如果我们要修改 <strong>Nginx</strong>  的配置，最好是找到 <strong>conf</strong> 下的 <strong>nginx.conf</strong> 文件</p><p>但遗憾的是，容器运行的 <strong>Nginx</strong> 所有的问及那都在容器内部。所以我们必须利用数据卷将两个目录与宿主机目录关联，方便我们操作。如图：</p><p><img src="/img/load.gif" data-original="/images/environment/docker/docker/a/v4.png" alt="数据卷"></p><p>在上图中：</p><ul><li>我们创建了两个数据卷：<code>conf</code>、<code>html</code></li><li>Nginx容器内部的<code>conf</code>目录和<code>html</code>目录分别与两个数据卷关联。</li><li>而数据卷conf和html分别指向了宿主机的<code>/var/lib/docker/volumes/conf/_data</code>目录和<code>/var/lib/docker/volumes/html/_data</code>目录</li></ul><p>这样以来，容器内的<code>conf</code>和<code>html</code>目录就 与宿主机的<code>conf</code>和<code>html</code>目录关联起来，我们称为<strong>挂载</strong>。此时，我们操作宿主机的<code>/var/lib/docker/volumes/html/_data</code>就是在操作容器内的<code>/usr/share/nginx/html/_data</code>目录。只要我们将静态资源放入宿主机对应目录，就可以被Nginx代理了。</p><blockquote><p>小提示：</p><p><code>/var/lib/docker/volumes</code> 这个目录就是默认的存放所有容器数据卷的目录，其下再根据数据卷名称创建新目录，格式为 <code>/数据卷名/_data</code></p><p>为什么不让容器目录直接指向宿主机目录呢？</p><ul><li>因为直接指向宿主机目录就与宿主机强耦合了，如果切换了环境，宿主机目录就可能发生改变。由于容器一旦创建，目录挂载就无法修改，这样容器就无法正常工作了。</li><li>但是容器指向数据卷，一个逻辑名称，而数据卷再指向宿主机目录，就不存在强耦合。如果宿主机目录发生改变，只要改变数据卷与数组机目录之间的映射关系即可</li></ul><p>不过，我们由于数据卷目录比较深，不好寻找，通常我们也<strong>允许让容器直接与宿主机挂载而不使用数据卷</strong></p></blockquote><h3 id="2-2-2-数据卷命令"><a href="#2-2-2-数据卷命令" class="headerlink" title="2.2.2.数据卷命令"></a>2.2.2.数据卷命令</h3><table><thead><tr><th align="left"><strong>命令</strong></th><th align="left"><strong>说明</strong></th><th align="left"><strong>文档地址</strong></th></tr></thead><tbody><tr><td align="left">docker volume create</td><td align="left">创建数据卷</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/volume_create/">docker volume create</a></td></tr><tr><td align="left">docker volume ls</td><td align="left">查看所有数据卷</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/volume_ls/">docs.docker.com</a></td></tr><tr><td align="left">docker volume rm</td><td align="left">删除指定数据卷</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/volume_prune/">docs.docker.com</a></td></tr><tr><td align="left">docker volume inspect</td><td align="left">查看某个数据卷的详情</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/volume_inspect/">docs.docker.com</a></td></tr><tr><td align="left">docker volume prune</td><td align="left">清除数据卷</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/volume_prune/">docker volume prune</a></td></tr></tbody></table><p>注意：容器与数据卷的挂载要在创建容器时配置，对于创建好的容器，是不能设置数据卷的。而且<strong>创建容器的过程中，数据卷会自动创建</strong>。</p><p>演示一下 <strong>nginx</strong> 的 <strong>html</strong> 目录挂载：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.首先创建容器并指定数据卷，注意通过 -v 参数来指定数据卷</span></span><br><span class="line">docker run <span class="literal">-d</span> <span class="literal">--name</span> nginx <span class="literal">-p</span> <span class="number">80</span>:<span class="number">80</span> <span class="literal">-v</span> html:/usr/share/nginx/html nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.然后查看数据卷</span></span><br><span class="line">docker volume <span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line">local     <span class="number">29524</span>ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f</span><br><span class="line">local     html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.查看数据卷详情</span></span><br><span class="line">docker volume inspect html</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;CreatedAt&quot;</span>: <span class="string">&quot;2024-05-17T19:57:08+08:00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: <span class="type">null</span>,</span><br><span class="line">        <span class="string">&quot;Mountpoint&quot;</span>: <span class="string">&quot;/var/lib/docker/volumes/html/_data&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;html&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: <span class="type">null</span>,</span><br><span class="line">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.查看/var/lib/docker/volumes/html/_data目录</span></span><br><span class="line">ll /var/lib/docker/volumes/html/_data</span><br><span class="line"><span class="comment"># 可以看到与nginx的html目录内容一样，结果如下：</span></span><br><span class="line">总用量 <span class="number">8</span></span><br><span class="line"><span class="literal">-rw-r--r--</span>. <span class="number">1</span> root root <span class="number">497</span> <span class="number">12</span>月 <span class="number">28</span> <span class="number">2021</span> <span class="number">50</span>x.html</span><br><span class="line"><span class="literal">-rw-r--r--</span>. <span class="number">1</span> root root <span class="number">615</span> <span class="number">12</span>月 <span class="number">28</span> <span class="number">2021</span> index.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.进入该目录，并随意修改index.html内容</span></span><br><span class="line"><span class="built_in">cd</span> /var/lib/docker/volumes/html/_data</span><br><span class="line">vi index.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.打开页面，查看效果</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.进入容器内部，查看/usr/share/nginx/html目录内的文件是否变化</span></span><br><span class="line">docker exec <span class="literal">-it</span> nginx bash</span><br></pre></td></tr></table></figure><p>演示一下 <strong>MySQL</strong> 的匿名数据卷：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.查看MySQL容器详细信息</span></span><br><span class="line">docker inspect mysql</span><br><span class="line"><span class="comment"># 关注其中.Config.Volumes部分和.Mounts部分</span></span><br></pre></td></tr></table></figure><p>我们关注两部分内容，第一是<code>.Config.Volumes</code>部分：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Config&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// ... 略</span></span><br><span class="line">    <span class="attr">&quot;Volumes&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;/var/lib/mysql&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="comment">// ... 略</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>可以发现这个容器声明了一个本地目录，需要挂载数据卷，但是<strong>数据卷未定义</strong>。这就是匿名卷。</p><p>然后，我们再看结果中的<code>.Mounts</code>部分：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Mounts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;Type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;volume&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Source&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/var/lib/docker/volumes/29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f/_data&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Destination&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/var/lib/mysql&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Driver&quot;</span><span class="punctuation">:</span> <span class="string">&quot;local&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>可以发现，其中有几个关键属性：</p><ul><li><strong>Name</strong>：数据卷名称。由于定义容器未设置容器名，这里的就是匿名卷自动生成的名字，一串 <strong>hash</strong> 值。</li><li><strong>Source</strong>：宿主机目录</li><li><strong>Destination</strong> : 容器内的目录</li></ul><p>上述配置是将容器内的<code>/var/lib/mysql</code>这个目录，与数据卷<code>29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f</code>挂载。于是在宿主机中就有了<code>/var/lib/docker/volumes/29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f/_data</code>这个目录。这就是匿名数据卷对应的目录，其使用方式与普通数据卷没有差别。</p><p>接下来，可以查看该目录下的 <strong>MySQL</strong> 的 <strong>data</strong> 文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l /var/lib/docker/volumes/29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f/_data</span><br></pre></td></tr></table></figure><p>注意：每一个不同的镜像，将来创建容器后内部有哪些目录可以挂载，可以参考 <strong>DockerHub</strong> 对应的页面</p><h3 id="2-2-3-挂载本地目录或文件"><a href="#2-2-3-挂载本地目录或文件" class="headerlink" title="2.2.3.挂载本地目录或文件"></a>2.2.3.挂载本地目录或文件</h3><p>可以发现，数据卷的目录结构较深，如果我们去操作数据卷目录会不太方便。在很多情况下，我们会直接将容器目录与宿主机指定目录挂载。挂载语法与数据卷类似：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 挂载本地目录</span></span><br><span class="line">-v 本地目录:容器内目录</span><br><span class="line"><span class="comment"># 挂载本地文件</span></span><br><span class="line">-v 本地文件:容器内文件</span><br></pre></td></tr></table></figure><blockquote><p>注意：本地目录或文件必须以 <code>/</code> 或 <code>./</code> 开头，如果直接以名字开头，会被识别为数据卷名而非本地目录名。。</p></blockquote><p>例如：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-v mysql:/var/lib/mysql <span class="comment"># 会被识别为一个数据卷叫mysql，运行时会自动创建这个数据卷</span></span><br><span class="line">-v ./mysql:/var/lib/mysql <span class="comment"># 会被识别为当前目录下的mysql目录，运行时如果不存在会创建目录</span></span><br></pre></td></tr></table></figure><h2 id="2-3-镜像"><a href="#2-3-镜像" class="headerlink" title="2.3.镜像"></a>2.3.镜像</h2><p>前面我们一直在使用别人准备好的镜像，那如果我要部署一个 <strong>Java</strong> 项目，把它打包为一个镜像该怎么做呢？</p><h3 id="2-3-1-镜像结构"><a href="#2-3-1-镜像结构" class="headerlink" title="2.3.1.镜像结构"></a>2.3.1.镜像结构</h3><p>要想自己构建镜像，必须先了解镜像的结构。</p><p>之前我们说过，镜像之所以能让我们快速跨操作系统部署应用而忽略其运行环境、配置，就是因为镜像中包含了程序运行需要的系统函数库、环境、配置、依赖。</p><p>因此，自定义镜像本质就是依次准备好程序运行的基础环境、依赖、应用本身、运行配置等文件，并且打包而成。</p><p>举个例子，我们要从0部署一个Java应用，大概流程是这样：</p><ul><li>准备一个linux服务（CentOS或者Ubuntu均可）</li><li>安装并配置JDK</li><li>上传Jar包</li><li>运行jar包</li></ul><p>那因此，我们打包镜像也是分成这么几步：</p><ul><li>准备Linux运行环境（java项目并不需要完整的操作系统，仅仅是基础运行环境即可）</li><li>安装并配置JDK</li><li>拷贝jar包</li><li>配置启动脚本</li></ul><p>上述步骤中的每一次操作其实都是在生产一些文件（系统运行环境、函数库、配置最终都是磁盘文件），所以<strong>镜像就是一堆文件的集合</strong>。</p><p>但需要注意的是，镜像文件不是随意堆放的，而是按照操作的步骤分层叠加而成，每一层形成的文件都会单独打包并标记一个唯一 <strong>id</strong>，称为<strong>Layer</strong>（<strong>层</strong>）。这样，如果我们构建时用到的某些层其他人已经制作过，就可以直接拷贝使用这些层，而不用重复制作。</p><p>例如，第一步中需要的Linux运行环境，通用性就很强，所以Docker官方就制作了这样的只包含Linux运行环境的镜像。我们在制作java镜像时，就无需重复制作，直接使用Docker官方提供的CentOS或Ubuntu镜像作为基础镜像。然后再搭建其它层即可，这样逐层搭建，最终整个Java项目的镜像结构如图所示：</p><p><img src="/img/load.gif" data-original="/images/environment/docker/docker/a/v5.png" alt="命令关系"></p><h3 id="2-3-2-Dockerfile"><a href="#2-3-2-Dockerfile" class="headerlink" title="2.3.2.Dockerfile"></a>2.3.2.Dockerfile</h3><p>由于制作镜像的过程中，需要逐层处理和打包，比较复杂，所以Docker就提供了自动打包镜像的功能。我们只需要将打包的过程，每一层要做的事情用固定的语法写下来，交给Docker去执行即可。</p><p>而这种记录镜像结构的文件就称为<strong>Dockerfile</strong>，其对应的语法可以参考官方文档：</p><p><a href="https://docs.docker.com/engine/reference/builder/">https://docs.docker.com/engine/reference/builder/</a></p><p>其中的语法比较多，比较常用的有：</p><table><thead><tr><th align="left"><strong>指令</strong></th><th align="left"><strong>说明</strong></th><th align="left"><strong>示例</strong></th></tr></thead><tbody><tr><td align="left"><strong>FROM</strong></td><td align="left">指定基础镜像</td><td align="left"><code>FROM centos:6</code></td></tr><tr><td align="left"><strong>ENV</strong></td><td align="left">设置环境变量，可在后面指令使用</td><td align="left"><code>ENV key value</code></td></tr><tr><td align="left"><strong>COPY</strong></td><td align="left">拷贝本地文件到镜像的指定目录</td><td align="left"><code>COPY ./xx.jar /tmp/app.jar</code></td></tr><tr><td align="left"><strong>RUN</strong></td><td align="left">执行Linux的shell命令，一般是安装过程的命令</td><td align="left"><code>RUN yum install gcc</code></td></tr><tr><td align="left"><strong>EXPOSE</strong></td><td align="left">指定容器运行时监听的端口，是给镜像使用者看的</td><td align="left">EXPOSE 8080</td></tr><tr><td align="left"><strong>ENTRYPOINT</strong></td><td align="left">镜像中应用的启动命令，容器运行时调用</td><td align="left">ENTRYPOINT java -jar xx.jar</td></tr></tbody></table><p>例如，要基于Ubuntu镜像来构建一个Java应用，其Dockerfile内容如下：</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">16.04</span></span><br><span class="line"><span class="comment"># 配置环境变量，JDK的安装目录、容器内时区</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_DIR=/usr/local</span><br><span class="line"><span class="keyword">ENV</span> TZ=Asia/Shanghai</span><br><span class="line"><span class="comment"># 拷贝jdk和java项目的包</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./jdk8.tar.gz <span class="variable">$JAVA_DIR</span>/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./docker-demo.jar /tmp/app.jar</span></span><br><span class="line"><span class="comment"># 设定时区</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">ln</span> -snf /usr/share/zoneinfo/<span class="variable">$TZ</span> /etc/localtime &amp;&amp; <span class="built_in">echo</span> <span class="variable">$TZ</span> &gt; /etc/timezone</span></span><br><span class="line"><span class="comment"># 安装JDK</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cd</span> <span class="variable">$JAVA_DIR</span> \</span></span><br><span class="line"><span class="language-bash"> &amp;&amp; tar -xf ./jdk8.tar.gz \</span></span><br><span class="line"><span class="language-bash"> &amp;&amp; <span class="built_in">mv</span> ./jdk1.8.0_144 ./java8</span></span><br><span class="line"><span class="comment"># 配置环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME=$JAVA_DIR/java8</span><br><span class="line"><span class="keyword">ENV</span> PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line"><span class="comment"># 指定项目监听的端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"><span class="comment"># 入口，java项目的启动命令</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>同学们思考一下：以后我们会有很多很多java项目需要打包为镜像，他们都需要Linux系统环境、JDK环境这两层，只有上面的3层不同（因为jar包不同）。如果每次制作java镜像都重复制作前两层镜像，是不是很麻烦。</p><p>所以，就有人提供了基础的系统加JDK环境，我们在此基础上制作java镜像，就可以省去JDK的配置了：</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">11.0</span>-jre-buster</span><br><span class="line"><span class="comment"># 设定时区</span></span><br><span class="line"><span class="keyword">ENV</span> TZ=Asia/Shanghai</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">ln</span> -snf /usr/share/zoneinfo/<span class="variable">$TZ</span> /etc/localtime &amp;&amp; <span class="built_in">echo</span> <span class="variable">$TZ</span> &gt; /etc/timezone</span></span><br><span class="line"><span class="comment"># 拷贝jar包</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> docker-demo.jar /app.jar</span></span><br><span class="line"><span class="comment"># 入口</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>是不是简单多了。</p><h3 id="2-3-3-构建镜像"><a href="#2-3-3-构建镜像" class="headerlink" title="2.3.3.构建镜像"></a>2.3.3.构建镜像</h3><p>当 <strong>Dockerfile</strong> 文件写好以后，就可以利用命令来构建镜像了</p><p>准备好了一个demo项目及对应的 <strong>Dockerfile</strong></p><p><img src="/img/load.gif" data-original="/images/environment/docker/docker/a/v6.png" alt="命令关系"></p><p>首先，我们将课前资料提供的<code>docker-demo.jar</code>包以及<code>Dockerfile</code>拷贝到虚拟机的<code>/root/demo</code>目录：</p><p><img src="/img/load.gif" data-original="/images/environment/docker/docker/a/v7.png" alt="命令关系"></p><p>然后，执行命令，构建镜像：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入镜像目录</span></span><br><span class="line"><span class="built_in">cd</span> /root/demo</span><br><span class="line"><span class="comment"># 开始构建</span></span><br><span class="line">docker build -t docker-demo:1.0 .</span><br></pre></td></tr></table></figure><p>命令说明：</p><ul><li><code>docker build </code>: 就是构建一个docker镜像</li><li><code>-t docker-demo:1.0</code> ：<code>-t</code>参数是指定镜像的名称（<code>repository</code>和<code>tag</code>）</li><li><code>.</code> : 最后的点是指构建时Dockerfile所在路径，由于我们进入了demo目录，所以指定的是<code>.</code>代表当前目录，也可以直接指定Dockerfile目录：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 直接指定Dockerfile目录</span></span><br><span class="line">docker build -t docker-demo:1.0 /root/demo</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="/img/load.gif" data-original="/images/environment/docker/docker/a/v8.png" alt="命令关系"></p><p>查看镜像列表：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看镜像列表：</span></span><br><span class="line">docker images</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">docker-demo   1.0       d6ab0b9e64b9   27 minutes ago   327MB</span><br><span class="line">nginx         latest    605c77e624dd   16 months ago    141MB</span><br><span class="line">mysql         latest    3218b38490ce   17 months ago    516MB</span><br></pre></td></tr></table></figure><p>然后尝试运行该镜像：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.创建并运行容器</span></span><br><span class="line">docker run -d --name <span class="built_in">dd</span> -p 8080:8080 docker-demo:1.0</span><br><span class="line"><span class="comment"># 2.查看容器</span></span><br><span class="line">dps</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">CONTAINER ID   IMAGE             PORTS                                                  STATUS         NAMES</span><br><span class="line">78a000447b49   docker-demo:1.0   0.0.0.0:8080-&gt;8080/tcp, :::8090-&gt;8090/tcp              Up 2 seconds   <span class="built_in">dd</span></span><br><span class="line">f63cfead8502   mysql             0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp   Up 2 hours     mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.访问</span></span><br><span class="line">curl localhost:8080/hello/count</span><br><span class="line"><span class="comment"># 结果：</span></span><br><span class="line">&lt;h5&gt;欢迎访问黑马商城, 这是您第1次访问&lt;h5&gt;</span><br></pre></td></tr></table></figure><h2 id="2-4-网络"><a href="#2-4-网络" class="headerlink" title="2.4.网络"></a>2.4.网络</h2><p>我们创建了一个Java项目的容器，而Java项目往往需要访问其它各种中间件，例如MySQL、Redis等。现在，我们的容器之间能否互相访问呢？我们来测试一下</p><p>首先，我们查看下MySQL容器的详细信息，重点关注其中的网络IP地址：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.用基本命令，寻找Networks.bridge.IPAddress属性</span></span><br><span class="line">docker inspect mysql</span><br><span class="line"><span class="comment"># 也可以使用format过滤结果</span></span><br><span class="line">docker inspect --format=<span class="string">&#x27;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;println .IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27;</span> mysql</span><br><span class="line"><span class="comment"># 得到IP地址如下：</span></span><br><span class="line">172.17.0.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.然后通过命令进入dd容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it <span class="built_in">dd</span> bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.在容器内，通过ping命令测试网络</span></span><br><span class="line">ping 172.17.0.2</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.053 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=2 ttl=64 time=0.059 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=3 ttl=64 time=0.058 ms</span><br></pre></td></tr></table></figure><p>发现可以互联，没有问题。</p><p>但是，容器的网络IP其实是一个虚拟的IP，其值并不固定与某一个容器绑定，如果我们在开发时写死某个IP，而在部署时很可能MySQL容器的IP会发生变化，连接会失败。</p><p>所以，我们必须借助于docker的网络功能来解决这个问题，官方文档：</p><p><a href="https://docs.docker.com/engine/reference/commandline/network/">https://docs.docker.com/engine/reference/commandline/network/</a></p><p>常见命令有：</p><table><thead><tr><th align="left"><strong>命令</strong></th><th align="left"><strong>说明</strong></th><th align="left"><strong>文档地址</strong></th></tr></thead><tbody><tr><td align="left">docker network create</td><td align="left">创建一个网络</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/network_create/">docker network create</a></td></tr><tr><td align="left">docker network ls</td><td align="left">查看所有网络</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/network_ls/">docs.docker.com</a></td></tr><tr><td align="left">docker network rm</td><td align="left">删除指定网络</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/network_rm/">docs.docker.com</a></td></tr><tr><td align="left">docker network prune</td><td align="left">清除未使用的网络</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/network_prune/">docs.docker.com</a></td></tr><tr><td align="left">docker network connect</td><td align="left">使指定容器连接加入某网络</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/network_connect/">docs.docker.com</a></td></tr><tr><td align="left">docker network disconnect</td><td align="left">使指定容器连接离开某网络</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/network_disconnect/">docker network disconnect</a></td></tr><tr><td align="left">docker network inspect</td><td align="left">查看网络详细信息</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/network_inspect/">docker network inspect</a></td></tr></tbody></table><p>教学演示：自定义网络</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.首先通过命令创建一个网络</span></span><br><span class="line">docker network create hmall</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.然后查看网络</span></span><br><span class="line">docker network <span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 结果：</span></span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">639bc44d0a87   bridge    bridge    <span class="built_in">local</span></span><br><span class="line">403f16ec62a2   hmall     bridge    <span class="built_in">local</span></span><br><span class="line">0dc0f72a0fbb   host      host      <span class="built_in">local</span></span><br><span class="line">cd8d3e8df47b   none      null      <span class="built_in">local</span></span><br><span class="line"><span class="comment"># 其中，除了hmall以外，其它都是默认的网络</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.让dd和mysql都加入该网络，注意，在加入网络时可以通过--alias给容器起别名</span></span><br><span class="line"><span class="comment"># 这样该网络内的其它容器可以用别名互相访问！</span></span><br><span class="line"><span class="comment"># 3.1.mysql容器，指定别名为db，另外每一个容器都有一个别名是容器名</span></span><br><span class="line">docker network connect hmall mysql --<span class="built_in">alias</span> db</span><br><span class="line"><span class="comment"># 3.2.db容器，也就是我们的java项目</span></span><br><span class="line">docker network connect hmall <span class="built_in">dd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.进入dd容器，尝试利用别名访问db</span></span><br><span class="line"><span class="comment"># 4.1.进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it <span class="built_in">dd</span> bash</span><br><span class="line"><span class="comment"># 4.2.用db别名访问</span></span><br><span class="line">ping db</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">PING db (172.18.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from mysql.hmall (172.18.0.2): icmp_seq=1 ttl=64 time=0.070 ms</span><br><span class="line">64 bytes from mysql.hmall (172.18.0.2): icmp_seq=2 ttl=64 time=0.056 ms</span><br><span class="line"><span class="comment"># 4.3.用容器名访问</span></span><br><span class="line">ping mysql</span><br><span class="line"><span class="comment"># 结果：</span></span><br><span class="line">PING mysql (172.18.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from mysql.hmall (172.18.0.2): icmp_seq=1 ttl=64 time=0.044 ms</span><br><span class="line">64 bytes from mysql.hmall (172.18.0.2): icmp_seq=2 ttl=64 time=0.054 ms</span><br></pre></td></tr></table></figure><p>OK，现在无需记住IP地址也可以实现容器互联了。</p><p><strong>总结</strong>：</p><ul><li>在自定义网络中，可以给容器起多个别名，默认的别名是容器名本身</li><li>在同一个自定义网络中的容器，可以通过别名互相访问</li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis安装说明</title>
      <link href="/posts/6b830637.html"/>
      <url>/posts/6b830637.html</url>
      
        <content type="html"><![CDATA[<p><img src="/img/load.gif" data-original="https://pic.crazytaxii.com/Redis_Logo.png"></p><h1 id="Redis安装说明"><a href="#Redis安装说明" class="headerlink" title="Redis安装说明"></a>Redis安装说明</h1><p>大多数企业都是基于Linux服务器来部署项目，而且Redis官方也没有提供Windows版本的安装包。因此我们会基于Linux系统来安装Redis。</p><p>此处选择的Linux版本为CentOS 7.</p><p>Redis的官方网站地址：<a href="https://redis.io/">https://redis.io/</a></p><h1 id="1-单机安装Redis"><a href="#1-单机安装Redis" class="headerlink" title="1.单机安装Redis"></a>1.单机安装Redis</h1><h2 id="1-1-安装Redis依赖"><a href="#1-1-安装Redis依赖" class="headerlink" title="1.1 安装Redis依赖"></a>1.1 安装Redis依赖</h2><p>Redis是基于C语言编写的，因此首先需要安装 <strong>Redis</strong> 所需要的 <strong>gcc</strong> 依赖：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install -y gcc tcl</span><br></pre></td></tr></table></figure><h2 id="1-2上传安装包并解压"><a href="#1-2上传安装包并解压" class="headerlink" title="1.2上传安装包并解压"></a>1.2上传安装包并解压</h2><p>然后将课前资料提供的 <strong>Redis</strong> 安装包上传到虚拟机的任意目录：</p><p><img src="/img/load.gif" data-original="/images/environment/database/redis/a/image-20211211071712536.png" alt="image-20211211071712536"></p><p>例如，我放到了&#x2F;usr&#x2F;local&#x2F;src 目录：</p><p><img src="/img/load.gif" data-original="/images/environment/database/redis/a/image-20211211080151539.png" alt="image-20211211080151539"></p><p>解压缩：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar -xzf redis-6.2.6.tar.gz</span><br></pre></td></tr></table></figure><p>解压后：</p><p><img src="/img/load.gif" data-original="/images/environment/database/redis/a/image-20211211080339076.png" alt="image-20211211080339076"></p><p>进入redis目录：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> redis-6.2.6</span><br></pre></td></tr></table></figure><p>运行编译命令：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>如果没有出错，应该就安装成功了。</p><p>默认的安装路径是在 <code>/usr/local/bin</code>目录下：</p><p><img src="/img/load.gif" data-original="/images/environment/database/redis/a/image-20211211080603710.png" alt="image-20211211080603710"></p><p>该目录以及默认配置到环境变量，因此可以在任意目录下运行这些命令。其中：</p><ul><li>redis-cli：是redis提供的命令行客户端</li><li>redis-server：是redis的服务端启动脚本</li><li>redis-sentinel：是redis的哨兵启动脚本</li></ul><h2 id="1-3-启动"><a href="#1-3-启动" class="headerlink" title="1.3.启动"></a>1.3.启动</h2><p>redis的启动方式有很多种，例如：</p><ul><li>默认启动</li><li>指定配置启动</li><li>开机自启</li></ul><h3 id="1-3-1-默认启动"><a href="#1-3-1-默认启动" class="headerlink" title="1.3.1.默认启动"></a>1.3.1.默认启动</h3><p>安装完成后，在任意目录输入redis-server命令即可启动Redis：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-server</span><br></pre></td></tr></table></figure><p>如图：</p><p><img src="/img/load.gif" data-original="/images/environment/database/redis/a/image-20211211081716167.png" alt="image-20211211081716167"></p><p>这种启动属于<code>前台启动</code>，会阻塞整个会话窗口，窗口关闭或者按下<code>CTRL + C</code>则Redis停止。不推荐使用。</p><h3 id="1-3-2-指定配置启动"><a href="#1-3-2-指定配置启动" class="headerlink" title="1.3.2.指定配置启动"></a>1.3.2.指定配置启动</h3><p>如果要让Redis以<code>后台</code>方式启动，则必须修改Redis配置文件，就在我们之前解压的redis安装包下（<code>/usr/local/src/redis-6.2.6</code>），名字叫redis.conf：</p><p><img src="/img/load.gif" data-original="/images/environment/database/redis/a/image-20211211082225509.png" alt="image-20211211082225509"></p><p>我们先将这个配置文件备份一份：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp redis.conf redis.conf.bck</span><br></pre></td></tr></table></figure><p>然后修改redis.conf文件中的一些配置：</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 允许访问的地址，默认是127.0.0.1，会导致只能在本地访问。修改为0.0.0.0则可以在任意IP访问，生产环境不要设置为0.0.0.0</span></span><br><span class="line"><span class="attr">bind</span> <span class="string">0.0.0.0</span></span><br><span class="line"><span class="comment"># 守护进程，修改为yes后即可后台运行</span></span><br><span class="line"><span class="attr">daemonize</span> <span class="string">yes </span></span><br><span class="line"><span class="comment"># 密码，设置后访问Redis必须输入密码</span></span><br><span class="line"><span class="attr">requirepass</span> <span class="string">123321</span></span><br></pre></td></tr></table></figure><p>Redis的其它常见配置：</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 监听的端口</span></span><br><span class="line"><span class="attr">port</span> <span class="string">6379</span></span><br><span class="line"><span class="comment"># 工作目录，默认是当前目录，也就是运行redis-server时的命令，日志、持久化等文件会保存在这个目录</span></span><br><span class="line"><span class="attr">dir</span> <span class="string">.</span></span><br><span class="line"><span class="comment"># 数据库数量，设置为1，代表只使用1个库，默认有16个库，编号0~15</span></span><br><span class="line"><span class="attr">databases</span> <span class="string">1</span></span><br><span class="line"><span class="comment"># 设置redis能够使用的最大内存</span></span><br><span class="line"><span class="attr">maxmemory</span> <span class="string">512mb</span></span><br><span class="line"><span class="comment"># 日志文件，默认为空，不记录日志，可以指定日志文件名</span></span><br><span class="line"><span class="attr">logfile</span> <span class="string">&quot;redis.log&quot;</span></span><br></pre></td></tr></table></figure><p>启动Redis：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入redis安装目录 </span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/src/redis-6.2.6</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">redis-server redis.conf</span><br></pre></td></tr></table></figure><p>停止服务：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 利用redis-cli来执行 shutdown 命令，即可停止 Redis 服务，</span></span><br><span class="line"><span class="comment"># 因为之前配置了密码，因此需要通过 -u 来指定密码</span></span><br><span class="line">redis-cli -u 123321 shutdown</span><br></pre></td></tr></table></figure><h3 id="1-3-3-开机自启"><a href="#1-3-3-开机自启" class="headerlink" title="1.3.3.开机自启"></a>1.3.3.开机自启</h3><p>我们也可以通过配置来实现开机自启。</p><p>首先，新建一个系统服务文件：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi /etc/systemd/system/redis.service</span><br></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=redis-server</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/bin/redis-server /usr/local/src/redis-6.2.6/redis.conf</span><br><span class="line">PrivateTmp=true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>然后重载系统服务：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><p>现在，我们可以用下面这组命令来操作redis了：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl start redis</span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">systemctl stop redis</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">systemctl restart redis</span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">systemctl status redis</span><br></pre></td></tr></table></figure><p>执行下面的命令，可以让redis开机自启：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> redis</span><br></pre></td></tr></table></figure><h1 id="2-Redis客户端"><a href="#2-Redis客户端" class="headerlink" title="2.Redis客户端"></a>2.Redis客户端</h1><p>安装完成Redis，我们就可以操作Redis，实现数据的CRUD了。这需要用到Redis客户端，包括：</p><ul><li>命令行客户端</li><li>图形化桌面客户端</li><li>编程客户端</li></ul><h2 id="2-1-Redis命令行客户端"><a href="#2-1-Redis命令行客户端" class="headerlink" title="2.1.Redis命令行客户端"></a>2.1.Redis命令行客户端</h2><p>Redis安装完成后就自带了命令行客户端：redis-cli，使用方式如下：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">redis-cli [options] [commonds]</span><br></pre></td></tr></table></figure><p>其中常见的options有：</p><ul><li><code>-h 127.0.0.1</code>：指定要连接的redis节点的IP地址，默认是127.0.0.1</li><li><code>-p 6379</code>：指定要连接的redis节点的端口，默认是6379</li><li><code>-a 123321</code>：指定redis的访问密码</li></ul><p>其中的commonds就是Redis的操作命令，例如：</p><ul><li><code>ping</code>：与redis服务端做心跳测试，服务端正常会返回<code>pong</code></li></ul><p>不指定commond时，会进入<code>redis-cli</code>的交互控制台：</p><p><img src="/img/load.gif" data-original="/images/environment/database/redis/a/image-20211211110439353.png" alt="image-20211211110439353"></p><h2 id="2-2-图形化桌面客户端"><a href="#2-2-图形化桌面客户端" class="headerlink" title="2.2.图形化桌面客户端"></a>2.2.图形化桌面客户端</h2><p>GitHub上的大神编写了Redis的图形化桌面客户端，地址：<a href="https://github.com/uglide/RedisDesktopManager">https://github.com/uglide/RedisDesktopManager</a></p><p>不过该仓库提供的是RedisDesktopManager的源码，并未提供windows安装包。</p><p>在下面这个仓库可以找到安装包：<a href="https://github.com/lework/RedisDesktopManager-Windows/releases">https://github.com/lework/RedisDesktopManager-Windows/releases</a></p><p><img src="/img/load.gif" data-original="/images/environment/database/redis/a/image-20211211111351885.png" alt="image-20211211111351885"></p><h3 id="2-2-1-安装"><a href="#2-2-1-安装" class="headerlink" title="2.2.1.安装"></a>2.2.1.安装</h3><p>在课前资料中可以找到Redis的图形化桌面客户端：</p><p><img src="/img/load.gif" data-original="/images/environment/database/redis/a/image-20211214154938770.png" alt="image-20211214154938770"></p><p>解压缩后，运行安装程序即可安装：</p><p><img src="/img/load.gif" data-original="/images/environment/database/redis/a/image-20211214155123841.png" alt="image-20211214155123841"></p><p>此处略。</p><p>安装完成后，在安装目录下找到rdm.exe文件：</p><p><img src="/img/load.gif" data-original="/images/environment/database/redis/a/image-20211211110935819.png" alt="image-20211211110935819"></p><p>双击即可运行：</p><p><img src="/img/load.gif" data-original="/images/environment/database/redis/a/image-20211214155406692.png" alt="image-20211214155406692"></p><h3 id="2-2-2-建立连接"><a href="#2-2-2-建立连接" class="headerlink" title="2.2.2.建立连接"></a>2.2.2.建立连接</h3><p>点击左上角的<code>连接到Redis服务器</code>按钮：</p><p><img src="/img/load.gif" data-original="/images/environment/database/redis/a/image-20211214155424842.png" alt="image-20211214155424842"></p><p>在弹出的窗口中填写Redis服务信息：</p><p><img src="/img/load.gif" data-original="/images/environment/database/redis/a/image-20211211111614483.png" alt="image-20211211111614483"></p><p>点击确定后，在左侧菜单会出现这个链接：</p><p><img src="/img/load.gif" data-original="/images/environment/database/redis/a/image-20211214155804523.png" alt="image-20211214155804523"></p><p>点击即可建立连接了：</p><p><img src="/img/load.gif" data-original="/images/environment/database/redis/a/image-20211214155849495.png" alt="image-20211214155849495"></p><p>Redis默认有16个仓库，编号从0至15.  通过配置文件可以设置仓库数量，但是不超过16，并且不能自定义仓库名称。</p><p>如果是基于redis-cli连接Redis服务，可以通过select命令来选择数据库：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 选择 0号库</span></span><br><span class="line"><span class="keyword">select</span> 0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware</title>
      <link href="/posts/545a6120.html"/>
      <url>/posts/545a6120.html</url>
      
        <content type="html"><![CDATA[<p><img src="/img/load.gif" data-original="https://www.abackup.com/easybackup-tutorials/images/backup-vmware/vmware-workstation.png" alt="VMware虚拟机"></p><h1 id="什么是虚拟机"><a href="#什么是虚拟机" class="headerlink" title="什么是虚拟机"></a>什么是虚拟机</h1><p>虚拟机是指软件模拟的具有完整硬件系统功能的，运行在一个完全隔离环境中的完整计算系统，在实体计算机中能够完成的工作，在虚拟机中都能够实现。</p><hr><h1 id="VMware-简介"><a href="#VMware-简介" class="headerlink" title="VMware 简介"></a>VMware 简介</h1><blockquote><p>简而言之，<a href="https://www.vmware.com/"><strong>VMware</strong></a>（链接位于 <strong>ibm.com</strong> 外部）主要用于开发虚拟化软件。</p><p>虚拟化软件会在计算机硬件上创建一个抽象层，从而能够将单台计算机的硬件要素（处理器、内存、存储等）分成多个虚拟计算机（通常称为虚拟机 ( <strong>VM</strong> )）。 每个虚拟机都运行自己的操作系统 ( <strong>OS</strong> )，其行为就像一台独立的计算机，而实际上它只是在一部分底层计算机硬件上运行。</p></blockquote><h2 id="Ⅰ大概介绍"><a href="#Ⅰ大概介绍" class="headerlink" title="Ⅰ大概介绍"></a>Ⅰ大概介绍</h2><p><strong>VMware</strong> 虚拟机软件是一个虚拟 <strong>PC</strong> 软件，它可以让你在一台电脑上运行一个或多个操作系统。</p><h2 id="Ⅱ-详细介绍"><a href="#Ⅱ-详细介绍" class="headerlink" title="Ⅱ 详细介绍"></a>Ⅱ 详细介绍</h2><p><strong>VMware</strong>  是一款功能强大的桌面虚拟计算机软件，提供用户可在单一的桌面上同时运行不同的操作系统，和进行开发、测试 、部署新的应用程序的最佳解决方案。<strong>VMware</strong> 可在一部实体机器上模拟完整的网络环境，以及可便于携带的虚拟机器，其更好的灵活性与先进的技术胜过了市面上其他的虚拟计算机软件。</p><hr><h1 id="VMware-下载"><a href="#VMware-下载" class="headerlink" title="VMware 下载"></a>VMware 下载</h1><h2 id="Ⅰ-官网地址"><a href="#Ⅰ-官网地址" class="headerlink" title="Ⅰ 官网地址"></a>Ⅰ 官网地址</h2><p><a href="https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html">下载 VMware Workstation Pro | CN</a></p><h2 id="Ⅱ-网盘下载"><a href="#Ⅱ-网盘下载" class="headerlink" title="Ⅱ 网盘下载"></a>Ⅱ 网盘下载</h2><p>打开浏览器搜索 <strong>VMware</strong> 下载，然后打开帖子，复制网盘下载。</p><p>或者打开 <a href="https://www.bilibili.com/"><code>B 站</code></a> ，进行搜索。</p><hr><h1 id="VMware-安装"><a href="#VMware-安装" class="headerlink" title="VMware 安装"></a>VMware 安装</h1><p><img src="/img/load.gif" data-original="/images/tools/vm/a/v1.png" alt="VM安装"></p><p><strong>VMware</strong> 安装，点击下一步</p><p><img src="/img/load.gif" data-original="/images/tools/vm/a/v2.png" alt="VM安装"></p><p>接受协议，下一步</p><p><img src="/img/load.gif" data-original="/images/tools/vm/a/v3.png" alt="VM安装"></p><p>自定义 <strong>VMware</strong> 安装位置，下一步</p><p><img src="/img/load.gif" data-original="/images/tools/vm/a/v4.png" alt="VM安装"></p><p>勾选快捷方式，下一步</p><p><img src="/img/load.gif" data-original="/images/tools/vm/a/v5.png" alt="VM安装"></p><p>安装 <strong>VMware</strong> 虚拟机，点击完成即可。</p><hr><h1 id="VMware-新建虚拟机"><a href="#VMware-新建虚拟机" class="headerlink" title="VMware 新建虚拟机"></a>VMware 新建虚拟机</h1><p><strong>① 创建新的虚拟机</strong></p><p><img src="/img/load.gif" data-original="/images/tools/vm/a/v6.png" alt="VM安装"></p><p><strong>② 选择典型或自定义</strong></p><p><img src="/img/load.gif" data-original="/images/tools/vm/a/v7.png" alt="VM安装"></p><p><strong>③ 安装系统驱动</strong></p><p><img src="/img/load.gif" data-original="/images/tools/vm/a/v8.png" alt="VM安装"></p><p><strong>④ 下载 Linux 镜像</strong></p><p>网易开源镜像站:<a href="http://mirrors.163.com/">http://mirrors.163.com/</a><br>阿里云官方镜像站:<a href="http://mirrors.aliyun.com/">http://mirrors.aliyun.com</a></p><p>可选 <strong>Centos</strong> 或 <strong>Unbtor</strong></p><div style="display: flex;             justify-content: center;             gap: 10px;             padding: 10px;             background-color: #fff;             border-radius: 10px;             box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);             text-align: center;">    <img src="/img/load.gif" data-original="https://imcn.me/wp-content/uploads/2014/07/centos-logo.jpg" alt="Image 1" style="width: 60%; border-radius: 10px;">    <img src="/img/load.gif" data-original="https://p1.ssl.qhimg.com/t01244e5eda16b4451f.png" alt="Image 2" style="width: 45%; border-radius: 10px;"></div>**⑤ 配置信息**<p><img src="/img/load.gif" data-original="/images/tools/vm/a/v9.png" alt="VM安装"></p><p><strong>⑥ 自定义名称和路径</strong></p><p><img src="/img/load.gif" data-original="/images/tools/vm/a/v10.png" alt="VM安装"></p><p><strong>⑦ 设置磁盘</strong></p><p><img src="/img/load.gif" data-original="/images/tools/vm/a/v11.png" alt="VM安装"></p><p><strong>⑧ 配置硬件</strong></p><p><img src="/img/load.gif" data-original="/images/tools/vm/a/v12.png" alt="VM安装"></p><p><strong>⑨ 点击完成</strong></p><p><img src="/img/load.gif" data-original="/images/tools/vm/a/v13.png" alt="VM安装"></p><p>即可完成创建：</p><p><img src="/img/load.gif" data-original="/images/tools/vm/a/v14.png" alt="VM安装"></p><hr><h1 id="安装-Centos7"><a href="#安装-Centos7" class="headerlink" title="安装 Centos7"></a>安装 Centos7</h1><p>接下来，我们启动刚刚创建的虚拟机，开始安装 <code>Centos7</code> 系统：</p><p><img src="/img/load.gif" data-original="/images/tools/vm/a/v14.png" alt="VM安装"></p><p>启动后需要选择安装菜单，将鼠标移入黑窗口中后，将无法再使用鼠标，需要按上下键选择菜单。选中 <strong>Install Centos 7</strong> 后按下回车：</p><p><img src="/img/load.gif" data-original="/images/tools/vm/a/v17.png" alt="VM安装"></p><p>然后会提示我们按下 <strong>enter</strong> 键继续：</p><p><img src="/img/load.gif" data-original="/images/tools/vm/a/v18.png" alt="VM安装"></p><p>过一会儿后，会进入语言选择菜单，这里可以使用鼠标选择。选择中文-简体中文，然后继续：</p><p><img src="/img/load.gif" data-original="/images/tools/vm/a/v19.png" alt="VM安装"></p><p>接下来，会进入安装配置页面：</p><p><img src="/img/load.gif" data-original="/images/tools/vm/a/v20.png" alt="VM安装"></p><p>鼠标向下滚动后，找到系统安装位置配置，点击：</p><p><img src="/img/load.gif" data-original="/images/tools/vm/a/v21.png" alt="VM安装"></p><p>选择刚刚添加的磁盘，并点击完成：</p><p><img src="/img/load.gif" data-original="/images/tools/vm/a/v22.png" alt="VM安装"></p><p>然后回到配置页面，这次点击《网络和主机名》：</p><p><img src="/img/load.gif" data-original="/images/tools/vm/a/v23.png" alt="VM安装"></p><p>在网络页面做下面的几件事情：</p><ol><li>修改主机名为自己喜欢的主机名，不要出现中文和特殊字符，建议用localhost</li><li>点击应用</li><li>将网络连接打开</li><li>点击配置，设置详细网络信息</li></ol><p><img src="/img/load.gif" data-original="/images/tools/vm/a/v24.png" alt="VM安装"></p><p>本机网络详细信息：</p><p><img src="/img/load.gif" data-original="/images/tools/vm/a/v25.png" alt="VM安装"></p><p>点击配置按钮后，我们需要把网卡地址改为静态IP，这样可以避免每次启动虚拟机IP都变化。所有配置照搬你自己截图的网络信息填写：</p><p><img src="/img/load.gif" data-original="/images/tools/vm/a/v26.png" alt="VM安装"></p><p>最后，点击完成按钮：</p><p><img src="/img/load.gif" data-original="/images/tools/vm/a/v27.png" alt="VM安装"></p><p>回到配置界面后，点击<code>开始安装</code>：</p><p><img src="/img/load.gif" data-original="/images/tools/vm/a/v28.png" alt="VM安装"></p><p>接下来需要设置root密码：</p><p><img src="/img/load.gif" data-original="/images/tools/vm/a/v29.png" alt="VM安装"></p><p>填写你要使用的root密码，然后点击完成：</p><p><img src="/img/load.gif" data-original="/images/tools/vm/a/v30.png" alt="VM安装"></p><p>接下来，耐心等待安装即可。</p><p><img src="/img/load.gif" data-original="/images/tools/vm/a/v31.png" alt="VM安装"></p><p>等待安装完成后，点击<strong>重启</strong>：</p><p><img src="/img/load.gif" data-original="/images/tools/vm/a/v32.png" alt="VM安装"></p><p>输入密码即可登录：</p><p><img src="/img/load.gif" data-original="/images/tools/vm/a/v15.png" alt="VM技巧"></p><p><img src="/img/load.gif" data-original="/images/tools/vm/a/v16.png" alt="VM技巧"></p><p>打开中端输入密码切换 root 用户：</p><p><img src="/img/load.gif" data-original="/images/tools/vm/a/v33.png" alt="VM安装"></p><p>此时你要输入密码，不过需要注意的是密码是<strong>隐藏</strong>的，输入了也看不见。所以放心输入，完成后回车即可：</p><p><img src="/img/load.gif" data-original="/images/tools/vm/a/v34.png" alt="VM安装"></p><p>测试网络是否通畅：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure><p>如果看到这样的结果代表网络畅通：</p><p><img src="/img/load.gif" data-original="/images/tools/vm/a/v35.png" alt="VM安装"></p><p>默认ping命令会持续执行，按下<code>CTRL </code>+ <code>C</code>后命令即可停止。</p><hr><h1 id="设置虚拟机快照"><a href="#设置虚拟机快照" class="headerlink" title="设置虚拟机快照"></a>设置虚拟机快照</h1><p>在虚拟机安装完成后，最好立刻设置一个快照，这样一旦将来虚拟机出现问题，可以快速恢复。</p><p>我们先停止虚拟机，点击 <strong>VMware</strong> 顶部菜单中的<code>暂停</code>**<code>下拉选框</code>**，选择<code>关闭客户机</code>：</p><p><img src="/img/load.gif" data-original="/images/tools/vm/a/v36.png" alt="VM快照"></p><p>接着，点击VMware菜单中的🔧按钮:</p><p><img src="/img/load.gif" data-original="/images/tools/vm/a/v37.png" alt="VM快照"></p><p>然后在弹出的快照管理窗口中，点击 <strong>拍摄快照</strong>，填写新的快照信息：</p><p><img src="/img/load.gif" data-original="/images/tools/vm/a/v38.png" alt="VM快照"></p><p>快照拍摄完成了！而且我们可以在不同阶段拍摄多个不同快照作为备份，方便后期恢复数据。</p><p>假如以后虚拟机文件受损，需要恢复到初始状态的话，可以选中要恢复的快照，点击转到即可：</p><p><img src="/img/load.gif" data-original="/images/tools/vm/a/v39.png" alt="VM快照"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MybatisPlus</title>
      <link href="/posts/8af9e237.html"/>
      <url>/posts/8af9e237.html</url>
      
        <content type="html"><![CDATA[<h1 id="MybatisPlus简介"><a href="#MybatisPlus简介" class="headerlink" title="MybatisPlus简介"></a>MybatisPlus简介</h1><p>在日常开发生活中，单表的 <strong>CRUD</strong> 功能代码重复度很高，也没什么难度，但是这部分代码的开发量往往却比较大，开发起来相当费时。</p><p>因此，目前企业中会使用一些组件来简化 <strong>CRUD</strong> 开发工作，而国内，使用最多的一个组件就是 <strong>MybatisPlus</strong> 。</p><p>官方网站如下：</p><p><a href="https://baomidou.com/"><img src="/img/load.gif" data-original="/images/frameworks/Java/mybatisplus/a/v1.png" alt="https://baomidou.com"></a></p><p><strong>MybatisPlus</strong> 不仅仅可以简化单表操作，而且还对 <strong>Mybatis</strong> 进行了增强。可以让我们能够简单高效地进行开发。</p><p>我们需要掌握的内容如下：</p><ul><li><p>能利用 <strong>MybatisPlus</strong> 实现基本的 <strong>CRUD</strong></p></li><li><p>使用条件构造器构建查询和更新语句</p></li><li><p>掌握 <strong>MybatisPlus</strong> 中常用的注解</p></li><li><p>会使用 <strong>MybatisPlus</strong> 处理枚举类、<strong>JSON</strong> 类型字段</p></li><li><p>会使用 <strong>MybatisPlus</strong> 实现分页</p></li></ul><hr><h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><p>创建一个 <strong>MybatisPlus</strong> 项目，并准备一些基础数据。</p><p><img src="/img/load.gif" data-original="/images/frameworks/Java/mybatisplus/a/v2.png" alt="MybatisPlus项目"></p><h2 id="Ⅰ环境准备"><a href="#Ⅰ环境准备" class="headerlink" title="Ⅰ环境准备"></a>Ⅰ环境准备</h2><p>① 打开 <strong>IDEA</strong> 导入 <strong>MybatisPlus</strong> 项目</p><p>② 打开 <strong>navicat</strong> 导入 <strong>mp.sql</strong> 文件</p><p><img src="/img/load.gif" data-original="/images/frameworks/Java/mybatisplus/a/v4.png" alt="配置数据库"></p><p>③ 配置项目 <strong>JDK</strong> 版本</p><p><img src="/img/load.gif" data-original="/images/frameworks/Java/mybatisplus/a/v3.png" alt="配置jdk"></p><p>④ 在 <strong>application.yml</strong> 文件中配置参数</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/mp?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.itheima:</span> <span class="string">debug</span></span><br><span class="line">  <span class="attr">pattern:</span></span><br><span class="line">    <span class="attr">dateformat:</span> <span class="string">HH:mm:ss</span></span><br></pre></td></tr></table></figure><h2 id="Ⅱ-快速开始"><a href="#Ⅱ-快速开始" class="headerlink" title="Ⅱ 快速开始"></a>Ⅱ 快速开始</h2><ul><li>引入 <strong>MybatisPlus</strong> 依赖</li><li>定义 <strong>Mapper</strong></li></ul><h3 id="①-引入依赖"><a href="#①-引入依赖" class="headerlink" title="① 引入依赖"></a>① 引入依赖</h3><p>**MybatisPlus **提供了 <strong>starter</strong>，实现了自动 <strong>Mybatis</strong> 以及 <strong>MybatisPlus</strong> 的自动装配功能，坐标如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis-plus-boot-starter--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>该依赖包含了对 <strong>mybatis</strong> 的自动装配，因此不需要 <strong>Mybatis</strong> 的 <strong>starter</strong> 。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis-plus-boot-starter--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数据库连接--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="②-定义-Mapper"><a href="#②-定义-Mapper" class="headerlink" title="② 定义 Mapper"></a>② 定义 Mapper</h3><p>为了简化单表 <strong>CRUD</strong> 开发，<strong>MybatisPlus</strong> 已经提供了一个基础的 <strong>BaseMapper</strong> 接口来实现单表 <strong>CRUD</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Mapper 继承该接口后，无需编写 mapper.xml 文件，即可获得CRUD功能</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;这个 Mapper 支持 id 泛型&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> hubin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2016-01-23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BaseMapper</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">Mapper</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入一条记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity 实体对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insert</span><span class="params">(T entity)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 ID 删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 主键ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteById</span><span class="params">(Serializable id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据实体(ID)删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity 实体对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 3.4.4</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteById</span><span class="params">(T entity)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 columnMap 条件，删除记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> columnMap 表字段 map 对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">int</span> <span class="title function_">deleteByMap</span><span class="params">(Map&lt;String, Object&gt; columnMap)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.delete(Wrappers.&lt;T&gt;query().allEq(columnMap));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 entity 条件，删除记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类（可以为 null,里面的 entity 用于生成 where 语句）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">delete</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除（根据ID或实体 批量删除）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> idList 主键ID列表或实体列表(不能为 null 以及 empty)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteBatchIds</span><span class="params">(<span class="meta">@Param(Constants.COLL)</span> Collection&lt;?&gt; idList)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 ID 修改</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity 实体对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateById</span><span class="params">(<span class="meta">@Param(Constants.ENTITY)</span> T entity)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 whereEntity 条件，更新记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity        实体对象 (set 条件值,可以为 null)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> updateWrapper 实体对象封装操作类（可以为 null,里面的 entity 用于生成 where 语句）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">update</span><span class="params">(<span class="meta">@Param(Constants.ENTITY)</span> T entity, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; updateWrapper)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 Wrapper 更新记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> updateWrapper &#123;<span class="doctag">@link</span> UpdateWrapper&#125; or &#123;<span class="doctag">@link</span> LambdaUpdateWrapper&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 3.5.4</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; updateWrapper)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> update(<span class="literal">null</span>, updateWrapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 ID 查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 主键ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    T <span class="title function_">selectById</span><span class="params">(Serializable id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询（根据ID 批量查询）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> idList 主键ID列表(不能为 null 以及 empty)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;T&gt; <span class="title function_">selectBatchIds</span><span class="params">(<span class="meta">@Param(Constants.COLL)</span> Collection&lt;? extends Serializable&gt; idList)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询（根据ID 批量查询）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> idList        idList 主键ID列表(不能为 null 以及 empty)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resultHandler resultHandler 结果处理器 &#123;<span class="doctag">@link</span> ResultHandler&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 3.5.4</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">selectBatchIds</span><span class="params">(<span class="meta">@Param(Constants.COLL)</span> Collection&lt;? extends Serializable&gt; idList, ResultHandler&lt;T&gt; resultHandler)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询（根据 columnMap 条件）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> columnMap 表字段 map 对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> List&lt;T&gt; <span class="title function_">selectByMap</span><span class="params">(Map&lt;String, Object&gt; columnMap)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.selectList(Wrappers.&lt;T&gt;query().allEq(columnMap));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询（根据 columnMap 条件）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> columnMap     表字段 map 对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resultHandler resultHandler 结果处理器 &#123;<span class="doctag">@link</span> ResultHandler&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 3.5.4</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">selectByMap</span><span class="params">(Map&lt;String, Object&gt; columnMap, ResultHandler&lt;T&gt; resultHandler)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.selectList(Wrappers.&lt;T&gt;query().allEq(columnMap), resultHandler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 entity 条件，查询一条记录</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;查询一条记录，例如 qw.last(&quot;limit 1&quot;) 限制取一条记录, 注意：多条数据会报异常&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类（可以为 null）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> T <span class="title function_">selectOne</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.selectOne(queryWrapper, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 entity 条件，查询一条记录，现在会根据&#123;<span class="doctag">@code</span> throwEx&#125;参数判断是否抛出异常，如果为false就直接返回一条数据</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;查询一条记录，例如 qw.last(&quot;limit 1&quot;) 限制取一条记录, 注意：多条数据会报异常&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类（可以为 null）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> throwEx      boolean 参数，为true如果存在多个结果直接抛出异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> T <span class="title function_">selectOne</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper, <span class="type">boolean</span> throwEx)</span> &#123;</span><br><span class="line">        List&lt;T&gt; list = <span class="built_in">this</span>.selectList(queryWrapper);</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> list.size();</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> list.get(<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (size &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (throwEx) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TooManyResultsException</span>(<span class="string">&quot;Expected one result (or null) to be returned by selectOne(), but found: &quot;</span> + size);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> list.get(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 Wrapper 条件，判断是否存在记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否存在记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">exists</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> <span class="built_in">this</span>.selectCount(queryWrapper);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span> != count &amp;&amp; count &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 Wrapper 条件，查询总记录数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类（可以为 null）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">selectCount</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 entity 条件，查询全部记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类（可以为 null）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;T&gt; <span class="title function_">selectList</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 entity 条件，查询全部记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper  实体对象封装操作类（可以为 null）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resultHandler 结果处理器 &#123;<span class="doctag">@link</span> ResultHandler&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 3.5.4</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">selectList</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper, ResultHandler&lt;T&gt; resultHandler)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 entity 条件，查询全部记录（并翻页）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page         分页查询条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类（可以为 null）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 3.5.3.2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;T&gt; <span class="title function_">selectList</span><span class="params">(IPage&lt;T&gt; page, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 entity 条件，查询全部记录（并翻页）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page          分页查询条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper  实体对象封装操作类（可以为 null）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resultHandler 结果处理器 &#123;<span class="doctag">@link</span> ResultHandler&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 3.5.4</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">selectList</span><span class="params">(IPage&lt;T&gt; page, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper, ResultHandler&lt;T&gt; resultHandler)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 Wrapper 条件，查询全部记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">selectMaps</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 Wrapper 条件，查询全部记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper  实体对象封装操作类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resultHandler 结果处理器 &#123;<span class="doctag">@link</span> ResultHandler&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 3.5.4</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">selectMaps</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper, ResultHandler&lt;Map&lt;String, Object&gt;&gt; resultHandler)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 Wrapper 条件，查询全部记录（并翻页）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page         分页查询条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 3.5.3.2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">selectMaps</span><span class="params">(IPage&lt;? extends Map&lt;String, Object&gt;&gt; page, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 Wrapper 条件，查询全部记录（并翻页）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page          分页查询条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper  实体对象封装操作类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resultHandler 结果处理器 &#123;<span class="doctag">@link</span> ResultHandler&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 3.5.4</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">selectMaps</span><span class="params">(IPage&lt;? extends Map&lt;String, Object&gt;&gt; page, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper, ResultHandler&lt;Map&lt;String, Object&gt;&gt; resultHandler)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 Wrapper 条件，查询全部记录</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;注意： 只返回第一个字段的值&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类（可以为 null）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;E&gt; List&lt;E&gt; <span class="title function_">selectObjs</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 Wrapper 条件，查询全部记录</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;注意： 只返回第一个字段的值&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper  实体对象封装操作类（可以为 null）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resultHandler 结果处理器 &#123;<span class="doctag">@link</span> ResultHandler&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 3.5.4</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;E&gt; <span class="keyword">void</span> <span class="title function_">selectObjs</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper, ResultHandler&lt;E&gt; resultHandler)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 entity 条件，查询全部记录（并翻页）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page         分页查询条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类（可以为 null）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> &lt;P <span class="keyword">extends</span> <span class="title class_">IPage</span>&lt;T&gt;&gt; P <span class="title function_">selectPage</span><span class="params">(P page, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span> &#123;</span><br><span class="line">        page.setRecords(selectList(page, queryWrapper));</span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 Wrapper 条件，查询全部记录（并翻页）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page         分页查询条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> &lt;P <span class="keyword">extends</span> <span class="title class_">IPage</span>&lt;Map&lt;String, Object&gt;&gt;&gt; P <span class="title function_">selectMapsPage</span><span class="params">(P page, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span> &#123;</span><br><span class="line">        page.setRecords(selectMaps(page, queryWrapper));</span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此我们只需要将自定义的 <strong>Mapper</strong> 实现 <strong>BaseMapper</strong> 接口，就无需自己实现 <strong>CRUD</strong> 。</p><p><img src="/img/load.gif" data-original="/images/frameworks/Java/mybatisplus/a/v5.png" alt="配置Mapper"></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mybatisplus.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mybatisplus.domain.entity.UserEntity;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;UserEntity&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="③-测试"><a href="#③-测试" class="headerlink" title="③ 测试"></a>③ 测试</h3><p>新建测试类，进行 <strong>CURD</strong> 测试：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mybatisplus;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONUtil;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.metadata.OrderItem;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.toolkit.Wrappers;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;</span><br><span class="line"><span class="keyword">import</span> com.mybatisplus.domain.entity.AddressEntity;</span><br><span class="line"><span class="keyword">import</span> com.mybatisplus.domain.entity.UserEntity;</span><br><span class="line"><span class="keyword">import</span> com.mybatisplus.eum.UserStatus;</span><br><span class="line"><span class="keyword">import</span> com.mybatisplus.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.mybatisplus.service.IAddressService;</span><br><span class="line"><span class="keyword">import</span> com.mybatisplus.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> jakarta.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest(classes = MyBatisPlusApplication.class)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyBatisPlusApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IAddressService addressService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ①查询出名字中带o的,存款大于等于1000元的用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testQueryMapper</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;UserEntity&gt; userEntityList = userMapper.selectList(Wrappers.lambdaQuery(UserEntity.class)</span><br><span class="line">                .like(UserEntity::getUsername, <span class="string">&quot;o&quot;</span>)</span><br><span class="line">                .ge(UserEntity::getBalance, <span class="number">1000</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;userEntityList ===&gt; &quot;</span>+userEntityList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ②更新用户名为Jack的用户余额为2000</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testUpdateMapper</span><span class="params">()</span> &#123;</span><br><span class="line">        userMapper.update(Wrappers.lambdaUpdate(UserEntity.class)</span><br><span class="line">                .set(UserEntity::getBalance, <span class="number">2000</span>)</span><br><span class="line">                .eq(UserEntity::getUsername, <span class="string">&quot;Jack&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ③基于UpdateWrapper的更新 更新id为1、2、4的用户余额,扣200</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testUpdateWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">        userMapper.update(<span class="literal">null</span>, Wrappers.&lt;UserEntity&gt;update().lambda()</span><br><span class="line">                .setSql(<span class="string">&quot;balance = balance - 200&quot;</span>)</span><br><span class="line">                .in(UserEntity::getId, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义SQL</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testCustomWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 1.准备自定义查询条件</span></span><br><span class="line">        List&lt;Long&gt; ids = List.of(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">4L</span>);</span><br><span class="line">        <span class="comment">// 2、定义条件</span></span><br><span class="line">        QueryWrapper&lt;UserEntity&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;UserEntity&gt;().in(<span class="string">&quot;id&quot;</span>, ids);</span><br><span class="line">        <span class="comment">// 3.调用mapper的自定义方法，直接传递Wrapper</span></span><br><span class="line">        userMapper.deductBalanceByIds(<span class="number">200</span>, wrapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量新增用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testInsertBatch</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;UserEntity&gt; userEntityList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">1000</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">            <span class="type">UserEntity</span> <span class="variable">userEntity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserEntity</span>();</span><br><span class="line">            userEntity.setUsername(<span class="string">&quot;user_&quot;</span> + i);</span><br><span class="line">            userEntity.setBalance(<span class="number">1000</span>+i);</span><br><span class="line"><span class="comment">//            userEntity.setInfo(1);</span></span><br><span class="line">            userEntity.setPhone(<span class="string">&quot;phone_&quot;</span>+i);</span><br><span class="line">            userEntity.setStatus(UserStatus.NORMAL);</span><br><span class="line">            userEntity.setPassword(<span class="string">&quot;password_&quot;</span>+i);</span><br><span class="line">            userEntity.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">            userEntity.setUpdateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"><span class="comment">//            userEntity.setInfo(JSONUtil.toJsonStr(1));</span></span><br><span class="line">            userEntityList.add(userEntity);</span><br><span class="line">            <span class="keyword">if</span> (i%<span class="number">1000</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                userService.saveBatch(userEntityList);</span><br><span class="line">                <span class="comment">//4、清空集合,准备下一批数据</span></span><br><span class="line">                userEntityList.clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">l1</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;耗时：&quot;</span>+(l1-l));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 地址逻辑删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1、删除</span></span><br><span class="line">        addressService.removeById(<span class="number">59L</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、查询</span></span><br><span class="line">        <span class="type">AddressEntity</span> <span class="variable">addressEntity</span> <span class="operator">=</span> addressService.getById(<span class="number">59L</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;addressEntity ===&gt; &quot;</span>+addressEntity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 枚举处理测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testService</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;UserEntity&gt; list = userService.list();</span><br><span class="line">        list.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testPageQuery</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 1.分页查询，new Page()的两个参数分别是：页码、每页大小</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">current</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        Page&lt;UserEntity&gt; page = Page.of(current, size);</span><br><span class="line">        <span class="comment">// 1.2、排序</span></span><br><span class="line">        page.addOrder(OrderItem.asc(<span class="string">&quot;balance&quot;</span>));</span><br><span class="line">        page.addOrder(OrderItem.desc(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">        Page&lt;UserEntity&gt; p = userService.page(page);</span><br><span class="line">        <span class="comment">// 2.总条数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;total = &quot;</span> + p.getTotal());</span><br><span class="line">        <span class="comment">// 3.总页数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;pages = &quot;</span> + p.getPages());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.数据</span></span><br><span class="line">        List&lt;UserEntity&gt; records = p.getRecords();</span><br><span class="line">        records.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Ⅲ-常见注解"><a href="#Ⅲ-常见注解" class="headerlink" title="Ⅲ 常见注解"></a>Ⅲ 常见注解</h2><p>在上述的案例中我们发现仅仅引入了依赖，继承了 <strong>BaseMapper</strong> 就能够使用 <strong>MybatisPlus</strong> 。但是问题是：</p><p><strong>MybatisPlus</strong> 是怎么知道我们要查询的是哪张表呢？表中有哪些字段呢？</p><p>其实在我们继承 BaseMapper 的时候，就给其指定了一个泛型：</p><p><img src="/img/load.gif" data-original="/images/frameworks/Java/mybatisplus/a/v5.png" alt="配置Mapper"></p><p>泛型中的 <strong>UserEntity</strong> 就是与数据库对应的 <strong>PO</strong> 实体</p><p><strong>MybatisPlus</strong> 就是根据 <strong>PO</strong> 实体的信息来推断出数据库表的信息，从而生成 <strong>SQL</strong>，默认情况是：</p><ul><li><strong>MybatisPlus</strong> 会把 <strong>PO</strong> 实体的类名驼峰转下划线作为表名</li><li><strong>MybatisPlus</strong> 会把 <strong>PO</strong> 实体的所有变量名驼峰转下划线作为表的字段名，并根据变量类型推断字段类型</li><li><strong>MybatisPlus</strong> 会把名为 <strong>id</strong> 的字段作为主键</li></ul><p>但在很多情况下，默认的实现与我们的实际场景不符，因此 <strong>MybatisPlus</strong> 提供了一些注解来让我们进行声明</p><h3 id="①-TableName"><a href="#①-TableName" class="headerlink" title="① @TableName"></a>① @TableName</h3><ul><li>描述：表名注解，标识实体类对应的表</li><li>使用位置：实体类</li></ul><p>示例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>TableName</strong> 的属性：</p><table><thead><tr><th><strong>属性</strong></th><th><strong>类型</strong></th><th><strong>必须指定</strong></th><th><strong>默认值</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>value</td><td>String</td><td>否</td><td>“”</td><td>表名</td></tr><tr><td>schema</td><td>String</td><td>否</td><td>“”</td><td>schema</td></tr><tr><td>keepGlobalPrefix</td><td>boolean</td><td>否</td><td>false</td><td>是否保持使用全局的 tablePrefix 的值（当全局 tablePrefix 生效时）</td></tr><tr><td>resultMap</td><td>String</td><td>否</td><td>“”</td><td>xml 中 resultMap 的 id（用于满足特定类型的实体类对象绑定）</td></tr><tr><td>autoResultMap</td><td>boolean</td><td>否</td><td>false</td><td>是否自动构建 resultMap 并使用（如果设置 resultMap 则不会进行 resultMap 的自动构建与注入）</td></tr><tr><td>excludeProperty</td><td>String[]</td><td>否</td><td>{}</td><td>需要排除的属性名 @since 3.3.1</td></tr></tbody></table><h3 id="②-TableId"><a href="#②-TableId" class="headerlink" title="② @TableId"></a>② @TableId</h3><ul><li>描述：主键注解，标识实体类中的主键字段</li><li>使用位置：实体类的主键字段</li></ul><p>示例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>TableId</strong> 的属性：</p><table><thead><tr><th align="left"><strong>属性</strong></th><th align="left"><strong>类型</strong></th><th align="left"><strong>必须指定</strong></th><th align="left"><strong>默认值</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left">value</td><td align="left">String</td><td align="left">否</td><td align="left">“”</td><td align="left">表名</td></tr><tr><td align="left">type</td><td align="left">Enum</td><td align="left">否</td><td align="left">IdType.NONE</td><td align="left">指定主键类型</td></tr></tbody></table><p>**IdType **支持的类型有：</p><table><thead><tr><th align="left"><strong>值</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left">AUTO</td><td align="left">数据库 ID 自增</td></tr><tr><td align="left">NONE</td><td align="left">无状态，该类型为未设置主键类型（注解里等于跟随全局，全局里约等于 INPUT）</td></tr><tr><td align="left">INPUT</td><td align="left">insert 前自行 set 主键值</td></tr><tr><td align="left">ASSIGN_ID</td><td align="left">分配 ID(主键类型为 Number(Long 和 Integer)或 String)(since 3.3.0),使用接口IdentifierGenerator的方法nextId(默认实现类为DefaultIdentifierGenerator雪花算法)</td></tr><tr><td align="left">ASSIGN_UUID</td><td align="left">分配 UUID,主键类型为 String(since 3.3.0),使用接口IdentifierGenerator的方法nextUUID(默认 default 方法)</td></tr><tr><td align="left">ID_WORKER</td><td align="left">分布式全局唯一 ID 长整型类型(please use ASSIGN_ID)</td></tr><tr><td align="left">UUID</td><td align="left">32 位 UUID 字符串(please use ASSIGN_UUID)</td></tr><tr><td align="left">ID_WORKER_STR</td><td align="left">分布式全局唯一 ID 字符串类型(please use ASSIGN_ID)</td></tr></tbody></table><p>这里比较常见的有三种：</p><ul><li><code>AUTO</code>：利用数据库的id自增长</li><li><code>INPUT</code>：手动生成id</li><li><code>ASSIGN_ID</code>：雪花算法生成<code>Long</code>类型的全局唯一id，这是默认的ID策略</li></ul><h3 id="③-TableField"><a href="#③-TableField" class="headerlink" title="③ @TableField"></a>③ @TableField</h3><ul><li>描述：普通字段的注解（与数据库字段匹配）</li><li>使用位置：<code>PO</code> 实体的普通字段</li></ul><p>示例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@TableField(&quot;isMarried&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean isMarried;</span><br><span class="line">    <span class="meta">@TableField(&quot;concat&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String concat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>TableField</strong> 的属性：</p><table><thead><tr><th><strong>属性</strong></th><th><strong>类型</strong></th><th><strong>必填</strong></th><th><strong>默认值</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>value</td><td>String</td><td>否</td><td>“”</td><td>数据库字段值</td></tr><tr><td>exist</td><td>boolean</td><td>否</td><td>true</td><td>是否为数据库表字段</td></tr><tr><td>condition</td><td>String</td><td>否</td><td>“”</td><td>字段 where 实体查询比较条件，有值设置则按设置的值为准，没有则为默认全局</td></tr><tr><td>update</td><td>String</td><td>否</td><td>“”</td><td>字段 update set 部分注入，例如：当在version字段上注解update&#x3D;”%s+1” 表示更新时会 set version&#x3D;version+1 （该属性优先级高于 el 属性）</td></tr><tr><td>insertStrategy</td><td>Enum</td><td>否</td><td>FieldStrategy.DEFAULT</td><td>字段验证策略之 insert: 当insert操作时，该字段拼接insert语句时的策略</td></tr><tr><td>updateStrategy</td><td>Enum</td><td>否</td><td>FieldStrategy.DEFAULT</td><td>字段验证策略之 update: 当更新操作时，该字段拼接set语句时的策略</td></tr><tr><td>whereStrategy</td><td>Enum</td><td>否</td><td>FieldStrategy.DEFAULT</td><td>字段验证策略之 where: 表示该字段在拼接where条件时的策略</td></tr><tr><td>fill</td><td>Enum</td><td>否</td><td>FieldFill.DEFAULT</td><td>字段自动填充策略</td></tr><tr><td>select</td><td>boolean</td><td>否</td><td>true</td><td>是否进行 select 查询</td></tr><tr><td>keepGlobalFormat</td><td>boolean</td><td>否</td><td>false</td><td>是否保持使用全局的 format 进行处理</td></tr><tr><td>jdbcType</td><td>JdbcType</td><td>否</td><td>JdbcType.UNDEFINED</td><td>JDBC 类型 (该默认值不代表会按照该值生效)</td></tr><tr><td>typeHandler</td><td>TypeHander</td><td>否</td><td></td><td>类型处理器 (该默认值不代表会按照该值生效)</td></tr><tr><td>numericScale</td><td>String</td><td>否</td><td>“”</td><td>指定小数点后保留的位数</td></tr></tbody></table><h2 id="Ⅳ-常见配置"><a href="#Ⅳ-常见配置" class="headerlink" title="Ⅳ 常见配置"></a>Ⅳ 常见配置</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="comment"># 全局配置文件位置（可选）</span></span><br><span class="line">  <span class="attr">config-location:</span> <span class="string">classpath:mybatis/mybatis-config.xml</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># Mapper XML文件位置</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/**/*.xml</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 配置实体类所在的包名，MyBatis-Plus会自动扫描并注册为别名</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.example.yourproject.model</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 全局配置</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span> <span class="comment"># 全局id类型为自增长</span></span><br><span class="line">      <span class="attr">table-prefix:</span> <span class="string">tbl_</span> <span class="comment"># 配置表前缀</span></span><br><span class="line">    <span class="comment"># 开启驼峰命名规则转换</span></span><br><span class="line">    <span class="attr">capital-mode:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 配置逻辑删除相关属性</span></span><br><span class="line">    <span class="attr">logic-delete-field:</span> <span class="string">deleted</span></span><br><span class="line">    <span class="attr">logic-delete-value:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">logic-not-delete-value:</span> <span class="number">0</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 自定义枚举类型转换器</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">default-enum-type-handler:</span> <span class="string">com.baomidou.mybatisplus.core.handlers.MybatisEnumTypeHandler</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 分页插件配置</span></span><br><span class="line">  <span class="attr">pagination:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">page-size:</span> <span class="number">10</span></span><br><span class="line">    <span class="attr">reasonable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li><strong>config-location</strong> ：用于指定 <strong>Mybatis</strong> 配置文件的路径</li><li><strong>mapper-locations</strong> ：配置 <strong>Mapper</strong> <strong>XML</strong> 文件所在的位置</li><li><strong>type-aliases-package</strong> ：配置实体类所在的包名，<strong>MybatisPlus</strong> 会自动扫描并注册为别名</li><li><strong>global-config</strong> ：全局配置</li><li><strong>configuration</strong> ：自定义配置</li><li><strong>pagination</strong> ：分页插件配置</li></ul><p>大多数的配置都是有默认值的，因此我们都无需配置，但还是有一些没有默认值的，例如：</p><ul><li>实体类的别名扫描包</li><li>全局 <strong>id</strong> 类型</li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.itheima.mp.domain.po</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span> <span class="comment"># 全局id类型为自增长</span></span><br></pre></td></tr></table></figure><p>需要注意的是 MybatisPlus 也支持手写 SQL 的，而 mapper 文件的读取地址可以自己配置：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">&quot;classpath*:/mapper/**/*.xml&quot;</span> <span class="comment"># Mapper.xml文件地址，当前这个是默认值。</span></span><br></pre></td></tr></table></figure><p>可以看到默认值是 <code>&quot;classpath*:/mapper/**/*.xml&quot;</code>，也就是说我们需要把 Mapper.xml 文件放在这个位置下被加载</p><p>例如：</p><p><img src="/img/load.gif" data-original="/images/frameworks/Java/mybatisplus/a/v6.png" alt="yaml配置"></p><hr><h1 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h1><h2 id="Ⅰ-条件构造器"><a href="#Ⅰ-条件构造器" class="headerlink" title="Ⅰ 条件构造器"></a>Ⅰ 条件构造器</h2><p>除了新增以外，修改、删除、查询的 <strong>SQL</strong> 语句都需要指定 <strong>where</strong> 条件。因此 <strong>BaseMapper</strong> 中提供了了相关的方法除了支持 <strong>id</strong> 还支持更复杂的 <strong>where</strong> 条件。</p><p><img src="/img/load.gif" data-original="/images/frameworks/Java/mybatisplus/a/v7.png" alt="BaseMapper"></p><p>参数中的 <strong>Wrapper</strong> 就是条件构造的抽象类，其下有很多默认实现，继承关系如下图所示：</p><p><img src="/img/load.gif" data-original="/images/frameworks/Java/mybatisplus/a/v8.png" alt="BaseMapper"></p><p><strong>Wrapper</strong> 的子类 <strong>AbstractWrapper</strong> 提供了 <strong>where</strong> 中所包含的所有条件构造方法：</p><p><img src="/img/load.gif" data-original="/images/frameworks/Java/mybatisplus/a/v9.png" alt="AbstractWrapper"></p><p>而 <strong>QueryWrapper</strong> 在 <strong>AbstractWrapper</strong>  基础上拓展了一个 select 方法，用于指定查询字段：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QueryWrapper</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">AbstractWrapper</span>&lt;T, String, QueryWrapper&lt;T&gt;&gt; <span class="keyword">implements</span> <span class="title class_">Query</span>&lt;QueryWrapper&lt;T&gt;, T, String&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SharedString sqlSelect;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">QueryWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>((Object)<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">QueryWrapper</span><span class="params">(T entity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sqlSelect = <span class="keyword">new</span> <span class="title class_">SharedString</span>();</span><br><span class="line">        <span class="built_in">super</span>.setEntity(entity);</span><br><span class="line">        <span class="built_in">super</span>.initNeed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">QueryWrapper</span><span class="params">(T entity, String... columns)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sqlSelect = <span class="keyword">new</span> <span class="title class_">SharedString</span>();</span><br><span class="line">        <span class="built_in">super</span>.setEntity(entity);</span><br><span class="line">        <span class="built_in">super</span>.initNeed();</span><br><span class="line">        <span class="built_in">this</span>.select(columns);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">QueryWrapper</span><span class="params">(T entity, Class&lt;T&gt; entityClass, AtomicInteger paramNameSeq, Map&lt;String, Object&gt; paramNameValuePairs, MergeSegments mergeSegments, SharedString paramAlias, SharedString lastSql, SharedString sqlComment, SharedString sqlFirst)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sqlSelect = <span class="keyword">new</span> <span class="title class_">SharedString</span>();</span><br><span class="line">        <span class="built_in">super</span>.setEntity(entity);</span><br><span class="line">        <span class="built_in">super</span>.setEntityClass(entityClass);</span><br><span class="line">        <span class="built_in">this</span>.paramNameSeq = paramNameSeq;</span><br><span class="line">        <span class="built_in">this</span>.paramNameValuePairs = paramNameValuePairs;</span><br><span class="line">        <span class="built_in">this</span>.expression = mergeSegments;</span><br><span class="line">        <span class="built_in">this</span>.paramAlias = paramAlias;</span><br><span class="line">        <span class="built_in">this</span>.lastSql = lastSql;</span><br><span class="line">        <span class="built_in">this</span>.sqlComment = sqlComment;</span><br><span class="line">        <span class="built_in">this</span>.sqlFirst = sqlFirst;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SafeVarargs</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> QueryWrapper&lt;T&gt; <span class="title function_">select</span><span class="params">(String... columns)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.select(Arrays.asList(columns));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> QueryWrapper&lt;T&gt; <span class="title function_">select</span><span class="params">(List&lt;String&gt; columns)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isNotEmpty(columns)) &#123;</span><br><span class="line">            <span class="built_in">this</span>.sqlSelect.setStringValue(String.join(<span class="string">&quot;,&quot;</span>, columns));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (QueryWrapper)<span class="built_in">this</span>.typedThis;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> QueryWrapper&lt;T&gt; <span class="title function_">select</span><span class="params">(Class&lt;T&gt; entityClass, Predicate&lt;TableFieldInfo&gt; predicate)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.setEntityClass(entityClass);</span><br><span class="line">        <span class="built_in">this</span>.sqlSelect.setStringValue(TableInfoHelper.getTableInfo(<span class="built_in">this</span>.getEntityClass()).chooseSelect(predicate));</span><br><span class="line">        <span class="keyword">return</span> (QueryWrapper)<span class="built_in">this</span>.typedThis;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSqlSelect</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.sqlSelect.getStringValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String <span class="title function_">columnSqlInjectFilter</span><span class="params">(String column)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> StringUtils.sqlInjectionReplaceBlank(column);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> LambdaQueryWrapper&lt;T&gt; <span class="title function_">lambda</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>(<span class="built_in">this</span>.getEntity(), <span class="built_in">this</span>.getEntityClass(), <span class="built_in">this</span>.sqlSelect, <span class="built_in">this</span>.paramNameSeq, <span class="built_in">this</span>.paramNameValuePairs, <span class="built_in">this</span>.expression, <span class="built_in">this</span>.paramAlias, <span class="built_in">this</span>.lastSql, <span class="built_in">this</span>.sqlComment, <span class="built_in">this</span>.sqlFirst);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> QueryWrapper&lt;T&gt; <span class="title function_">instance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>(<span class="built_in">this</span>.getEntity(), <span class="built_in">this</span>.getEntityClass(), <span class="built_in">this</span>.paramNameSeq, <span class="built_in">this</span>.paramNameValuePairs, <span class="keyword">new</span> <span class="title class_">MergeSegments</span>(), <span class="built_in">this</span>.paramAlias, SharedString.emptyString(), SharedString.emptyString(), SharedString.emptyString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.clear();</span><br><span class="line">        <span class="built_in">this</span>.sqlSelect.toNull();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而 <strong>UpdateWrapper</strong> 则在 <strong>AbstractWrapper</strong>  基础上拓展了了一个 <strong>set</strong> 方法，用于指定 <strong>SQL</strong> 中的 <strong>SET</strong> 部分：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UpdateWrapper</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">AbstractWrapper</span>&lt;T, String, UpdateWrapper&lt;T&gt;&gt; <span class="keyword">implements</span> <span class="title class_">Update</span>&lt;UpdateWrapper&lt;T&gt;, String&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;String&gt; sqlSet;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UpdateWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>((Object)<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UpdateWrapper</span><span class="params">(T entity)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.setEntity(entity);</span><br><span class="line">        <span class="built_in">super</span>.initNeed();</span><br><span class="line">        <span class="built_in">this</span>.sqlSet = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">UpdateWrapper</span><span class="params">(T entity, List&lt;String&gt; sqlSet, AtomicInteger paramNameSeq, Map&lt;String, Object&gt; paramNameValuePairs, MergeSegments mergeSegments, SharedString paramAlias, SharedString lastSql, SharedString sqlComment, SharedString sqlFirst)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.setEntity(entity);</span><br><span class="line">        <span class="built_in">this</span>.sqlSet = sqlSet;</span><br><span class="line">        <span class="built_in">this</span>.paramNameSeq = paramNameSeq;</span><br><span class="line">        <span class="built_in">this</span>.paramNameValuePairs = paramNameValuePairs;</span><br><span class="line">        <span class="built_in">this</span>.expression = mergeSegments;</span><br><span class="line">        <span class="built_in">this</span>.paramAlias = paramAlias;</span><br><span class="line">        <span class="built_in">this</span>.lastSql = lastSql;</span><br><span class="line">        <span class="built_in">this</span>.sqlComment = sqlComment;</span><br><span class="line">        <span class="built_in">this</span>.sqlFirst = sqlFirst;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSqlSet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> CollectionUtils.isEmpty(<span class="built_in">this</span>.sqlSet) ? <span class="literal">null</span> : String.join(<span class="string">&quot;,&quot;</span>, <span class="built_in">this</span>.sqlSet);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> UpdateWrapper&lt;T&gt; <span class="title function_">set</span><span class="params">(<span class="type">boolean</span> condition, String column, Object val, String mapping)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (UpdateWrapper)<span class="built_in">this</span>.maybeDo(condition, () -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="built_in">this</span>.formatParam(mapping, val);</span><br><span class="line">            <span class="built_in">this</span>.sqlSet.add(column + <span class="string">&quot;=&quot;</span> + sql);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> UpdateWrapper&lt;T&gt; <span class="title function_">setSql</span><span class="params">(<span class="type">boolean</span> condition, String sql)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (condition &amp;&amp; StringUtils.isNotBlank(sql)) &#123;</span><br><span class="line">            <span class="built_in">this</span>.sqlSet.add(sql);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (UpdateWrapper)<span class="built_in">this</span>.typedThis;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String <span class="title function_">columnSqlInjectFilter</span><span class="params">(String column)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> StringUtils.sqlInjectionReplaceBlank(column);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> LambdaUpdateWrapper&lt;T&gt; <span class="title function_">lambda</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>(<span class="built_in">this</span>.getEntity(), <span class="built_in">this</span>.getEntityClass(), <span class="built_in">this</span>.sqlSet, <span class="built_in">this</span>.paramNameSeq, <span class="built_in">this</span>.paramNameValuePairs, <span class="built_in">this</span>.expression, <span class="built_in">this</span>.paramAlias, <span class="built_in">this</span>.lastSql, <span class="built_in">this</span>.sqlComment, <span class="built_in">this</span>.sqlFirst);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> UpdateWrapper&lt;T&gt; <span class="title function_">instance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>(<span class="built_in">this</span>.getEntity(), (List)<span class="literal">null</span>, <span class="built_in">this</span>.paramNameSeq, <span class="built_in">this</span>.paramNameValuePairs, <span class="keyword">new</span> <span class="title class_">MergeSegments</span>(), <span class="built_in">this</span>.paramAlias, SharedString.emptyString(), SharedString.emptyString(), SharedString.emptyString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.clear();</span><br><span class="line">        <span class="built_in">this</span>.sqlSet.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="①-QueryWrapper"><a href="#①-QueryWrapper" class="headerlink" title="① QueryWrapper"></a>① QueryWrapper</h3><p>无论是修改、更新、查询，都可以使用 QueryWrapper 来构建查询条件。</p><p><strong>查询：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ①查询出名字中带o的,存款大于等于1000元的用户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testQueryWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1.构建查询条件 where name like &quot;%o%&quot; AND balance &gt;= 1000</span></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;()</span><br><span class="line">            .select(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;username&quot;</span>, <span class="string">&quot;info&quot;</span>, <span class="string">&quot;balance&quot;</span>)</span><br><span class="line">            .like(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;o&quot;</span>)</span><br><span class="line">            .ge(<span class="string">&quot;balance&quot;</span>, <span class="number">1000</span>);</span><br><span class="line">    <span class="comment">// 2.查询数据</span></span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(wrapper);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>更新：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ②更新用户名为Jack的用户余额为2000</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testUpdateByQueryWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1.构建查询条件 where name = &quot;Jack&quot;</span></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;().eq(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;Jack&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.更新数据，user中非null字段都会作为set语句</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setBalance(<span class="number">2000</span>);</span><br><span class="line">    userMapper.update(user, wrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="②-UpdateWrapper"><a href="#②-UpdateWrapper" class="headerlink" title="② UpdateWrapper"></a>② UpdateWrapper</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ③基于UpdateWrapper的更新 更新id为1、2、4的用户余额,扣200</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testUpdateWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">    userMapper.update(<span class="literal">null</span>, Wrappers.&lt;UserEntity&gt;update().lambda()</span><br><span class="line">            .setSql(<span class="string">&quot;balance = balance - 200&quot;</span>)</span><br><span class="line">            .in(UserEntity::getId, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="③-LambdaQueryWrapper"><a href="#③-LambdaQueryWrapper" class="headerlink" title="③ LambdaQueryWrapper"></a>③ LambdaQueryWrapper</h3><p>其中一种办法是基于变量的 <strong>gettter</strong> 方法结合反射技术。因此我们只要将条件对应的字段的 <strong>gettter</strong> 方法传递给 <strong>MybatisPlus</strong> ，它就能计算出对应的变量名了。而传递方法可以使用 <strong>JDK8</strong> 中的<code>方法引用</code>和 <strong>Lambda</strong> 表达式。 因此 <strong>MybatisPlus</strong> 又提供了一套基于 <strong>Lambda</strong> 的 <strong>Wrapper</strong> ，包含两个：</p><ul><li><strong>LambdaQueryWrapper</strong></li><li><strong>LambdaUpdateWrapper</strong></li></ul><p>分别对应 <strong>QueryWrapper</strong> 和 <strong>UpdateWrappe</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ①查询出名字中带o的,存款大于等于1000元的用户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testQueryMapper</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;UserEntity&gt; userEntityList = userMapper.selectList(Wrappers.lambdaQuery(UserEntity.class)</span><br><span class="line">            .like(UserEntity::getUsername, <span class="string">&quot;o&quot;</span>)</span><br><span class="line">            .ge(UserEntity::getBalance, <span class="number">1000</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;userEntityList ===&gt; &quot;</span>+userEntityList);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ②更新用户名为Jack的用户余额为2000</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testUpdateMapper</span><span class="params">()</span> &#123;</span><br><span class="line">    userMapper.update(Wrappers.lambdaUpdate(UserEntity.class)</span><br><span class="line">            .set(UserEntity::getBalance, <span class="number">2000</span>)</span><br><span class="line">            .eq(UserEntity::getUsername, <span class="string">&quot;Jack&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ③基于UpdateWrapper的更新 更新id为1、2、4的用户余额,扣200</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testUpdateWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">    userMapper.update(<span class="literal">null</span>, Wrappers.&lt;UserEntity&gt;update().lambda()</span><br><span class="line">            .setSql(<span class="string">&quot;balance = balance - 200&quot;</span>)</span><br><span class="line">            .in(UserEntity::getId, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Ⅱ-自定义-SQL"><a href="#Ⅱ-自定义-SQL" class="headerlink" title="Ⅱ 自定义 SQL"></a>Ⅱ 自定义 SQL</h2><p><strong>MybatisPlus</strong> 提供了自定义 <strong>SQL</strong> 功能，可以让我们先利用 <strong>Wrapper</strong> 来构建查询条件，然后再结合 <strong>Mapper.xml</strong> 来编写 <strong>SQL</strong></p><h3 id="①-基本用法"><a href="#①-基本用法" class="headerlink" title="① 基本用法"></a>① 基本用法</h3><p>先构建查询条件：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义SQL</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testCustomWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1.准备自定义查询条件</span></span><br><span class="line">    List&lt;Long&gt; ids = List.of(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">4L</span>);</span><br><span class="line">    <span class="comment">// 2、定义条件</span></span><br><span class="line">    QueryWrapper&lt;UserEntity&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;UserEntity&gt;().in(<span class="string">&quot;id&quot;</span>, ids);</span><br><span class="line">    <span class="comment">// 3.调用mapper的自定义方法，直接传递Wrapper</span></span><br><span class="line">    userMapper.deductBalanceByIds(<span class="number">200</span>, wrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再在 <strong>UserMapper</strong> 中定义 <strong>SQL</strong>：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;UserEntity&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;UPDATE user SET balance = balance - #&#123;money&#125; $&#123;ew.customSqlSegment&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deductBalanceByIds</span><span class="params">(<span class="meta">@Param(&quot;money&quot;)</span> <span class="type">int</span> money, <span class="meta">@Param(&quot;ew&quot;)</span> QueryWrapper&lt;UserEntity&gt; wrapper)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="②-多表关联"><a href="#②-多表关联" class="headerlink" title="② 多表关联"></a>② 多表关联</h3><p>理论上来说 <strong>MybatisPlus</strong> 是单表操作不支持多表关联的，不过我们可以利用 <strong>Wrapper</strong> 中自定义条件结合自定义 <strong>SQL</strong> 来实现多表查询的效果。</p><p>例如，我们要查出所有收获地址在北京并且用户 <strong>id</strong> 在 1、2、4 的用户</p><p>如果是基于 <strong>mybatis</strong> 实现 <strong>SQL</strong>：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryUserByIdAndAddr&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itheima.mp.domain.po.User&quot;</span>&gt;</span></span><br><span class="line">      SELECT *</span><br><span class="line">      FROM user u</span><br><span class="line">      INNER JOIN address a ON u.id = a.user_id</span><br><span class="line">      WHERE u.id</span><br><span class="line">      <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">open</span>=<span class="string">&quot;IN (&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">          #&#123;id&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">      AND a.city = #&#123;city&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们也可以使用自定义 <strong>SQL</strong> 结合 <strong>Wrapper</strong> ：</p><p>先构建查询条件：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testCustomJoinWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1.准备自定义查询条件</span></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;()</span><br><span class="line">            .in(<span class="string">&quot;u.id&quot;</span>, List.of(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">4L</span>))</span><br><span class="line">            .eq(<span class="string">&quot;a.city&quot;</span>, <span class="string">&quot;北京&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.调用mapper的自定义方法</span></span><br><span class="line">    List&lt;User&gt; users = userMapper.queryUserByWrapper(wrapper);</span><br><span class="line"></span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再在 <strong>UserMapper</strong> 中自定义 <strong>SQL</strong> 方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;SELECT u.* FROM user u INNER JOIN address a ON u.id = a.user_id $&#123;ew.customSqlSegment&#125;&quot;)</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">queryUserByWrapper</span><span class="params">(<span class="meta">@Param(&quot;ew&quot;)</span>QueryWrapper&lt;User&gt; wrapper)</span>;</span><br></pre></td></tr></table></figure><p>当然也可以在 <strong>UserMapper.xml</strong> 中写 <strong>SQL</strong>：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryUserByIdAndAddr&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itheima.mp.domain.po.User&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM user u INNER JOIN address a ON u.id = a.user_id $&#123;ew.customSqlSegment&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Ⅲ-Service-接口"><a href="#Ⅲ-Service-接口" class="headerlink" title="Ⅲ Service 接口"></a>Ⅲ Service 接口</h2><p>通用接口为 <strong>Iservice</strong> ，默认实现为 **ServiceImpl **，其中封装方法为一下几类：</p><ul><li><code>save</code>：新增</li><li><code>remove</code>：删除</li><li><code>update</code>：更新</li><li><code>get</code>：查询单个结果</li><li><code>list</code>：查询集合结果</li><li><code>count</code>：计数</li><li><code>page</code>：分页查询</li></ul><h3 id="①-CRUD"><a href="#①-CRUD" class="headerlink" title="① CRUD"></a>① CRUD</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IService</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">DEFAULT_BATCH_SIZE</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// save 新增</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">save</span><span class="params">(T entity)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.retBool(<span class="built_in">this</span>.getBaseMapper().insert(entity));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(</span></span><br><span class="line"><span class="meta">        rollbackFor = &#123;Exception.class&#125;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">saveBatch</span><span class="params">(Collection&lt;T&gt; entityList)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.saveBatch(entityList, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">saveBatch</span><span class="params">(Collection&lt;T&gt; entityList, <span class="type">int</span> batchSize)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(</span></span><br><span class="line"><span class="meta">        rollbackFor = &#123;Exception.class&#125;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">saveOrUpdateBatch</span><span class="params">(Collection&lt;T&gt; entityList)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.saveOrUpdateBatch(entityList, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">saveOrUpdateBatch</span><span class="params">(Collection&lt;T&gt; entityList, <span class="type">int</span> batchSize)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">removeById</span><span class="params">(Serializable id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.retBool(<span class="built_in">this</span>.getBaseMapper().deleteById(id));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// remove 删除</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">removeById</span><span class="params">(Serializable id, <span class="type">boolean</span> useFill)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;不支持的方法!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">removeById</span><span class="params">(T entity)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.retBool(<span class="built_in">this</span>.getBaseMapper().deleteById(entity));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">removeByMap</span><span class="params">(Map&lt;String, Object&gt; columnMap)</span> &#123;</span><br><span class="line">        Assert.notEmpty(columnMap, <span class="string">&quot;error: columnMap must not be empty&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.retBool(<span class="built_in">this</span>.getBaseMapper().deleteByMap(columnMap));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.retBool(<span class="built_in">this</span>.getBaseMapper().delete(queryWrapper));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">removeByIds</span><span class="params">(Collection&lt;?&gt; list)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> CollectionUtils.isEmpty(list) ? <span class="literal">false</span> : SqlHelper.retBool(<span class="built_in">this</span>.getBaseMapper().deleteBatchIds(list));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(</span></span><br><span class="line"><span class="meta">        rollbackFor = &#123;Exception.class&#125;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">removeByIds</span><span class="params">(Collection&lt;?&gt; list, <span class="type">boolean</span> useFill)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(list)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> useFill ? <span class="built_in">this</span>.removeBatchByIds(list, <span class="literal">true</span>) : SqlHelper.retBool(<span class="built_in">this</span>.getBaseMapper().deleteBatchIds(list));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(</span></span><br><span class="line"><span class="meta">        rollbackFor = &#123;Exception.class&#125;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">removeBatchByIds</span><span class="params">(Collection&lt;?&gt; list)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.removeBatchByIds(list, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(</span></span><br><span class="line"><span class="meta">        rollbackFor = &#123;Exception.class&#125;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">removeBatchByIds</span><span class="params">(Collection&lt;?&gt; list, <span class="type">boolean</span> useFill)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.removeBatchByIds(list, <span class="number">1000</span>, useFill);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">removeBatchByIds</span><span class="params">(Collection&lt;?&gt; list, <span class="type">int</span> batchSize)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;不支持的方法!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">removeBatchByIds</span><span class="params">(Collection&lt;?&gt; list, <span class="type">int</span> batchSize, <span class="type">boolean</span> useFill)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;不支持的方法!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update 修改</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">updateById</span><span class="params">(T entity)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.retBool(<span class="built_in">this</span>.getBaseMapper().updateById(entity));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">update</span><span class="params">(Wrapper&lt;T&gt; updateWrapper)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.update((Object)<span class="literal">null</span>, updateWrapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">update</span><span class="params">(T entity, Wrapper&lt;T&gt; updateWrapper)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.retBool(<span class="built_in">this</span>.getBaseMapper().update(entity, updateWrapper));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(</span></span><br><span class="line"><span class="meta">        rollbackFor = &#123;Exception.class&#125;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">updateBatchById</span><span class="params">(Collection&lt;T&gt; entityList)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.updateBatchById(entityList, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">updateBatchById</span><span class="params">(Collection&lt;T&gt; entityList, <span class="type">int</span> batchSize)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">saveOrUpdate</span><span class="params">(T entity)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get 查询单个结果</span></span><br><span class="line">    <span class="keyword">default</span> T <span class="title function_">getById</span><span class="params">(Serializable id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getBaseMapper().selectById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// list 查询集合结果</span></span><br><span class="line">    <span class="keyword">default</span> List&lt;T&gt; <span class="title function_">listByIds</span><span class="params">(Collection&lt;? extends Serializable&gt; idList)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getBaseMapper().selectBatchIds(idList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> List&lt;T&gt; <span class="title function_">listByMap</span><span class="params">(Map&lt;String, Object&gt; columnMap)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getBaseMapper().selectByMap(columnMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get 查询单个结果对象</span></span><br><span class="line">    <span class="keyword">default</span> T <span class="title function_">getOne</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getOne(queryWrapper, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    T <span class="title function_">getOne</span><span class="params">(Wrapper&lt;T&gt; queryWrapper, <span class="type">boolean</span> throwEx)</span>;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Object&gt; <span class="title function_">getMap</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br><span class="line">    &lt;V&gt; V <span class="title function_">getObj</span><span class="params">(Wrapper&lt;T&gt; queryWrapper, Function&lt;? <span class="built_in">super</span> Object, V&gt; mapper)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// count 计数</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">long</span> <span class="title function_">count</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.count(Wrappers.emptyWrapper());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="type">long</span> <span class="title function_">count</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.retCount(<span class="built_in">this</span>.getBaseMapper().selectCount(queryWrapper));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// list 查询集合结果</span></span><br><span class="line">    <span class="keyword">default</span> List&lt;T&gt; <span class="title function_">list</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getBaseMapper().selectList(queryWrapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> List&lt;T&gt; <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.list(Wrappers.emptyWrapper());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Ipage 分页</span></span><br><span class="line">    <span class="keyword">default</span> &lt;E <span class="keyword">extends</span> <span class="title class_">IPage</span>&lt;T&gt;&gt; E <span class="title function_">page</span><span class="params">(E page, Wrapper&lt;T&gt; queryWrapper)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getBaseMapper().selectPage(page, queryWrapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> &lt;E <span class="keyword">extends</span> <span class="title class_">IPage</span>&lt;T&gt;&gt; E <span class="title function_">page</span><span class="params">(E page)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.page(page, Wrappers.emptyWrapper());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// list 查询集合结果</span></span><br><span class="line">    <span class="keyword">default</span> List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">listMaps</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getBaseMapper().selectMaps(queryWrapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">listMaps</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.listMaps(Wrappers.emptyWrapper());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> List&lt;Object&gt; <span class="title function_">listObjs</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.listObjs(Function.identity());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> &lt;V&gt; List&lt;V&gt; <span class="title function_">listObjs</span><span class="params">(Function&lt;? <span class="built_in">super</span> Object, V&gt; mapper)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.listObjs(Wrappers.emptyWrapper(), mapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> List&lt;Object&gt; <span class="title function_">listObjs</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.listObjs(queryWrapper, Function.identity());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> &lt;V&gt; List&lt;V&gt; <span class="title function_">listObjs</span><span class="params">(Wrapper&lt;T&gt; queryWrapper, Function&lt;? <span class="built_in">super</span> Object, V&gt; mapper)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (List)<span class="built_in">this</span>.getBaseMapper().selectObjs(queryWrapper).stream().filter(Objects::nonNull).map(mapper).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Ipage 分页</span></span><br><span class="line">    <span class="keyword">default</span> &lt;E <span class="keyword">extends</span> <span class="title class_">IPage</span>&lt;Map&lt;String, Object&gt;&gt;&gt; E <span class="title function_">pageMaps</span><span class="params">(E page, Wrapper&lt;T&gt; queryWrapper)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getBaseMapper().selectMapsPage(page, queryWrapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> &lt;E <span class="keyword">extends</span> <span class="title class_">IPage</span>&lt;Map&lt;String, Object&gt;&gt;&gt; E <span class="title function_">pageMaps</span><span class="params">(E page)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.pageMaps(page, Wrappers.emptyWrapper());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    BaseMapper&lt;T&gt; <span class="title function_">getBaseMapper</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;T&gt; <span class="title function_">getEntityClass</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> QueryChainWrapper&lt;T&gt; <span class="title function_">query</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ChainWrappers.queryChain(<span class="built_in">this</span>.getBaseMapper());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> LambdaQueryChainWrapper&lt;T&gt; <span class="title function_">lambdaQuery</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ChainWrappers.lambdaQueryChain(<span class="built_in">this</span>.getBaseMapper(), <span class="built_in">this</span>.getEntityClass());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> LambdaQueryChainWrapper&lt;T&gt; <span class="title function_">lambdaQuery</span><span class="params">(T entity)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ChainWrappers.lambdaQueryChain(<span class="built_in">this</span>.getBaseMapper(), entity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> KtQueryChainWrapper&lt;T&gt; <span class="title function_">ktQuery</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ChainWrappers.ktQueryChain(<span class="built_in">this</span>.getBaseMapper(), <span class="built_in">this</span>.getEntityClass());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> KtUpdateChainWrapper&lt;T&gt; <span class="title function_">ktUpdate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ChainWrappers.ktUpdateChain(<span class="built_in">this</span>.getBaseMapper(), <span class="built_in">this</span>.getEntityClass());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> UpdateChainWrapper&lt;T&gt; <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ChainWrappers.updateChain(<span class="built_in">this</span>.getBaseMapper());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> LambdaUpdateChainWrapper&lt;T&gt; <span class="title function_">lambdaUpdate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ChainWrappers.lambdaUpdateChain(<span class="built_in">this</span>.getBaseMapper());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">saveOrUpdate</span><span class="params">(T entity, Wrapper&lt;T&gt; updateWrapper)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.update(entity, updateWrapper) || <span class="built_in">this</span>.saveOrUpdate(entity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>新增：</strong></p><ul><li><code>save</code>是新增单个元素</li><li><code>saveBatch</code>是批量新增</li><li><code>saveOrUpdate</code>是根据id判断，如果数据存在就更新，不存在则新增</li><li><code>saveOrUpdateBatch</code>是批量的新增或修改</li></ul><p><strong>删除：</strong></p><ul><li><code>removeById</code>：根据id删除</li><li><code>removeByIds</code>：根据id批量删除</li><li><code>removeByMap</code>：根据Map中的键值对为条件删除</li><li><code>remove(Wrapper&lt;T&gt;)</code>：根据Wrapper条件删除</li><li><code>~~removeBatchByIds~~</code>：暂不支持</li></ul><p><strong>修改：</strong></p><ul><li><code>updateById</code>：根据id修改</li><li><code>update(Wrapper&lt;T&gt;)</code>：根据<code>UpdateWrapper</code>修改，<code>Wrapper</code>中包含<code>set</code>和<code>where</code>部分</li><li><code>update(T，Wrapper&lt;T&gt;)</code>：按照<code>T</code>内的数据修改与<code>Wrapper</code>匹配到的数据</li><li><code>updateBatchById</code>：根据id批量修改</li></ul><p><strong>Get：</strong></p><ul><li><code>getById</code>：根据id查询1条数据</li><li><code>getOne(Wrapper&lt;T&gt;)</code>：根据<code>Wrapper</code>查询1条数据</li><li><code>getBaseMapper</code>：获取<code>Service</code>内的<code>BaseMapper</code>实现，某些时候需要直接调用<code>Mapper</code>内的自定义<code>SQL</code>时可以用这个方法获取到<code>Mapper</code></li></ul><p><strong>List：</strong></p><ul><li><code>listByIds</code>：根据id批量查询</li><li><code>list(Wrapper&lt;T&gt;)</code>：根据Wrapper条件查询多条数据</li><li><code>list()</code>：查询所有</li></ul><p><strong>Count</strong>：</p><ul><li><code>count()</code>：统计所有数量</li><li><code>count(Wrapper&lt;T&gt;)</code>：统计符合<code>Wrapper</code>条件的数据数量</li></ul><p><strong>getBaseMapper</strong>：</p><ul><li>当我们在service中要调用Mapper中自定义SQL时，就必须获取service对应的Mapper，就可以通过这个方法</li></ul><h3 id="②-基本用法"><a href="#②-基本用法" class="headerlink" title="② 基本用法"></a>② 基本用法</h3><p>首先，定义 <strong>IUserService</strong> ，继承 <strong>IService</strong>：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="comment">// 拓展自定义方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，编写 <strong>UserServiceImpl</strong> 类，继承 <strong>ServiceImpl</strong> ，实现 <strong>UserService</strong>：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt;<span class="keyword">implements</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>项目结构如下：</p><p><img src="/img/load.gif" data-original="/images/frameworks/Java/mybatisplus/a/v10.png" alt="AbstractWrapper"></p><p>接下来，我们快速实现下面4个接口：</p><table><thead><tr><th align="left"><strong>编号</strong></th><th align="left"><strong>接口</strong></th><th align="left"><strong>请求方式</strong></th><th align="left"><strong>请求路径</strong></th><th align="left"><strong>请求参数</strong></th><th align="left"><strong>返回值</strong></th></tr></thead><tbody><tr><td align="left">1</td><td align="left">新增用户</td><td align="left">POST</td><td align="left">&#x2F;users</td><td align="left">用户表单实体</td><td align="left">无</td></tr><tr><td align="left">2</td><td align="left">删除用户</td><td align="left">DELETE</td><td align="left">&#x2F;users&#x2F;{id}</td><td align="left">用户id</td><td align="left">无</td></tr><tr><td align="left">3</td><td align="left">根据id查询用户</td><td align="left">GET</td><td align="left">&#x2F;users&#x2F;{id}</td><td align="left">用户id</td><td align="left">用户VO</td></tr><tr><td align="left">4</td><td align="left">根据id批量查询</td><td align="left">GET</td><td align="left">&#x2F;users</td><td align="left">用户id集合</td><td align="left">用户VO集合</td></tr></tbody></table><p>为了方便测试，引入 <strong>swagger-knife4j：</strong></p><p>依赖：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--swagger--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-openapi2-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--web--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>yml</strong> 文件中 <strong>swagger</strong> 配置</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">knife4j:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">openapi:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">用户管理接口文档</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">&quot;用户管理接口文档&quot;</span></span><br><span class="line">    <span class="attr">email:</span> <span class="string">xxx@qq.com</span></span><br><span class="line">    <span class="attr">concat:</span> <span class="string">violet</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://violet.zeabur.app/</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">v1.0.0</span></span><br><span class="line">    <span class="attr">group:</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">        <span class="attr">group-name:</span> <span class="string">default</span></span><br><span class="line">        <span class="attr">api-rule:</span> <span class="string">package</span></span><br><span class="line">        <span class="attr">api-rule-resources:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">com.mybatisplus.controller</span></span><br></pre></td></tr></table></figure><p><strong>UserController：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户控制器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lixuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2024/8/7 17:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@Tag(name = &quot;用户控制器&quot;)</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(UserController.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IUserService userService;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IAddressService addressService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getUser/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;查询用户 getUser/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> UserVO <span class="title function_">getUser</span><span class="params">(<span class="meta">@Parameter(description = &quot;用户ID&quot;)</span> <span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">        <span class="type">UserEntity</span> <span class="variable">userEntity</span> <span class="operator">=</span> userService.getById(id);</span><br><span class="line">        <span class="keyword">return</span> BeanUtil.copyProperties(userEntity, UserVO.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getAllUser&quot;)</span></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;查询所有用户 getAllUser&quot;, ignoreJsonView = true)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;UserVO&gt; <span class="title function_">getAllUser</span><span class="params">(<span class="meta">@ParameterObject</span> UserEntity userEntity)</span> &#123;</span><br><span class="line">        QueryWrapper&lt;UserEntity&gt; queryWrapper = ConditionUtil.buildQueryWrapper(userEntity, UserEntity.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;queryWrapper ===&gt; &quot;</span>+queryWrapper);</span><br><span class="line">        List&lt;UserEntity&gt; userEntityList = userService.list(queryWrapper);</span><br><span class="line">        List&lt;UserVO&gt; userVOS = BeanUtil.copyToList(userEntityList, UserVO.class);</span><br><span class="line">        userVOS.forEach(userVO -&gt; System.out.println(userVO.getUsername()));</span><br><span class="line">        <span class="keyword">return</span> BeanUtil.copyToList(userEntityList, UserVO.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getUserByPage&quot;)</span></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;分页查询 getUserByPage&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Page&lt;UserEntity&gt; <span class="title function_">getUserByPage</span><span class="params">(<span class="meta">@ParameterObject</span> UserEntity userEntity,<span class="meta">@ParameterObject</span> Query query)</span> &#123;</span><br><span class="line">        QueryWrapper&lt;UserEntity&gt; queryWrapper = ConditionUtil.buildQueryWrapper(userEntity, UserEntity.class);</span><br><span class="line">        Page&lt;UserEntity&gt; page = userService.page(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(query.getCurrent(), query.getSize()), queryWrapper);</span><br><span class="line">        System.out.println(<span class="string">&quot;page ===&gt; &quot;</span>+page);</span><br><span class="line">        <span class="keyword">return</span> userService.page(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(query.getCurrent(), query.getSize()), queryWrapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/addUser&quot;)</span></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;新增用户 addUser&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addUser</span><span class="params">(<span class="meta">@RequestBody</span> UserDTO userDTO)</span> &#123;</span><br><span class="line">        <span class="comment">//1、把DTO转换为实体Entity</span></span><br><span class="line">        <span class="type">UserEntity</span> <span class="variable">userEntity</span> <span class="operator">=</span> BeanUtil.copyProperties(userDTO, UserEntity.class);</span><br><span class="line">        <span class="keyword">return</span> userService.save(userEntity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/updateUser&quot;)</span></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;修改用户 updateUser&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">updateUser</span><span class="params">(<span class="meta">@RequestBody</span> UserEntity userEntity)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.updateById(userEntity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/deleteUser&quot;)</span></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;删除用户 deleteUser&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deleteUser</span><span class="params">(<span class="meta">@RequestParam</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.removeById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/deleteUserBatch&quot;)</span></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;批量删除用户 deleteUserBatch&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deleteUserBatch</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;Long&gt; ids)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.removeByIds(ids);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扣减用户余额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/&#123;id&#125;/deduction/&#123;money&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;扣减用户余额 &#123;id&#125;/deduction/&#123;money&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deductBalance</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@Parameter(description = &quot;用户id&quot;)</span> <span class="meta">@PathVariable(&quot;id&quot;)</span> Long id,</span></span><br><span class="line"><span class="params">            <span class="meta">@Parameter(description = &quot;扣减金额&quot;)</span> <span class="meta">@PathVariable(&quot;money&quot;)</span> Integer money)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.deductBalance(id, money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询用户并且对应其地址足迹</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getUserAndAddress/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;查询用户并且对应其地址足迹 getUserAndAddress/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> UserVO <span class="title function_">getUserAndAddress</span><span class="params">(<span class="meta">@Parameter(description = &quot;用户ID&quot;)</span> <span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">        <span class="comment">//获取用户</span></span><br><span class="line">        <span class="type">UserEntity</span> <span class="variable">userEntity</span> <span class="operator">=</span> userService.getById(id);</span><br><span class="line">        <span class="keyword">if</span> (userEntity == <span class="literal">null</span> || userEntity.getStatus() == UserStatus.FREEZE) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户状态异常！！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//转换Vo</span></span><br><span class="line">        <span class="type">UserVO</span> <span class="variable">userVO</span> <span class="operator">=</span> BeanUtil.copyProperties(userEntity, UserVO.class);</span><br><span class="line">        <span class="comment">//获取地址列表</span></span><br><span class="line">        List&lt;AddressEntity&gt; addressEntityList = addressService.list(Wrappers.lambdaQuery(AddressEntity.class)</span><br><span class="line">                .eq(AddressEntity::getUserId, id));</span><br><span class="line">        <span class="comment">//转换列表VO</span></span><br><span class="line">        <span class="keyword">if</span> (CollUtil.isNotEmpty(addressEntityList)) &#123;</span><br><span class="line">            List&lt;AddressVO&gt; addressVOList = BeanUtil.copyToList(addressEntityList, AddressVO.class);</span><br><span class="line">            userVO.setAddressList(addressVOList);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> userVO;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据ids批量查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getUserByIds&quot;)</span></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;根据ids批量查询 getUserByIds&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;UserVO&gt; <span class="title function_">getUserByIds</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;Long&gt; ids)</span> &#123;</span><br><span class="line">        <span class="comment">//1、查询用户</span></span><br><span class="line">        List&lt;UserEntity&gt; userEntityList = userService.listByIds(ids);</span><br><span class="line">        <span class="keyword">if</span> (CollUtil.isEmpty(userEntityList)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2查询地址列表</span></span><br><span class="line">        List&lt;AddressEntity&gt; addressEntityList = addressService.list(Wrappers.lambdaQuery(AddressEntity.class)</span><br><span class="line">                .in(AddressEntity::getUserId, ids));</span><br><span class="line">        <span class="comment">//转为Vo列表</span></span><br><span class="line">        List&lt;UserVO&gt; userVOList = BeanUtil.copyToList(userEntityList, UserVO.class);</span><br><span class="line">        <span class="comment">//根据UserId转为Map</span></span><br><span class="line">        Map&lt;Long, List&lt;AddressEntity&gt;&gt; addressEntityMap = addressEntityList.stream()</span><br><span class="line">                .collect(Collectors.groupingBy(AddressEntity::getUserId));</span><br><span class="line">        userVOList.forEach(userVO -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (userVO.getStatus() == UserStatus.FREEZE) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;用户&#123;&#125;状态异常！！&quot;</span>, userVO.getUsername());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//1、获取对应地址列表</span></span><br><span class="line">            Optional.ofNullable(addressEntityMap.get(userVO.getId()))</span><br><span class="line">                    .ifPresent(addressEntities -&gt; &#123;</span><br><span class="line">                        <span class="comment">//2、转换为Vo地址列表</span></span><br><span class="line">                        List&lt;AddressVO&gt; addressVOList = BeanUtil.copyToList(addressEntities, AddressVO.class);</span><br><span class="line">                        <span class="comment">//3、注入Vo</span></span><br><span class="line">                        userVO.setAddressList(addressVOList);</span><br><span class="line">                    &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> userVOList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询 page</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;分页查询 page&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> PageDTO&lt;UserVO&gt; <span class="title function_">queryUsersPage</span><span class="params">(<span class="meta">@ParameterObject</span> UserQuery query)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;queryUsersPage ===&gt; &#123;&#125;&quot;</span>, query);</span><br><span class="line">        Page&lt;UserEntity&gt; userEntityPage = userService.page(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;UserEntity&gt;(query.getPageNo(), query.getPageSize())</span><br><span class="line">                        .addOrder(ObjectUtil.isEmpty(query.getSortBy()) ?</span><br><span class="line">                                OrderItem.desc(<span class="string">&quot;update_time&quot;</span>) :</span><br><span class="line">                                (query.getIsAsc() != <span class="literal">null</span> &amp;&amp; query.getIsAsc() ?</span><br><span class="line">                                        OrderItem.asc(query.getSortBy()) :</span><br><span class="line">                                        OrderItem.desc(query.getSortBy()))),</span><br><span class="line">                Wrappers.lambdaQuery(UserEntity.class)</span><br><span class="line">                        .like(StrUtil.isNotBlank(query.getName()), UserEntity::getUsername, query.getName())</span><br><span class="line">                        .between(query.getMinBalance() != <span class="literal">null</span> &amp;&amp; query.getMaxBalance() != <span class="literal">null</span>, UserEntity::getBalance, query.getMinBalance(), query.getMaxBalance()));</span><br><span class="line">        System.out.println(<span class="string">&quot;userEntityPage = &quot;</span> + userEntityPage.getRecords());</span><br><span class="line">        <span class="comment">//转换为Vo</span></span><br><span class="line">        List&lt;UserVO&gt; userVOList = BeanUtil.copyToList(userEntityPage.getRecords(), UserVO.class);</span><br><span class="line">        PageDTO&lt;UserVO&gt; userVoPageDTO = <span class="keyword">new</span> <span class="title class_">PageDTO</span>&lt;&gt;(userEntityPage.getCurrent(), userEntityPage.getSize(), userVOList);</span><br><span class="line">        userVoPageDTO.setTotal(userEntityPage.getTotal());</span><br><span class="line">        System.out.println(<span class="string">&quot;userVoPageDTO = &quot;</span> + userVoPageDTO.getPages());</span><br><span class="line">        <span class="keyword">return</span> userService.queryUsersPage(query);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>UserVo：</strong>返回用户对象给前端</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户表VO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lixuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2024/8/7 17:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserVO</span> <span class="keyword">extends</span> <span class="title class_">UserEntity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Serial</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Schema(description = &quot;地址列表&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;AddressVO&gt; addressList;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>IUserService：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> 1045754</span></span><br><span class="line"><span class="comment">* <span class="doctag">@description</span> 针对表【user(用户表)】的数据库操作Service</span></span><br><span class="line"><span class="comment">* <span class="doctag">@createDate</span> 2024-08-07 17:27:57</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;UserEntity&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">deductBalance</span><span class="params">(Long id, Integer money)</span>;</span><br><span class="line"></span><br><span class="line">    PageDTO&lt;UserVO&gt; <span class="title function_">queryUsersPage</span><span class="params">(UserQuery query)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>UserServiceImpl：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> 1045754</span></span><br><span class="line"><span class="comment">* <span class="doctag">@description</span> 针对表【user(用户表)】的数据库操作Service实现</span></span><br><span class="line"><span class="comment">* <span class="doctag">@createDate</span> 2024-08-07 17:27:57</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, UserEntity&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deductBalance</span><span class="params">(Long id, Integer money)</span> &#123;</span><br><span class="line">        <span class="comment">//1、查询用户</span></span><br><span class="line">        <span class="type">UserEntity</span> <span class="variable">user</span> <span class="operator">=</span> getById(id);</span><br><span class="line">        <span class="comment">//2、校验用户状态</span></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span> || user.getStatus().getValue()== <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户状态异常！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3、校验余额是否充足</span></span><br><span class="line">        <span class="keyword">if</span> (user.getBalance() &lt; money) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;余额不足！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4、扣减余额</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">remainBalance</span> <span class="operator">=</span> user.getBalance() - money;</span><br><span class="line">        <span class="keyword">return</span> lambdaUpdate()</span><br><span class="line">                .set(UserEntity::getBalance,remainBalance)</span><br><span class="line">                .set(remainBalance==<span class="number">0</span>,UserEntity::getStatus,<span class="number">2</span>)</span><br><span class="line">                .eq(UserEntity::getId,id)</span><br><span class="line">                <span class="comment">//乐观锁</span></span><br><span class="line">                .eq(UserEntity::getBalance,user.getBalance())</span><br><span class="line">                .update();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PageDTO&lt;UserVO&gt; <span class="title function_">queryUsersPage</span><span class="params">(UserQuery query)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.构建条件</span></span><br><span class="line">        <span class="comment">// 1.1.分页条件</span></span><br><span class="line">        Page&lt;UserEntity&gt; page = Page.of(query.getPageNo(), query.getPageSize());</span><br><span class="line">        <span class="comment">// 1.2.排序条件</span></span><br><span class="line">        <span class="keyword">if</span> (query.getSortBy() != <span class="literal">null</span>) &#123;</span><br><span class="line">            page.addOrder(query.getIsAsc()!= <span class="literal">null</span>&amp;&amp; query.getIsAsc() ? OrderItem.asc(query.getSortBy()) : OrderItem.desc(query.getSortBy()));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 默认按照更新时间排序</span></span><br><span class="line">            page.addOrder(OrderItem.desc(<span class="string">&quot;update_time&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2.查询</span></span><br><span class="line">        page(page);</span><br><span class="line">        <span class="comment">// 3.数据非空校验</span></span><br><span class="line">        List&lt;UserEntity&gt; records = page.getRecords();</span><br><span class="line">        <span class="keyword">if</span> (records == <span class="literal">null</span> || records.size() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 无数据，返回空结果</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageDTO</span>&lt;&gt;(page.getTotal(), page.getPages(), Collections.emptyList());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4.有数据，转换</span></span><br><span class="line">        List&lt;UserVO&gt; list = BeanUtil.copyToList(records, UserVO.class);</span><br><span class="line">        <span class="comment">// 5.封装返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageDTO</span>&lt;&gt;(page.getTotal(), page.getPages(), list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>UserMapper：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> 1045754</span></span><br><span class="line"><span class="comment">* <span class="doctag">@description</span> 针对表【user(用户表)】的数据库操作Mapper</span></span><br><span class="line"><span class="comment">* <span class="doctag">@createDate</span> 2024-08-07 17:27:57</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Entity</span> com.mybatisplus.domain.entity.UserEntity</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;UserEntity&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;UPDATE user SET balance = balance - #&#123;money&#125; $&#123;ew.customSqlSegment&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deductBalanceByIds</span><span class="params">(<span class="meta">@Param(&quot;money&quot;)</span> <span class="type">int</span> money, <span class="meta">@Param(&quot;ew&quot;)</span> QueryWrapper&lt;UserEntity&gt; wrapper)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到上述接口，通过引入在 <strong>Controller</strong> 层就可以完成业务接口，但是为了能够更加规范，所以对于复杂的业务，我们任然会选择将业务功能放到 <strong>Service</strong> 层去进行业务实现。</p><h3 id="③-Lambda"><a href="#③-Lambda" class="headerlink" title="③ Lambda"></a>③ Lambda</h3><p><strong>IService</strong> 中还提供了 <strong>Lambda</strong> 方法来简化我们复杂的查询和更新功能。</p><p>案例一：实现一个根据复杂条件查询用户的接口，查询条件如下：</p><ul><li><strong>name</strong> ：用户关键名称，可以为空</li><li><strong>status</strong> ：用户状态，可以为空</li><li><strong>minBalance</strong> ：最小余额，可以为空</li><li><strong>maxBalance</strong> ：最大余额，可以为空</li></ul><p>首先定义查询实体，<strong>UserQuery</strong> ：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(description = &quot;用户查询条件实体&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserQuery</span> &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户名关键字&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户状态：1-正常，2-冻结&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;余额最小值&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer minBalance;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;余额最大值&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer maxBalance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，在 <strong>UserController</strong> 中定义查询方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;根据id集合查询用户&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;UserVO&gt; <span class="title function_">queryUsers</span><span class="params">(UserQuery query)</span>&#123;</span><br><span class="line">    <span class="comment">// 1.组织条件</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> query.getName();</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">status</span> <span class="operator">=</span> query.getStatus();</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">minBalance</span> <span class="operator">=</span> query.getMinBalance();</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">maxBalance</span> <span class="operator">=</span> query.getMaxBalance();</span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;().lambda()</span><br><span class="line">            .like(username != <span class="literal">null</span>, User::getUsername, username)</span><br><span class="line">            .eq(status != <span class="literal">null</span>, User::getStatus, status)</span><br><span class="line">            .ge(minBalance != <span class="literal">null</span>, User::getBalance, minBalance)</span><br><span class="line">            .le(maxBalance != <span class="literal">null</span>, User::getBalance, maxBalance);</span><br><span class="line">    <span class="comment">// 2.查询用户</span></span><br><span class="line">    List&lt;User&gt; users = userService.list(wrapper);</span><br><span class="line">    <span class="comment">// 3.处理vo</span></span><br><span class="line">    <span class="keyword">return</span> BeanUtil.copyToList(users, UserVO.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在组织查询的时候，我们加入 <code>username != null</code> 这样的参数，表示只有当这个条件成立的时候才会添加到这个查询条件里，类似与 <strong>Mapper.xml</strong> 文件中的 <code>&lt;if&gt;</code>标签。这样就实现了动态查询效果。</p><p><strong>Service</strong> 中对<code>LambdaQueryWrapper</code>和<code>LambdaUpdateWrapper</code>的用法进一步做了简化，不需要使用 <strong>new</strong> 来创建 <strong>Wrapper</strong> ，而是直接调用 <strong>lambdaQuery</strong> 和 <strong>lambdaUpdate</strong> 方法：</p><p><strong>lambdaQuery</strong> ：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;根据id集合查询用户&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;UserVO&gt; <span class="title function_">queryUsers</span><span class="params">(UserQuery query)</span>&#123;</span><br><span class="line">    <span class="comment">// 1.组织条件l</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> query.getName();</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">status</span> <span class="operator">=</span> query.getStatus();</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">minBalance</span> <span class="operator">=</span> query.getMinBalance();</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">maxBalance</span> <span class="operator">=</span> query.getMaxBalance();</span><br><span class="line">    <span class="comment">// 2.查询用户</span></span><br><span class="line">    List&lt;User&gt; users = userService.lambdaQuery()</span><br><span class="line">            .like(username != <span class="literal">null</span>, User::getUsername, username)</span><br><span class="line">            .eq(status != <span class="literal">null</span>, User::getStatus, status)</span><br><span class="line">            .ge(minBalance != <span class="literal">null</span>, User::getBalance, minBalance)</span><br><span class="line">            .le(maxBalance != <span class="literal">null</span>, User::getBalance, maxBalance)</span><br><span class="line">            .list();</span><br><span class="line">    <span class="comment">// 3.处理vo</span></span><br><span class="line">    <span class="keyword">return</span> BeanUtil.copyToList(users, UserVO.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现 <code>lambdaQuery</code> 方法中除了可以构建条件，还需要在链式编程的最后添加一个<code>list()</code>，这是在告诉 <code>MP</code> 我们的调用结果需要是一个 <code>list</code> 集合。这里不仅可以用<code>list()</code>，可选的方法有：</p><ul><li><code>.one()</code>：最多1个结果</li><li><code>.list()</code>：返回集合结果</li><li><code>.count()</code>：返回计数结果</li></ul><p><strong>lambdaUpdate</strong> ：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deductBalance</span><span class="params">(Long id, Integer money)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.查询用户</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> getById(id);</span><br><span class="line">    <span class="comment">// 2.校验用户状态</span></span><br><span class="line">    <span class="keyword">if</span> (user == <span class="literal">null</span> || user.getStatus() == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户状态异常！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.校验余额是否充足</span></span><br><span class="line">    <span class="keyword">if</span> (user.getBalance() &lt; money) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户余额不足！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4.扣减余额 update tb_user set balance = balance - ?</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">remainBalance</span> <span class="operator">=</span> user.getBalance() - money;</span><br><span class="line">    lambdaUpdate()</span><br><span class="line">            .set(User::getBalance, remainBalance) <span class="comment">// 更新余额</span></span><br><span class="line">            .set(remainBalance == <span class="number">0</span>, User::getStatus, <span class="number">2</span>) <span class="comment">// 动态判断，是否更新status</span></span><br><span class="line">            .eq(User::getId, id)</span><br><span class="line">            .eq(User::getBalance, user.getBalance()) <span class="comment">// 乐观锁</span></span><br><span class="line">            .update();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="④-批量新增"><a href="#④-批量新增" class="headerlink" title="④ 批量新增"></a>④ 批量新增</h3><p>逐条插入：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testSaveOneByOne</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">b</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        userService.save(buildUser(i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="variable">e</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;耗时：&quot;</span> + (e - b));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> User <span class="title function_">buildUser</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setUsername(<span class="string">&quot;user_&quot;</span> + i);</span><br><span class="line">    user.setPassword(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    user.setPhone(<span class="string">&quot;&quot;</span> + (<span class="number">18688190000L</span> + i));</span><br><span class="line">    user.setBalance(<span class="number">2000</span>);</span><br><span class="line">    user.setInfo(<span class="string">&quot;&#123;\&quot;age\&quot;: 24, \&quot;intro\&quot;: \&quot;英文老师\&quot;, \&quot;gender\&quot;: \&quot;female\&quot;&#125;&quot;</span>);</span><br><span class="line">    user.setCreateTime(LocalDateTime.now());</span><br><span class="line">    user.setUpdateTime(user.getCreateTime());</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>耗时长</li><li>速度慢</li></ul><p><img src="/img/load.gif" data-original="/images/frameworks/Java/mybatisplus/a/v11.png" alt="AbstractWrapper"></p><p>批量插入：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testSaveBatch</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 准备10万条数据</span></span><br><span class="line">    List&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">1000</span>);</span><br><span class="line">    <span class="type">long</span> <span class="variable">b</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        list.add(buildUser(i));</span><br><span class="line">        <span class="comment">// 每1000条批量插入一次</span></span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">1000</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            userService.saveBatch(list);</span><br><span class="line">            list.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="variable">e</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;耗时：&quot;</span> + (e - b));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>耗时较短</li><li>速度较快</li></ul><p><img src="/img/load.gif" data-original="/images/frameworks/Java/mybatisplus/a/v12.png" alt="AbstractWrapper"></p><p>可以看到批处理后，比逐条新增的效率提高了10倍左右，性能还是不错的。</p><p>不过我们查看 <strong>MybatisPlus</strong> 源码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">saveBatch</span><span class="params">(Collection&lt;T&gt; entityList, <span class="type">int</span> batchSize)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sqlStatement</span> <span class="operator">=</span> getSqlStatement(SqlMethod.INSERT_ONE);</span><br><span class="line">    <span class="keyword">return</span> executeBatch(entityList, batchSize, (sqlSession, entity) -&gt; sqlSession.insert(sqlStatement, entity));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...SqlHelper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="type">boolean</span> <span class="title function_">executeBatch</span><span class="params">(Class&lt;?&gt; entityClass, Log log, Collection&lt;E&gt; list, <span class="type">int</span> batchSize, BiConsumer&lt;SqlSession, E&gt; consumer)</span> &#123;</span><br><span class="line">    Assert.isFalse(batchSize &lt; <span class="number">1</span>, <span class="string">&quot;batchSize must not be less than one&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> !CollectionUtils.isEmpty(list) &amp;&amp; executeBatch(entityClass, log, sqlSession -&gt; &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> list.size();</span><br><span class="line">        <span class="type">int</span> <span class="variable">idxLimit</span> <span class="operator">=</span> Math.min(batchSize, size);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (E element : list) &#123;</span><br><span class="line">            consumer.accept(sqlSession, element);</span><br><span class="line">            <span class="keyword">if</span> (i == idxLimit) &#123;</span><br><span class="line">                sqlSession.flushStatements();</span><br><span class="line">                idxLimit = Math.min(idxLimit + batchSize, size);</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现其实 <strong>MybatisPlus</strong> 的批处理是基于 <strong>PrepareStatement</strong> 的预编译模式，然后批量提交，最终在数据库执行时还是会有多条 <strong>insert</strong> 语句，逐条插入数据。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Preparing: <span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> ( username, password, phone, info, balance, create_time, update_time ) <span class="keyword">VALUES</span> ( ?, ?, ?, ?, ?, ?, ? )</span><br><span class="line">Parameters: user_1, <span class="number">123</span>, <span class="number">18688190001</span>, &quot;&quot;, <span class="number">2000</span>, <span class="number">2023</span><span class="number">-07</span><span class="number">-01</span>, <span class="number">2023</span><span class="number">-07</span><span class="number">-01</span></span><br><span class="line">Parameters: user_2, <span class="number">123</span>, <span class="number">18688190002</span>, &quot;&quot;, <span class="number">2000</span>, <span class="number">2023</span><span class="number">-07</span><span class="number">-01</span>, <span class="number">2023</span><span class="number">-07</span><span class="number">-01</span></span><br><span class="line">Parameters: user_3, <span class="number">123</span>, <span class="number">18688190003</span>, &quot;&quot;, <span class="number">2000</span>, <span class="number">2023</span><span class="number">-07</span><span class="number">-01</span>, <span class="number">2023</span><span class="number">-07</span><span class="number">-01</span></span><br></pre></td></tr></table></figure><p>而如果想要得到最佳性能，最好将多条 SQL 合并为一条：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> ( username, password, phone, info, balance, create_time, update_time )</span><br><span class="line"><span class="keyword">VALUES</span> </span><br><span class="line">(user_1, <span class="number">123</span>, <span class="number">18688190001</span>, &quot;&quot;, <span class="number">2000</span>, <span class="number">2023</span><span class="number">-07</span><span class="number">-01</span>, <span class="number">2023</span><span class="number">-07</span><span class="number">-01</span>),</span><br><span class="line">(user_2, <span class="number">123</span>, <span class="number">18688190002</span>, &quot;&quot;, <span class="number">2000</span>, <span class="number">2023</span><span class="number">-07</span><span class="number">-01</span>, <span class="number">2023</span><span class="number">-07</span><span class="number">-01</span>),</span><br><span class="line">(user_3, <span class="number">123</span>, <span class="number">18688190003</span>, &quot;&quot;, <span class="number">2000</span>, <span class="number">2023</span><span class="number">-07</span><span class="number">-01</span>, <span class="number">2023</span><span class="number">-07</span><span class="number">-01</span>),</span><br><span class="line">(user_4, <span class="number">123</span>, <span class="number">18688190004</span>, &quot;&quot;, <span class="number">2000</span>, <span class="number">2023</span><span class="number">-07</span><span class="number">-01</span>, <span class="number">2023</span><span class="number">-07</span><span class="number">-01</span>);</span><br></pre></td></tr></table></figure><p>该怎么做呢？</p><p><strong>MySQL</strong> 的客户端连接参数中，有一个 <strong>rewriteBatchedStatements</strong> ，顾名思义，就是重写批处理 <strong>statement</strong> 语句。</p><p>修改 <code>application.yml</code> 在 <code>jdbc</code> 的 <code>url</code> 后面添加参数<code>&amp;rewriteBatchedStatements=true</code> ：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/mp?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;transformedBitIsBoolean=true&amp;tinyInt1isBit=false&amp;allowMultiQueries=true&amp;serverTimezone=GMT%2B8&amp;allowPublicKeyRetrieval=true&amp;rewriteBatchedStatements=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><p>再次测试插入10万条数据，可以发现速度有明显的提升：</p><p><img src="/img/load.gif" data-original="/images/frameworks/Java/mybatisplus/a/v13.png" alt="AbstractWrapper"></p><p>在<code>ClientPreparedStatement</code>的<code>executeBatchInternal</code>中，有判断<code>rewriteBatchedStatements</code>值是否为true并重写SQL的功能：</p><p>最终，<code>SQL</code> 被重写了：</p><p><img src="/img/load.gif" data-original="/images/frameworks/Java/mybatisplus/a/v14.png" alt="AbstractWrapper"></p><h1 id="扩展功能"><a href="#扩展功能" class="headerlink" title="扩展功能"></a>扩展功能</h1><h2 id="Ⅰ代码生成"><a href="#Ⅰ代码生成" class="headerlink" title="Ⅰ代码生成"></a>Ⅰ代码生成</h2><p>在使用 <strong>MybatisPlus</strong> 以后，基础的 <strong>Mapper</strong> 、<strong>Servce</strong> 、<strong>PO</strong> 代码相对固定，重复编写也比较麻烦。</p><p>推荐利用 <strong>MyBatisX</strong> 插件进行代码生成：</p><h3 id="①-插件安装"><a href="#①-插件安装" class="headerlink" title="① 插件安装"></a>① 插件安装</h3><p><img src="/img/load.gif" data-original="/images/frameworks/Java/mybatisplus/a/v15.png" alt="AbstractWrapper"></p><h3 id="②-使用"><a href="#②-使用" class="headerlink" title="② 使用"></a>② 使用</h3><h4 id="IDEA-集成数据库："><a href="#IDEA-集成数据库：" class="headerlink" title="IDEA 集成数据库："></a><strong>IDEA</strong> 集成数据库：</h4><p><img src="/img/load.gif" data-original="/images/frameworks/Java/mybatisplus/a/v19.png" alt="AbstractWrapper"></p><p><img src="/img/load.gif" data-original="/images/frameworks/Java/mybatisplus/a/v20.png" alt="AbstractWrapper"></p><h4 id="选择生成数据："><a href="#选择生成数据：" class="headerlink" title="选择生成数据："></a>选择生成数据：</h4><p><img src="/img/load.gif" data-original="/images/frameworks/Java/mybatisplus/a/v16.png" alt="AbstractWrapper"></p><ol><li>点击右侧 <strong>Database</strong> 展开连接数据库</li><li>选择所需生成业务表，右键</li><li>点击 <strong>MybatisX-Generator</strong> 打开代码生成窗口</li></ol><h4 id="配置代码生成："><a href="#配置代码生成：" class="headerlink" title="配置代码生成："></a>配置代码生成：</h4><p><img src="/img/load.gif" data-original="/images/frameworks/Java/mybatisplus/a/v17.png" alt="AbstractWrapper"></p><p><img src="/img/load.gif" data-original="/images/frameworks/Java/mybatisplus/a/v18.png" alt="AbstractWrapper"></p><h4 id="生成结果："><a href="#生成结果：" class="headerlink" title="生成结果："></a>生成结果：</h4><p><img src="/img/load.gif" data-original="/images/frameworks/Java/mybatisplus/a/v21.png" alt="AbstractWrapper"></p><h2 id="Ⅱ-静态工具"><a href="#Ⅱ-静态工具" class="headerlink" title="Ⅱ 静态工具"></a>Ⅱ 静态工具</h2><p>有的时候 Service 之间也会相互调用，为了避免出现循环依赖问题，MybatisPlus 提供了一个静态工具类：Db ，其中的一些静态方法与 IService 中方法签名基本一致，也可以帮助我们实现 CRUD 功能：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 以静态方式调用Service中的函数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> VampireAchao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-05-03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Db</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Log</span> <span class="variable">log</span> <span class="operator">=</span> LogFactory.getLog(Db.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Db</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">/* Do not new me! */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入一条记录（选择字段，策略插入）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity 实体对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">boolean</span> <span class="title function_">save</span><span class="params">(T entity)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(entity)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> SqlHelper.execute(getEntityClass(entity), baseMapper -&gt; baseMapper.insert(entity));</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.retBool(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入（批量）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entityList 实体对象集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">boolean</span> <span class="title function_">saveBatch</span><span class="params">(Collection&lt;T&gt; entityList)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> saveBatch(entityList, IService.DEFAULT_BATCH_SIZE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入（批量）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entityList 实体对象集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> batchSize  插入批次数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">boolean</span> <span class="title function_">saveBatch</span><span class="params">(Collection&lt;T&gt; entityList, <span class="type">int</span> batchSize)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(entityList)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Class&lt;T&gt; entityClass = getEntityClass(entityList);</span><br><span class="line">        Class&lt;?&gt; mapperClass = ClassUtils.toClassConfident(getTableInfo(entityClass).getCurrentNamespace());</span><br><span class="line">        <span class="type">String</span> <span class="variable">sqlStatement</span> <span class="operator">=</span> SqlHelper.getSqlStatement(mapperClass, SqlMethod.INSERT_ONE);</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.executeBatch(entityClass, log, entityList, batchSize, (sqlSession, entity) -&gt; sqlSession.insert(sqlStatement, entity));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量修改插入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entityList 实体对象集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">boolean</span> <span class="title function_">saveOrUpdateBatch</span><span class="params">(Collection&lt;T&gt; entityList)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> saveOrUpdateBatch(entityList, IService.DEFAULT_BATCH_SIZE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量修改插入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entityList 实体对象集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> batchSize  每次的数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">boolean</span> <span class="title function_">saveOrUpdateBatch</span><span class="params">(Collection&lt;T&gt; entityList, <span class="type">int</span> batchSize)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(entityList)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Class&lt;T&gt; entityClass = getEntityClass(entityList);</span><br><span class="line">        <span class="type">TableInfo</span> <span class="variable">tableInfo</span> <span class="operator">=</span> getTableInfo(entityClass);</span><br><span class="line">        Class&lt;?&gt; mapperClass = ClassUtils.toClassConfident(tableInfo.getCurrentNamespace());</span><br><span class="line">        <span class="type">String</span> <span class="variable">keyProperty</span> <span class="operator">=</span> tableInfo.getKeyProperty();</span><br><span class="line">        Assert.notEmpty(keyProperty, <span class="string">&quot;error: can not execute. because can not find column for primary key from entity!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.saveOrUpdateBatch(entityClass, mapperClass, log, entityList, batchSize, (sqlSession, entity) -&gt; &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">idVal</span> <span class="operator">=</span> tableInfo.getPropertyValue(entity, keyProperty);</span><br><span class="line">            <span class="keyword">return</span> StringUtils.checkValNull(idVal)</span><br><span class="line">                || CollectionUtils.isEmpty(sqlSession.selectList(SqlHelper.getSqlStatement(mapperClass, SqlMethod.SELECT_BY_ID), entity));</span><br><span class="line">        &#125;, (sqlSession, entity) -&gt; &#123;</span><br><span class="line">            MapperMethod.ParamMap&lt;T&gt; param = <span class="keyword">new</span> <span class="title class_">MapperMethod</span>.ParamMap&lt;&gt;();</span><br><span class="line">            param.put(Constants.ENTITY, entity);</span><br><span class="line">            sqlSession.update(SqlHelper.getSqlStatement(mapperClass, SqlMethod.UPDATE_BY_ID), param);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 ID 删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id          主键ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entityClass 实体类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">boolean</span> <span class="title function_">removeById</span><span class="params">(Serializable id, Class&lt;T&gt; entityClass)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.execute(entityClass, baseMapper -&gt; SqlHelper.retBool(baseMapper.deleteById(id)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据实体(ID)删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity 实体</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">boolean</span> <span class="title function_">removeById</span><span class="params">(T entity)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(entity)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.execute(getEntityClass(entity), baseMapper -&gt; SqlHelper.retBool(baseMapper.deleteById(entity)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 entity 条件，删除记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体包装类 &#123;<span class="doctag">@link</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(AbstractWrapper&lt;T, ?, ?&gt; queryWrapper)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.execute(getEntityClass(queryWrapper), baseMapper -&gt; SqlHelper.retBool(baseMapper.delete(queryWrapper)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 ID 选择修改</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity 实体对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">boolean</span> <span class="title function_">updateById</span><span class="params">(T entity)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(entity)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.execute(getEntityClass(entity), baseMapper -&gt; SqlHelper.retBool(baseMapper.updateById(entity)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 UpdateWrapper 条件，更新记录 需要设置sqlset</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> updateWrapper 实体对象封装操作类 &#123;<span class="doctag">@link</span> com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">boolean</span> <span class="title function_">update</span><span class="params">(AbstractWrapper&lt;T, ?, ?&gt; updateWrapper)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> update(<span class="literal">null</span>, updateWrapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 whereEntity 条件，更新记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity        实体对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> updateWrapper 实体对象封装操作类 &#123;<span class="doctag">@link</span> com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">boolean</span> <span class="title function_">update</span><span class="params">(T entity, AbstractWrapper&lt;T, ?, ?&gt; updateWrapper)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.execute(getEntityClass(updateWrapper), baseMapper -&gt; SqlHelper.retBool(baseMapper.update(entity, updateWrapper)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据ID 批量更新</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entityList 实体对象集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">boolean</span> <span class="title function_">updateBatchById</span><span class="params">(Collection&lt;T&gt; entityList)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> updateBatchById(entityList, IService.DEFAULT_BATCH_SIZE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据ID 批量更新</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entityList 实体对象集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> batchSize  更新批次数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">boolean</span> <span class="title function_">updateBatchById</span><span class="params">(Collection&lt;T&gt; entityList, <span class="type">int</span> batchSize)</span> &#123;</span><br><span class="line">        Class&lt;T&gt; entityClass = getEntityClass(entityList);</span><br><span class="line">        <span class="type">TableInfo</span> <span class="variable">tableInfo</span> <span class="operator">=</span> getTableInfo(entityClass);</span><br><span class="line">        <span class="type">String</span> <span class="variable">sqlStatement</span> <span class="operator">=</span> SqlHelper.getSqlStatement(ClassUtils.toClassConfident(tableInfo.getCurrentNamespace()), SqlMethod.UPDATE_BY_ID);</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.executeBatch(entityClass, log, entityList, batchSize, (sqlSession, entity) -&gt; &#123;</span><br><span class="line">            MapperMethod.ParamMap&lt;T&gt; param = <span class="keyword">new</span> <span class="title class_">MapperMethod</span>.ParamMap&lt;&gt;();</span><br><span class="line">            param.put(Constants.ENTITY, entity);</span><br><span class="line">            sqlSession.update(sqlStatement, param);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除（根据ID 批量删除）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list        主键ID或实体列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entityClass 实体类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">boolean</span> <span class="title function_">removeByIds</span><span class="params">(Collection&lt;? extends Serializable&gt; list, Class&lt;T&gt; entityClass)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.execute(entityClass, baseMapper -&gt; SqlHelper.retBool(baseMapper.deleteBatchIds(list)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 columnMap 条件，删除记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> columnMap   表字段 map 对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entityClass 实体类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">boolean</span> <span class="title function_">removeByMap</span><span class="params">(Map&lt;String, Object&gt; columnMap, Class&lt;T&gt; entityClass)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.execute(entityClass, baseMapper -&gt; SqlHelper.retBool(baseMapper.deleteByMap(columnMap)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * TableId 注解存在更新记录，否插入一条记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity 实体对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">boolean</span> <span class="title function_">saveOrUpdate</span><span class="params">(T entity)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(entity)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Class&lt;T&gt; entityClass = getEntityClass(entity);</span><br><span class="line">        <span class="type">TableInfo</span> <span class="variable">tableInfo</span> <span class="operator">=</span> TableInfoHelper.getTableInfo(entityClass);</span><br><span class="line">        Assert.notNull(tableInfo, <span class="string">&quot;error: can not execute. because can not find cache of TableInfo for entity!&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">keyProperty</span> <span class="operator">=</span> tableInfo.getKeyProperty();</span><br><span class="line">        Assert.notEmpty(keyProperty, <span class="string">&quot;error: can not execute. because can not find column for id from entity!&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">idVal</span> <span class="operator">=</span> tableInfo.getPropertyValue(entity, tableInfo.getKeyProperty());</span><br><span class="line">        <span class="keyword">return</span> StringUtils.checkValNull(idVal) || Objects.isNull(getById((Serializable) idVal, entityClass)) ? save(entity) : updateById(entity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 ID 查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id          主键ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entityClass 实体类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getById</span><span class="params">(Serializable id, Class&lt;T&gt; entityClass)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.execute(entityClass, baseMapper -&gt; baseMapper.selectById(id));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 Wrapper，查询一条记录 &lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;结果集，如果是多个会抛出异常，随机取一条加上限制条件 wrapper.last(&quot;LIMIT 1&quot;)&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类 &#123;<span class="doctag">@link</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getOne</span><span class="params">(AbstractWrapper&lt;T, ?, ?&gt; queryWrapper)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getOne(queryWrapper, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 entity里不为空的字段，查询一条记录 &lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;结果集，如果是多个会抛出异常，随机取一条加上限制条件 wrapper.last(&quot;LIMIT 1&quot;)&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity 实体对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getOne</span><span class="params">(T entity)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getOne(Wrappers.lambdaQuery(entity), <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 entity里不为空的字段，查询一条记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity  实体对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> throwEx 有多个 result 是否抛出异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getOne</span><span class="params">(T entity, <span class="type">boolean</span> throwEx)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getOne(Wrappers.lambdaQuery(entity), throwEx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 Wrapper，查询一条记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类 &#123;<span class="doctag">@link</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> throwEx      有多个 result 是否抛出异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getOne</span><span class="params">(AbstractWrapper&lt;T, ?, ?&gt; queryWrapper, <span class="type">boolean</span> throwEx)</span> &#123;</span><br><span class="line">        Class&lt;T&gt; entityClass = getEntityClass(queryWrapper);</span><br><span class="line">        <span class="keyword">if</span> (throwEx) &#123;</span><br><span class="line">            <span class="keyword">return</span> SqlHelper.execute(entityClass, baseMapper -&gt; baseMapper.selectOne(queryWrapper));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.execute(entityClass, baseMapper -&gt; SqlHelper.getObject(log, baseMapper.selectList(queryWrapper)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询（根据 columnMap 条件）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> columnMap   表字段 map 对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entityClass 实体类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">listByMap</span><span class="params">(Map&lt;String, Object&gt; columnMap, Class&lt;T&gt; entityClass)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.execute(entityClass, baseMapper -&gt; baseMapper.selectByMap(columnMap));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询（根据ID 批量查询）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> idList      主键ID列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entityClass 实体类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">listByIds</span><span class="params">(Collection&lt;? extends Serializable&gt; idList, Class&lt;T&gt; entityClass)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.execute(entityClass, baseMapper -&gt; baseMapper.selectBatchIds(idList));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 Wrapper，查询一条记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类 &#123;<span class="doctag">@link</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Map&lt;String, Object&gt; <span class="title function_">getMap</span><span class="params">(AbstractWrapper&lt;T, ?, ?&gt; queryWrapper)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.execute(getEntityClass(queryWrapper), baseMapper -&gt; SqlHelper.getObject(log, baseMapper.selectMaps(queryWrapper)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 entity不为空条件，查询一条记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity 实体对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Map&lt;String, Object&gt; <span class="title function_">getMap</span><span class="params">(T entity)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getMap(Wrappers.lambdaQuery(entity));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询总记录数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entityClass 实体类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> Wrappers#emptyWrapper()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">long</span> <span class="title function_">count</span><span class="params">(Class&lt;T&gt; entityClass)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.execute(entityClass, baseMapper -&gt; baseMapper.selectCount(<span class="literal">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据entity中不为空的数据查询记录数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity 实体类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">long</span> <span class="title function_">count</span><span class="params">(T entity)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count(Wrappers.lambdaQuery(entity));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 Wrapper 条件，查询总记录数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类 &#123;<span class="doctag">@link</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">long</span> <span class="title function_">count</span><span class="params">(AbstractWrapper&lt;T, ?, ?&gt; queryWrapper)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.execute(getEntityClass(queryWrapper), baseMapper -&gt; baseMapper.selectCount(queryWrapper));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类 &#123;<span class="doctag">@link</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">list</span><span class="params">(AbstractWrapper&lt;T, ?, ?&gt; queryWrapper)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.execute(getEntityClass(queryWrapper), baseMapper -&gt; baseMapper.selectList(queryWrapper));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page         分页条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类 &#123;<span class="doctag">@link</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;          entity</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 列表数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">list</span><span class="params">(IPage&lt;T&gt; page, AbstractWrapper&lt;T, ?, ?&gt; queryWrapper)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.execute(getEntityClass(queryWrapper), baseMapper -&gt; baseMapper.selectList(page, queryWrapper));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entityClass 实体类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> Wrappers#emptyWrapper()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">list</span><span class="params">(Class&lt;T&gt; entityClass)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.execute(entityClass, baseMapper -&gt; baseMapper.selectList(<span class="literal">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page        分页条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entityClass 实体类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;         entity</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 列表数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 3.5.3.2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">list</span><span class="params">(IPage&lt;T&gt; page, Class&lt;T&gt; entityClass)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.execute(entityClass, baseMapper -&gt; baseMapper.selectList(page, <span class="literal">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据entity中不为空的字段进行查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity 实体类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> Wrappers#emptyWrapper()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">list</span><span class="params">(T entity)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list(Wrappers.lambdaQuery(entity));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据entity中不为空的字段进行查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page   分页条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity 实体类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;    entity</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 列表数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 3.5.3.2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">list</span><span class="params">(IPage&lt;T&gt; page, T entity)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list(page, Wrappers.lambdaQuery(entity));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类 &#123;<span class="doctag">@link</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">listMaps</span><span class="params">(AbstractWrapper&lt;T, ?, ?&gt; queryWrapper)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.execute(getEntityClass(queryWrapper), baseMapper -&gt; baseMapper.selectMaps(queryWrapper));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 3.5.3.2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page 分页参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper queryWrapper 实体对象封装操作类 &#123;<span class="doctag">@link</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 列表数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; entity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">listMaps</span><span class="params">(IPage&lt;? extends Map&lt;String, Object&gt;&gt; page, AbstractWrapper&lt;T, ?, ?&gt; queryWrapper)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.execute(getEntityClass(queryWrapper), baseMapper -&gt; baseMapper.selectMaps(page, queryWrapper));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entityClass 实体类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> Wrappers#emptyWrapper()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">listMaps</span><span class="params">(Class&lt;T&gt; entityClass)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.execute(entityClass, baseMapper -&gt; baseMapper.selectMaps(<span class="literal">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page        分页条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entityClass 实体类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;         entity</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 列表数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 3.5.3.2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">listMaps</span><span class="params">(IPage&lt;? extends Map&lt;String, Object&gt;&gt; page, Class&lt;T&gt; entityClass)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.execute(entityClass, baseMapper -&gt; baseMapper.selectMaps(page, <span class="literal">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据entity不为空的条件查询列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity 实体类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">listMaps</span><span class="params">(T entity)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> listMaps(Wrappers.lambdaQuery(entity));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据entity不为空的条件查询列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page   分页条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity entity</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;    entity</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 列表数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 3.5.3.2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">listMaps</span><span class="params">(IPage&lt;? extends Map&lt;String, Object&gt;&gt; page, T entity)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> listMaps(page, Wrappers.lambdaQuery(entity));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询全部记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entityClass 实体类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">listObjs</span><span class="params">(Class&lt;T&gt; entityClass)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> listObjs(entityClass, i -&gt; i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 Wrapper 条件，查询全部记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类 &#123;<span class="doctag">@link</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;E, T&gt; List&lt;E&gt; <span class="title function_">listObjs</span><span class="params">(AbstractWrapper&lt;T, ?, ?&gt; queryWrapper)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.execute(getEntityClass(queryWrapper), baseMapper -&gt; baseMapper.selectObjs(queryWrapper));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 Wrapper 条件，查询全部记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类 &#123;<span class="doctag">@link</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mapper       转换函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T, V&gt; List&lt;V&gt; <span class="title function_">listObjs</span><span class="params">(AbstractWrapper&lt;T, ?, ?&gt; queryWrapper, SFunction&lt;? <span class="built_in">super</span> T, V&gt; mapper)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.execute(getEntityClass(queryWrapper), baseMapper -&gt; baseMapper.selectList(queryWrapper).stream().map(mapper).collect(Collectors.toList()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询全部记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entityClass 实体类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mapper      转换函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T, V&gt; List&lt;V&gt; <span class="title function_">listObjs</span><span class="params">(Class&lt;T&gt; entityClass, SFunction&lt;? <span class="built_in">super</span> T, V&gt; mapper)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.execute(entityClass, baseMapper -&gt; baseMapper.selectList(<span class="literal">null</span>).stream().map(mapper).collect(Collectors.toList()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无条件翻页查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page        翻页对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entityClass 实体类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> Wrappers#emptyWrapper()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T, E <span class="keyword">extends</span> <span class="title class_">IPage</span>&lt;Map&lt;String, Object&gt;&gt;&gt; E <span class="title function_">pageMaps</span><span class="params">(E page, Class&lt;T&gt; entityClass)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.execute(entityClass, baseMapper -&gt; baseMapper.selectMapsPage(page, <span class="literal">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 翻页查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page         翻页对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类 &#123;<span class="doctag">@link</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T, E <span class="keyword">extends</span> <span class="title class_">IPage</span>&lt;Map&lt;String, Object&gt;&gt;&gt; E <span class="title function_">pageMaps</span><span class="params">(E page, AbstractWrapper&lt;T, ?, ?&gt; queryWrapper)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.execute(getEntityClass(queryWrapper), baseMapper -&gt; baseMapper.selectMapsPage(page, queryWrapper));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无条件翻页查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page        翻页对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entityClass 实体类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> Wrappers#emptyWrapper()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; IPage&lt;T&gt; <span class="title function_">page</span><span class="params">(IPage&lt;T&gt; page, Class&lt;T&gt; entityClass)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.execute(entityClass, baseMapper -&gt; baseMapper.selectPage(page, <span class="literal">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 翻页查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page         翻页对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类 &#123;<span class="doctag">@link</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; IPage&lt;T&gt; <span class="title function_">page</span><span class="params">(IPage&lt;T&gt; page, AbstractWrapper&lt;T, ?, ?&gt; queryWrapper)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.execute(getEntityClass(queryWrapper), baseMapper -&gt; baseMapper.selectPage(page, queryWrapper));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链式查询 普通</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> QueryWrapper 的包装类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; QueryChainWrapper&lt;T&gt; <span class="title function_">query</span><span class="params">(Class&lt;T&gt; entityClass)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ChainWrappers.queryChain(entityClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * kt链式查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> KtQueryWrapper 的包装类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; KtQueryChainWrapper&lt;T&gt; <span class="title function_">ktQuery</span><span class="params">(Class&lt;T&gt; entityClass)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ChainWrappers.ktQueryChain(entityClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链式查询 lambda 式</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;注意：不支持 Kotlin &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> LambdaQueryWrapper 的包装类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; LambdaQueryChainWrapper&lt;T&gt; <span class="title function_">lambdaQuery</span><span class="params">(Class&lt;T&gt; entityClass)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ChainWrappers.lambdaQueryChain(entityClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链式更改 普通</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> UpdateWrapper 的包装类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; UpdateChainWrapper&lt;T&gt; <span class="title function_">update</span><span class="params">(Class&lt;T&gt; entityClass)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ChainWrappers.updateChain(entityClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * kt链式更改</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> KtUpdateWrapper 的包装类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; KtUpdateChainWrapper&lt;T&gt; <span class="title function_">ktUpdate</span><span class="params">(Class&lt;T&gt; entityClass)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ChainWrappers.ktUpdateChain(entityClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链式更改 lambda 式</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;注意：不支持 Kotlin &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> LambdaUpdateWrapper 的包装类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; LambdaUpdateChainWrapper&lt;T&gt; <span class="title function_">lambdaUpdate</span><span class="params">(Class&lt;T&gt; entityClass)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ChainWrappers.lambdaUpdateChain(entityClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 根据updateWrapper尝试更新，否继续执行saveOrUpdate(T)方法</span></span><br><span class="line"><span class="comment">     * 此次修改主要是减少了此项业务代码的代码量（存在性验证之后的saveOrUpdate操作）</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity 实体对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">boolean</span> <span class="title function_">saveOrUpdate</span><span class="params">(T entity, AbstractWrapper&lt;T, ?, ?&gt; updateWrapper)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> update(entity, updateWrapper) || saveOrUpdate(entity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 Wrapper，查询一条记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类 &#123;<span class="doctag">@link</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mapper       转换函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T, V&gt; V <span class="title function_">getObj</span><span class="params">(AbstractWrapper&lt;T, ?, ?&gt; queryWrapper, SFunction&lt;? <span class="built_in">super</span> T, V&gt; mapper)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.execute(getEntityClass(queryWrapper), baseMapper -&gt; mapper.apply(baseMapper.selectOne(queryWrapper)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从集合中获取实体类型</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entityList 实体集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;        实体类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 实体类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> &lt;T&gt; Class&lt;T&gt; <span class="title function_">getEntityClass</span><span class="params">(Collection&lt;T&gt; entityList)</span> &#123;</span><br><span class="line">        Class&lt;T&gt; entityClass = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (T entity : entityList) &#123;</span><br><span class="line">            <span class="keyword">if</span> (entity != <span class="literal">null</span> &amp;&amp; entity.getClass() != <span class="literal">null</span>) &#123;</span><br><span class="line">                entityClass = getEntityClass(entity);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Assert.notNull(entityClass, <span class="string">&quot;error: can not get entityClass from entityList&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> entityClass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从wrapper中尝试获取实体类型</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 条件构造器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;          实体类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 实体类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> &lt;T&gt; Class&lt;T&gt; <span class="title function_">getEntityClass</span><span class="params">(AbstractWrapper&lt;T, ?, ?&gt; queryWrapper)</span> &#123;</span><br><span class="line">        Class&lt;T&gt; entityClass = queryWrapper.getEntityClass();</span><br><span class="line">        <span class="keyword">if</span> (entityClass == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">T</span> <span class="variable">entity</span> <span class="operator">=</span> queryWrapper.getEntity();</span><br><span class="line">            <span class="keyword">if</span> (entity != <span class="literal">null</span>) &#123;</span><br><span class="line">                entityClass = getEntityClass(entity);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Assert.notNull(entityClass, <span class="string">&quot;error: can not get entityClass from wrapper&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> entityClass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从entity中尝试获取实体类型</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity 实体</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;    实体类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 实体类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> &lt;T&gt; Class&lt;T&gt; <span class="title function_">getEntityClass</span><span class="params">(T entity)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Class&lt;T&gt;) entity.getClass();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取表信息，获取不到报错提示</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entityClass 实体类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;         实体类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对应表信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> &lt;T&gt; TableInfo <span class="title function_">getTableInfo</span><span class="params">(Class&lt;T&gt; entityClass)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(TableInfoHelper.getTableInfo(entityClass)).orElseThrow(() -&gt; ExceptionUtils.mpe(<span class="string">&quot;error: can not find TableInfo from Class: \&quot;%s\&quot;.&quot;</span>, entityClass.getName()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testDbGet</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> Db.getById(<span class="number">1L</span>, User.class);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testDbList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 利用Db实现复杂条件查询</span></span><br><span class="line">    List&lt;User&gt; list = Db.lambdaQuery(User.class)</span><br><span class="line">            .like(User::getUsername, <span class="string">&quot;o&quot;</span>)</span><br><span class="line">            .ge(User::getBalance, <span class="number">1000</span>)</span><br><span class="line">            .list();</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testDbUpdate</span><span class="params">()</span> &#123;</span><br><span class="line">    Db.lambdaUpdate(User.class)</span><br><span class="line">            .set(User::getBalance, <span class="number">2000</span>)</span><br><span class="line">            .eq(User::getUsername, <span class="string">&quot;Rose&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需求：改造根据 id 查询用户接口，查询用户的同时返回用户收获地址列表：</p><p><strong>UserVO：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户表VO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lixuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2024/8/7 17:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserVO</span> <span class="keyword">extends</span> <span class="title class_">UserEntity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Serial</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Schema(description = &quot;地址列表&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;AddressVO&gt; addressList;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加一个地址列表的属性</p><p><strong>UserController：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询用户并且对应其地址足迹</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/getUserAndAddress/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@Operation(summary = &quot;查询用户并且对应其地址足迹 getUserAndAddress/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> UserVO <span class="title function_">getUserAndAddress</span><span class="params">(<span class="meta">@Parameter(description = &quot;用户ID&quot;)</span> <span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//获取用户</span></span><br><span class="line">    <span class="type">UserEntity</span> <span class="variable">userEntity</span> <span class="operator">=</span> userService.getById(id);</span><br><span class="line">    <span class="keyword">if</span> (userEntity == <span class="literal">null</span> || userEntity.getStatus() == UserStatus.FREEZE) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户状态异常！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//转换Vo</span></span><br><span class="line">    <span class="type">UserVO</span> <span class="variable">userVO</span> <span class="operator">=</span> BeanUtil.copyProperties(userEntity, UserVO.class);</span><br><span class="line">    <span class="comment">//获取地址列表</span></span><br><span class="line">    List&lt;AddressEntity&gt; addressEntityList = addressService.list(Wrappers.lambdaQuery(AddressEntity.class)</span><br><span class="line">            .eq(AddressEntity::getUserId, id));</span><br><span class="line">    <span class="comment">//转换列表VO</span></span><br><span class="line">    <span class="keyword">if</span> (CollUtil.isNotEmpty(addressEntityList)) &#123;</span><br><span class="line">        List&lt;AddressVO&gt; addressVOList = BeanUtil.copyToList(addressEntityList, AddressVO.class);</span><br><span class="line">        userVO.setAddressList(addressVOList);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> userVO;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需求：根据id批量查询用户，并查询出用户对应的所有地址</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据ids批量查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/getUserByIds&quot;)</span></span><br><span class="line"><span class="meta">@Operation(summary = &quot;根据ids批量查询 getUserByIds&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;UserVO&gt; <span class="title function_">getUserByIds</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;Long&gt; ids)</span> &#123;</span><br><span class="line">    <span class="comment">//1、查询用户</span></span><br><span class="line">    List&lt;UserEntity&gt; userEntityList = userService.listByIds(ids);</span><br><span class="line">    <span class="keyword">if</span> (CollUtil.isEmpty(userEntityList)) &#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2查询地址列表</span></span><br><span class="line">    List&lt;AddressEntity&gt; addressEntityList = addressService.list(Wrappers.lambdaQuery(AddressEntity.class)</span><br><span class="line">            .in(AddressEntity::getUserId, ids));</span><br><span class="line">    <span class="comment">//转为Vo列表</span></span><br><span class="line">    List&lt;UserVO&gt; userVOList = BeanUtil.copyToList(userEntityList, UserVO.class);</span><br><span class="line">    <span class="comment">//根据UserId转为Map</span></span><br><span class="line">    Map&lt;Long, List&lt;AddressEntity&gt;&gt; addressEntityMap = addressEntityList.stream()</span><br><span class="line">            .collect(Collectors.groupingBy(AddressEntity::getUserId));</span><br><span class="line">    userVOList.forEach(userVO -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (userVO.getStatus() == UserStatus.FREEZE) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;用户&#123;&#125;状态异常！！&quot;</span>, userVO.getUsername());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、获取对应地址列表</span></span><br><span class="line">        Optional.ofNullable(addressEntityMap.get(userVO.getId()))</span><br><span class="line">                .ifPresent(addressEntities -&gt; &#123;</span><br><span class="line">                    <span class="comment">//2、转换为Vo地址列表</span></span><br><span class="line">                    List&lt;AddressVO&gt; addressVOList = BeanUtil.copyToList(addressEntities, AddressVO.class);</span><br><span class="line">                    <span class="comment">//3、注入Vo</span></span><br><span class="line">                    userVO.setAddressList(addressVOList);</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> userVOList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Ⅲ-逻辑删除"><a href="#Ⅲ-逻辑删除" class="headerlink" title="Ⅲ 逻辑删除"></a>Ⅲ 逻辑删除</h2><p>对于一些比较重要的数据，我们往往会采用逻辑删除的方式，而不是直接将其冲数据库中删除。</p><ul><li>在表中添加一个字段标记数据是否被删除</li><li>当删除数据时把标记置为true</li><li>查询时过滤掉标记为true的数据</li></ul><p><strong>MybatisPlus</strong> 就添加了对逻辑删除的支持：</p><p><code>注意，只有MybatisPlus生成的SQL语句才支持自动的逻辑删除，自定义SQL需要自己手动处理逻辑删除。</code></p><p>例如，给 <strong>adress</strong> 表添加逻辑删除字段：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> address <span class="keyword">add</span> deleted bit <span class="keyword">default</span> b<span class="string">&#x27;0&#x27;</span> <span class="keyword">null</span> comment <span class="string">&#x27;逻辑删除&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>AdressEntity：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 地址表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lixuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@TableName</span> address</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@TableName(value =&quot;address&quot;)</span></span><br><span class="line"><span class="meta">@Schema(description = &quot;地址表&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressEntity</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;id&quot;)</span></span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;用户ID&quot;)</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;user_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 省</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;省&quot;)</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;province&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 市</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;市&quot;)</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;city&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 县/区</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;县/区&quot;)</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;town&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String town;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;手机&quot;)</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;mobile&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String mobile;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 详细地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;详细地址&quot;)</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;street&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String street;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 联系人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;联系人&quot;)</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;contact&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String contact;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否是默认 1默认 0否</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;是否是默认 1默认 0否&quot;)</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;is_default&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean isDefault;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 备注</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;备注&quot;)</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;notes&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String notes;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 逻辑删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;逻辑删除&quot;)</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;deleted&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean deleted;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Serial</span></span><br><span class="line">    <span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>application.yml：</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-delete-field:</span> <span class="string">deleted</span> <span class="comment"># 全局逻辑删除的实体字段名(since 3.3.0,配置后可以忽略不配置步骤2)</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span> <span class="comment"># 逻辑已删除值(默认为 1)</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span> <span class="comment"># 逻辑未删除值(默认为 0)</span></span><br></pre></td></tr></table></figure><p>方法与普通的方法一样，但是底层的逻辑已经改变了：</p><p><img src="/img/load.gif" data-original="/images/frameworks/Java/mybatisplus/a/v22.png" alt="AbstractWrapper"></p><p>查询：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testQuery</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Address&gt; list = addressService.list();</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会发现 <strong>id</strong> 为59的确实没有查询出来，而且 <strong>SQL</strong> 中也对逻辑删除字段做了判断：</p><p><img src="/img/load.gif" data-original="/images/frameworks/Java/mybatisplus/a/v23.png" alt="AbstractWrapper"></p><p>综上， 开启了逻辑删除功能以后，我们就可以像普通删除一样做CRUD，基本不用考虑代码逻辑问题。还是非常方便的。</p><blockquote><p><strong>注意</strong>： 逻辑删除本身也有自己的问题，比如：</p><ul><li>会导致数据库表垃圾数据越来越多，从而影响查询效率</li><li>SQL中全都需要对逻辑删除字段做判断，影响查询效率</li></ul></blockquote><h2 id="Ⅳ-通用枚举"><a href="#Ⅳ-通用枚举" class="headerlink" title="Ⅳ 通用枚举"></a>Ⅳ 通用枚举</h2><p><strong>UserEntity</strong> 中有一个用户状态</p><p><img src="/img/load.gif" data-original="/images/frameworks/Java/mybatisplus/a/v24.png" alt="AbstractWrapper"></p><p>像这种字段，我们一般会定义一个枚举，做业务判断的时候，就可以直接基于枚举比较，但是我们数据库采用的是 <strong>int</strong> 型，对应的 <strong>PO</strong> 也是一个 <strong>Integer</strong> 。因此业务操作时必须手动转换枚举和 <strong>Integer</strong> 。</p><p>但是 <strong>MybatisPlus</strong> 提供了一个处理枚举类型的类型转换器，可以帮我们把<code>枚举类型和数据库类型自动转换</code>。</p><h3 id="①-定义枚举"><a href="#①-定义枚举" class="headerlink" title="① 定义枚举"></a>① 定义枚举</h3><p>定义一个用户状态枚举：</p><p><img src="/img/load.gif" data-original="/images/frameworks/Java/mybatisplus/a/v25.png" alt="AbstractWrapper"></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">UserStatus</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户账号状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    NORMAL(<span class="number">1</span>, <span class="string">&quot;正常&quot;</span>),</span><br><span class="line">    FREEZE(<span class="number">2</span>, <span class="string">&quot;冻结&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EnumValue</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> value;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * JSON 响应时返回的属性值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@JsonValue</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String desc;</span><br><span class="line"></span><br><span class="line">    UserStatus(<span class="type">int</span> value, String desc) &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后将 <code>UserEntity</code> 类中的 <code>status</code> 字段改为 <code>UserStatus</code> 类型：</p><p><img src="/img/load.gif" data-original="/images/frameworks/Java/mybatisplus/a/v26.png" alt="AbstractWrapper"></p><p>当然，要让 <code>MybatisPlus</code> 处理枚举与数据库自动类型转换，我们必须要告诉 <code>MybatisPlus</code> ，枚举中的哪个字段值作为数据库值。</p><p><code>MybatisPlus</code> 提供了 <code>@EnumValue</code> 来标记枚举属性</p><h3 id="②-配置枚举处理器"><a href="#②-配置枚举处理器" class="headerlink" title="② 配置枚举处理器"></a>② 配置枚举处理器</h3><p>在 <strong>application.yml</strong> 中添加配置：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">default-enum-type-handler:</span> <span class="string">com.baomidou.mybatisplus.core.handlers.MybatisEnumTypeHandler</span></span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 枚举处理测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testService</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;UserEntity&gt; list = userService.list();</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终，查询出的<code>User</code>类的<code>status</code>字段会是枚举类型：</p><p><img src="/img/load.gif" data-original="/images/frameworks/Java/mybatisplus/a/v27.png" alt="AbstractWrapper"></p><p>同时，为了使页面查询结果也是枚举格式，我们需要修改UserVO中的status属性</p><p>并且，在UserStatus枚举中通过<code>@JsonValue</code>注解标记JSON序列化时展示的字段：</p><p><img src="/img/load.gif" data-original="/images/frameworks/Java/mybatisplus/a/v28.png" alt="AbstractWrapper"></p><p>最后，在页面查询，结果如下：</p><p><img src="/img/load.gif" data-original="/images/frameworks/Java/mybatisplus/a/v29.png" alt="AbstractWrapper"></p><h2 id="Ⅴ-JSON-类型处理器"><a href="#Ⅴ-JSON-类型处理器" class="headerlink" title="Ⅴ JSON 类型处理器"></a>Ⅴ JSON 类型处理器</h2><p>数据库的user表中有一个<code>info</code>字段，是 <strong>JSON</strong> 类型：</p><p><img src="/img/load.gif" data-original="/images/frameworks/Java/mybatisplus/a/v30.png" alt="AbstractWrapper"></p><p>格式：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span> <span class="attr">&quot;intro&quot;</span><span class="punctuation">:</span> <span class="string">&quot;佛系青年&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;male&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>而目前<code>UserEntity</code>实体类中却是<code>String</code>类型：</p><p><img src="/img/load.gif" data-original="/images/frameworks/Java/mybatisplus/a/v31.png" alt="AbstractWrapper"></p><p>这样一来，我们要读取info中的属性时就非常不方便。如果要方便获取，info的类型最好是一个<code>Map</code>或者实体类。</p><p>而一旦我们把<code>info</code>改为<code>对象</code>类型，就需要在写入数据库时手动转为<code>String</code>，再读取数据库时，手动转换为<code>对象</code>，这会非常麻烦。</p><p>因此MybatisPlus提供了很多特殊类型字段的类型处理器，解决特殊字段类型与数据库类型转换的问题。例如处理JSON就可以使用<code>JacksonTypeHandler</code>处理器。</p><h3 id="①-定义实体"><a href="#①-定义实体" class="headerlink" title="① 定义实体"></a>① 定义实体</h3><p><img src="/img/load.gif" data-original="/images/frameworks/Java/mybatisplus/a/v32.png" alt="AbstractWrapper"></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Json UserInfo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lixuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2024/8/9 9:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor(staticName = &quot;of&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String intro;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="②-使用类型处理器"><a href="#②-使用类型处理器" class="headerlink" title="② 使用类型处理器"></a>② 使用类型处理器</h3><p>将 UserEntity 类的 info 字段修改为 UserInfo 类型，并声明类型处理器：</p><p><img src="/img/load.gif" data-original="/images/frameworks/Java/mybatisplus/a/v33.png" alt="AbstractWrapper"></p><h1 id="插件功能"><a href="#插件功能" class="headerlink" title="插件功能"></a>插件功能</h1><p>MybatisPlus提供了很多的插件功能，进一步拓展其功能。目前已有的插件有：</p><ul><li><code>PaginationInnerInterceptor</code>：自动分页</li><li><code>TenantLineInnerInterceptor</code>：多租户</li><li><code>DynamicTableNameInnerInterceptor</code>：动态表名</li><li><code>OptimisticLockerInnerInterceptor</code>：乐观锁</li><li><code>IllegalSQLInnerInterceptor</code>：sql 性能规范</li><li><code>BlockAttackInnerInterceptor</code>：防止全表更新与删除</li></ul><blockquote><p><strong>注意：</strong> 使用多个分页插件的时候需要注意插件定义顺序，建议使用顺序如下：</p><ul><li>多租户,动态表名</li><li>分页,乐观锁</li><li>sql 性能规范,防止全表更新与删除</li></ul></blockquote><h2 id="Ⅰ分页插件"><a href="#Ⅰ分页插件" class="headerlink" title="Ⅰ分页插件"></a>Ⅰ分页插件</h2><p>在未引入分页插件的情况下，<code>MybatisPlus</code>是不支持分页功能的，<code>IService</code>和<code>BaseMapper</code>中的分页方法都无法正常起效。 所以，我们必须配置分页插件。</p><h3 id="①-配置分页插件"><a href="#①-配置分页插件" class="headerlink" title="① 配置分页插件"></a>① 配置分页插件</h3><p>在 <strong>config</strong> 下配置分页插件</p><p><img src="/img/load.gif" data-original="/images/frameworks/Java/mybatisplus/a/v34.png" alt="AbstractWrapper"></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页拦截器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lixuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2024/8/8 9:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个mybatisPlus的拦截器 再 add一个分页拦截器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1.初始化核心插件</span></span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">mybatisPlusInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="comment">//2.添加分页插件</span></span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="②-分页-API"><a href="#②-分页-API" class="headerlink" title="② 分页 API"></a>② 分页 API</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testPageQuery</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1.分页查询，new Page()的两个参数分别是：页码、每页大小</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">current</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    Page&lt;UserEntity&gt; page = Page.of(current, size);</span><br><span class="line">    <span class="comment">// 1.2、排序</span></span><br><span class="line">    page.addOrder(OrderItem.asc(<span class="string">&quot;balance&quot;</span>));</span><br><span class="line">    page.addOrder(OrderItem.desc(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">    Page&lt;UserEntity&gt; p = userService.page(page);</span><br><span class="line">    <span class="comment">// 2.总条数</span></span><br><span class="line">    System.out.println(<span class="string">&quot;total = &quot;</span> + p.getTotal());</span><br><span class="line">    <span class="comment">// 3.总页数</span></span><br><span class="line">    System.out.println(<span class="string">&quot;pages = &quot;</span> + p.getPages());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.数据</span></span><br><span class="line">    List&lt;UserEntity&gt; records = p.getRecords();</span><br><span class="line">    records.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/load.gif" data-original="/images/frameworks/Java/mybatisplus/a/v35.png" alt="AbstractWrapper"></p><p>这里用到了分页参数，<strong>Page</strong> ，即可以支持分页参数，也可以支持排序参数。常见的 <strong>API</strong> 如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">pageNo</span> <span class="operator">=</span> <span class="number">1</span>, pageSize = <span class="number">5</span>;</span><br><span class="line"><span class="comment">// 分页参数</span></span><br><span class="line">Page&lt;User&gt; page = Page.of(pageNo, pageSize);</span><br><span class="line"><span class="comment">// 排序参数, 通过OrderItem来指定</span></span><br><span class="line">page.addOrder(<span class="keyword">new</span> <span class="title class_">OrderItem</span>(<span class="string">&quot;balance&quot;</span>, <span class="literal">false</span>));</span><br><span class="line"></span><br><span class="line">userService.page(page);</span><br></pre></td></tr></table></figure><h2 id="Ⅱ-通用分页实体"><a href="#Ⅱ-通用分页实体" class="headerlink" title="Ⅱ 通用分页实体"></a>Ⅱ 通用分页实体</h2><p>现在要实现一个用户分页查询的接口，接口规范如下：</p><table border="1" cellpadding="10" cellspacing="0" style="border-collapse: collapse; width: 100%; text-align: left;">  <thead>    <tr>      <th style="background-color: #e0f7fa; color: #00796b;">参数</th>      <th style="background-color: #e0f7fa; color: #00796b;">说明</th>    </tr>  </thead>  <tbody>    <tr>      <td>请求方式</td>      <td>GET</td>    </tr>    <tr>      <td>请求路径</td>      <td>/users/page</td>    </tr>    <tr>      <td>请求参数</td>      <td>        <pre style="background-color: #050917; border: 1px solid rgb(5,9,23); border-radius: 4px; padding: 10px;">{  "pageNo": 1,  "pageSize": 5,  "sortBy": "balance",  "isAsc": false,  "name": "o",  "status": 1}        </pre>      </td>    </tr>    <tr>      <td>返回值</td>      <td>        <pre style="background-color: #050917; border: 1px solid rgb(5,9,23); border-radius: 4px; padding: 10px;">{  "total": 100006,  "pages": 50003,  "list": [    {      "id": 1685100878975279298,      "username": "user_9****",      "info": {        "age": 24,        "intro": "英文老师",        "gender": "female"      },      "status": "正常",      "balance": 2000    }  ]}        </pre>      </td>    </tr>    <tr>      <td>特殊说明</td>      <td>如果排序字段为空，默认按照更新时间排序；如果排序字段不为空，则按照排序字段排序。</td>    </tr>  </tbody></table><p>这里需要定义3个实体：</p><ul><li><code>UserQuery</code>：分页查询条件的实体，包含分页、排序参数、过滤条件</li><li><code>PageDTO</code>：分页结果实体，包含总条数、总页数、当前页数据</li><li><code>UserVO</code>：用户页面视图实体</li></ul><h3 id="①-实体"><a href="#①-实体" class="headerlink" title="① 实体"></a>① 实体</h3><p><strong>UserQuery：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="meta">@Schema(description = &quot;用户查询条件实体&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserQuery</span> <span class="keyword">extends</span> <span class="title class_">PageQuery</span> &#123;</span><br><span class="line">    <span class="meta">@Schema(description = &quot;用户名关键字&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Schema(description = &quot;用户状态：1-正常，2-冻结&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">    <span class="meta">@Schema(description = &quot;余额最小值&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer minBalance;</span><br><span class="line">    <span class="meta">@Schema(description = &quot;余额最大值&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer maxBalance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>PageQuery：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Schema(description = &quot;分页查询实体&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageQuery</span> &#123;</span><br><span class="line">    <span class="meta">@Schema(description = &quot;页码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long pageNo;</span><br><span class="line">    <span class="meta">@Schema(description = &quot;页码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long pageSize;</span><br><span class="line">    <span class="meta">@Schema(description = &quot;排序字段&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String sortBy;</span><br><span class="line">    <span class="meta">@Schema(description = &quot;是否升序&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean isAsc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Page&lt;T&gt; <span class="title function_">toMpPage</span><span class="params">(OrderItem... orders)</span>&#123;</span><br><span class="line">        <span class="comment">// 1.分页条件</span></span><br><span class="line">        Page&lt;T&gt; p = Page.of(pageNo, pageSize);</span><br><span class="line">        <span class="comment">// 2.排序条件</span></span><br><span class="line">        <span class="comment">// 2.1.先看前端有没有传排序字段</span></span><br><span class="line">        <span class="keyword">if</span> (sortBy != <span class="literal">null</span>) &#123;</span><br><span class="line">            p.addOrder(isAsc!= <span class="literal">null</span>&amp;&amp; isAsc ? OrderItem.asc(sortBy) : OrderItem.desc(sortBy));</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2.2.再看有没有手动指定排序字段</span></span><br><span class="line">        <span class="keyword">if</span>(orders != <span class="literal">null</span>)&#123;</span><br><span class="line">            p.addOrder(orders);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Page&lt;T&gt; <span class="title function_">toMpPage</span><span class="params">(String defaultSortBy, <span class="type">boolean</span> isAsc)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.toMpPage(isAsc ? OrderItem.asc(defaultSortBy) : OrderItem.desc(defaultSortBy));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Page&lt;T&gt; <span class="title function_">toMpPageDefaultSortByCreateTimeDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> toMpPage(<span class="string">&quot;create_time&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Page&lt;T&gt; <span class="title function_">toMpPageDefaultSortByUpdateTimeDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> toMpPage(<span class="string">&quot;update_time&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>PageQuery</code>是前端提交的查询参数，一般包含四个属性：</p><ul><li><code>pageNo</code>：页码</li><li><code>pageSize</code>：每页数据条数</li><li><code>sortBy</code>：排序字段</li><li><code>isAsc</code>：是否升序</li></ul><p><strong>PageDTO：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Schema(description = &quot;分页结果&quot;)</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageDTO</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="meta">@Schema(description = &quot;总条数&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long total;</span><br><span class="line">    <span class="meta">@Schema(description = &quot;总页数&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long pages;</span><br><span class="line">    <span class="meta">@Schema(description = &quot;集合&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回空分页结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> p MybatisPlus的分页结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt; 目标VO类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;P&gt; 原始PO类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> VO的分页对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;V, P&gt; PageDTO&lt;V&gt; <span class="title function_">empty</span><span class="params">(Page&lt;P&gt; p)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageDTO</span>&lt;&gt;(p.getTotal(), p.getPages(), Collections.emptyList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将MybatisPlus分页结果转为 VO分页结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> p MybatisPlus的分页结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> voClass 目标VO类型的字节码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt; 目标VO类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;P&gt; 原始PO类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> VO的分页对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;V, P&gt; PageDTO&lt;V&gt; <span class="title function_">of</span><span class="params">(Page&lt;P&gt; p, Class&lt;V&gt; voClass)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.非空校验</span></span><br><span class="line">        List&lt;P&gt; records = p.getRecords();</span><br><span class="line">        <span class="keyword">if</span> (records == <span class="literal">null</span> || records.size() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 无数据，返回空结果</span></span><br><span class="line">            <span class="keyword">return</span> empty(p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2.数据转换</span></span><br><span class="line">        List&lt;V&gt; vos = BeanUtil.copyToList(records, voClass);</span><br><span class="line">        <span class="comment">// 3.封装返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageDTO</span>&lt;&gt;(p.getTotal(), p.getPages(), vos);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将MybatisPlus分页结果转为 VO分页结果，允许用户自定义PO到VO的转换方式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> p MybatisPlus的分页结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> convertor PO到VO的转换函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt; 目标VO类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;P&gt; 原始PO类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> VO的分页对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;V, P&gt; PageDTO&lt;V&gt; <span class="title function_">of</span><span class="params">(Page&lt;P&gt; p, Function&lt;P, V&gt; convertor)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.非空校验</span></span><br><span class="line">        List&lt;P&gt; records = p.getRecords();</span><br><span class="line">        <span class="keyword">if</span> (records == <span class="literal">null</span> || records.size() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 无数据，返回空结果</span></span><br><span class="line">            <span class="keyword">return</span> empty(p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2.数据转换</span></span><br><span class="line">        List&lt;V&gt; vos = records.stream().map(convertor).collect(Collectors.toList());</span><br><span class="line">        <span class="comment">// 3.封装返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageDTO</span>&lt;&gt;(p.getTotal(), p.getPages(), vos);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="②-开发接口"><a href="#②-开发接口" class="headerlink" title="② 开发接口"></a>② 开发接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页查询 page</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="meta">@Operation(summary = &quot;分页查询 page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> PageDTO&lt;UserVO&gt; <span class="title function_">queryUsersPage</span><span class="params">(<span class="meta">@ParameterObject</span> UserQuery query)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;queryUsersPage ===&gt; &#123;&#125;&quot;</span>, query);</span><br><span class="line">    Page&lt;UserEntity&gt; userEntityPage = userService.page(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;UserEntity&gt;(query.getPageNo(), query.getPageSize())</span><br><span class="line">                    .addOrder(ObjectUtil.isEmpty(query.getSortBy()) ?</span><br><span class="line">                            OrderItem.desc(<span class="string">&quot;update_time&quot;</span>) :</span><br><span class="line">                            (query.getIsAsc() != <span class="literal">null</span> &amp;&amp; query.getIsAsc() ?</span><br><span class="line">                                    OrderItem.asc(query.getSortBy()) :</span><br><span class="line">                                    OrderItem.desc(query.getSortBy()))),</span><br><span class="line">            Wrappers.lambdaQuery(UserEntity.class)</span><br><span class="line">                    .like(StrUtil.isNotBlank(query.getName()), UserEntity::getUsername, query.getName())</span><br><span class="line">                    .between(query.getMinBalance() != <span class="literal">null</span> &amp;&amp; query.getMaxBalance() != <span class="literal">null</span>, UserEntity::getBalance, query.getMinBalance(), query.getMaxBalance()));</span><br><span class="line">    System.out.println(<span class="string">&quot;userEntityPage = &quot;</span> + userEntityPage.getRecords());</span><br><span class="line">    <span class="comment">//转换为Vo</span></span><br><span class="line">    List&lt;UserVO&gt; userVOList = BeanUtil.copyToList(userEntityPage.getRecords(), UserVO.class);</span><br><span class="line">    PageDTO&lt;UserVO&gt; userVoPageDTO = <span class="keyword">new</span> <span class="title class_">PageDTO</span>&lt;&gt;(userEntityPage.getCurrent(), userEntityPage.getSize(), userVOList);</span><br><span class="line">    userVoPageDTO.setTotal(userEntityPage.getTotal());</span><br><span class="line">    System.out.println(<span class="string">&quot;userVoPageDTO = &quot;</span> + userVoPageDTO.getPages());</span><br><span class="line">    <span class="keyword">return</span> userService.queryUsersPage(query);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
          <category> 开发框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> 开发框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VsCode下载安装</title>
      <link href="/posts/c68db7e6.html"/>
      <url>/posts/c68db7e6.html</url>
      
        <content type="html"><![CDATA[<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Idea下载安装</title>
      <link href="/posts/97a0a1c6.html"/>
      <url>/posts/97a0a1c6.html</url>
      
        <content type="html"><![CDATA[<img src="/img/load.gif" data-original="https://mincong.io/assets/logo-intellij.png" alt="Idea" style="zoom: 150%;" /><h1 id="IDEA的下载"><a href="#IDEA的下载" class="headerlink" title="IDEA的下载"></a>IDEA的下载</h1><p>① 打开浏览器，访问 <strong>IDEA</strong> 官网链接：<a href="https://www.jetbrains.com/">https://www.jetbrains.com</a>，如下图所示：</p><p><img src="/img/load.gif" data-original="/images/tools/idea/a/v1.png" alt="IDEA官网"></p><p>② 点击 <strong>Developer Tools</strong> 后选择 <a href="https://www.jetbrains.com/idea/"><strong>IntelliJ IDEA</strong></a> 进入 <strong>IDEA</strong> 下载界面：</p><p><img src="/img/load.gif" data-original="/images/tools/idea/a/v2.png" alt="IntelliJ IDEA"></p><p>③ 点击 <strong>Download</strong> 后选择所处环境的 <strong>IDEA</strong> 进行 <strong>Download</strong> 下载</p><p><img src="/img/load.gif" data-original="/images/tools/idea/a/v3.png" alt="IntelliJ IDEA"></p><p><img src="/img/load.gif" data-original="/images/tools/idea/a/v4.png" alt="IntelliJ IDEA"></p><hr><h1 id="IDEA的安装"><a href="#IDEA的安装" class="headerlink" title="IDEA的安装"></a>IDEA的安装</h1><p>① 双击运行下载好的 <strong>IDEA</strong> 安装程序</p><p>② 除了选择文件安装位置，其余一律默认即可</p><p><img src="/img/load.gif" data-original="/images/tools/idea/a/v5.png" alt="IntelliJ IDEA"></p><hr><h1 id="IDEA插件"><a href="#IDEA插件" class="headerlink" title="IDEA插件"></a>IDEA插件</h1><h2 id="①-文档快速生成插件"><a href="#①-文档快速生成插件" class="headerlink" title="① 文档快速生成插件"></a>① 文档快速生成插件</h2><p><img src="/img/load.gif" data-original="/images/tools/idea/a/v6.png" alt="ApiPost-Help"></p><h2 id="②-显示代码缩略图插件"><a href="#②-显示代码缩略图插件" class="headerlink" title="② 显示代码缩略图插件"></a>② 显示代码缩略图插件</h2><p><img src="/img/load.gif" data-original="/images/tools/idea/a/v7.png" alt="CodeGlance"></p><h2 id="③-代码快速生成插件"><a href="#③-代码快速生成插件" class="headerlink" title="③ 代码快速生成插件"></a>③ 代码快速生成插件</h2><p><img src="/img/load.gif" data-original="/images/tools/idea/a/v8.png" alt="EasyCode"></p><h2 id="④-代码提交信息规范插件"><a href="#④-代码提交信息规范插件" class="headerlink" title="④ 代码提交信息规范插件"></a>④ 代码提交信息规范插件</h2><p><img src="/img/load.gif" data-original="/images/tools/idea/a/v9.png" alt="Git Commit Message Helper"></p><h2 id="⑤-Mybatis框架插件"><a href="#⑤-Mybatis框架插件" class="headerlink" title="⑤ Mybatis框架插件"></a>⑤ Mybatis框架插件</h2><p><img src="/img/load.gif" data-original="/images/tools/idea/a/v10.png" alt="MybatisX"></p><h2 id="⑥-彩虹括号插件"><a href="#⑥-彩虹括号插件" class="headerlink" title="⑥ 彩虹括号插件"></a>⑥ 彩虹括号插件</h2><p><img src="/img/load.gif" data-original="/images/tools/idea/a/v11.png" alt="Rainbow Brackets"></p><h2 id="⑦-类注释呈现插件"><a href="#⑦-类注释呈现插件" class="headerlink" title="⑦ 类注释呈现插件"></a>⑦ 类注释呈现插件</h2><p><img src="/img/load.gif" data-original="/images/tools/idea/a/v12.png" alt="Show Comment"></p><h2 id="⑧-通义智能AI插件"><a href="#⑧-通义智能AI插件" class="headerlink" title="⑧ 通义智能AI插件"></a>⑧ 通义智能AI插件</h2><p><img src="/img/load.gif" data-original="/images/tools/idea/a/v13.png" alt="TongYi"></p><h2 id="⑨-阿里巴巴规约插件"><a href="#⑨-阿里巴巴规约插件" class="headerlink" title="⑨ 阿里巴巴规约插件"></a>⑨ 阿里巴巴规约插件</h2><p><img src="/img/load.gif" data-original="/images/tools/idea/a/v14.png" alt="Alibaba Java Coding Guidenlines"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装Docker</title>
      <link href="/posts/f5f9fa9b.html"/>
      <url>/posts/f5f9fa9b.html</url>
      
        <content type="html"><![CDATA[<p><img src="/img/load.gif" data-original="https://pic.imgdb.cn/item/64c0ad651ddac507cc99ceb7.jpg" alt="docker"></p><h1 id="1-卸载旧版"><a href="#1-卸载旧版" class="headerlink" title="1.卸载旧版"></a>1.卸载旧版</h1><p>首先如果系统中已存在旧的 <strong>Docker</strong> ，则先卸载：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">    docker-client \</span><br><span class="line">    docker-client-latest \</span><br><span class="line">    docker-common \</span><br><span class="line">    docker-latest \</span><br><span class="line">    docker-latest-logrotate \</span><br><span class="line">    docker-logrotate \</span><br><span class="line">    docker-engine \</span><br><span class="line">    docker-selinux </span><br></pre></td></tr></table></figure><h1 id="2-配置-Docker-的-yum-库"><a href="#2-配置-Docker-的-yum-库" class="headerlink" title="2.配置 Docker 的 yum 库"></a>2.配置 Docker 的 yum 库</h1><p>首先要安装一个 <strong>yum</strong> 工具</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><p>安装成功后，执行命令，配置 <strong>Docker</strong> 的 <strong>yum</strong> 源</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> sed -i <span class="string">&#x27;s+download.docker.com+mirrors.aliyun.com/docker-ce+&#x27;</span> /etc/yum.repos.d/docker-ce.repo</span><br></pre></td></tr></table></figure><p>更新 <strong>yum</strong> 建立缓存</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum makecache fast</span><br></pre></td></tr></table></figure><h1 id="3-安装-Docker"><a href="#3-安装-Docker" class="headerlink" title="3.安装 Docker"></a>3.安装 Docker</h1><p>执行命令，安装 <strong>Docker</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure><h1 id="4-启动和校验"><a href="#4-启动和校验" class="headerlink" title="4.启动和校验"></a>4.启动和校验</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动Docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止Docker</span></span><br><span class="line">systemctl stop docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">systemctl restart docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置开机自启</span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行docker ps命令，如果不报错，说明安装启动成功</span></span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure><h1 id="5-配置镜像加速"><a href="#5-配置镜像加速" class="headerlink" title="5.配置镜像加速"></a>5.配置镜像加速</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制内容，注意把其中的镜像加速地址改成你自己的</span></span><br><span class="line"><span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;http://hub-mirror.c.163.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://mirrors.tuna.tsinghua.edu.cn&quot;</span>,</span><br><span class="line">        <span class="string">&quot;http://mirrors.sohu.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://ustc-edu-cn.mirror.aliyuncs.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://ccr.ccs.tencentyun.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://docker.m.daocloud.io&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://docker.awsl9527.cn&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载配置</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启Docker</span></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p><img src="/img/load.gif" data-original="https://wallpaperm.cmcm.com/d5930dbadd09bfeec767d7c538f92445.jpg" alt="图片"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
